apiVersion: v1
kind: PersistentVolumeClaim
metadata: {name: 'fawb-app-{{instanceId}}-pvc-fawb-dmp-inf'}
spec:
  storageClassName: shared
  accessModes: [ReadWriteMany]
  resources:
    limits: {storage: 10Gi}
    requests: {storage: 10Gi}
  volumeMode: Filesystem
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fawb-app-{{instanceId}}
  labels: {app: 'fawb-app-{{instanceId}}', fico.application.owner: '${project.build.finalName}',
    fico.application.version: '${project.version}'}
spec:
  replicas: '{{parameters.LCM_DESIGN_MIN_REPLICAS}}'
  selector:
    matchLabels: {app: 'fawb-app-{{instanceId}}'}
  template:
    metadata:
      annotations: {sidecar.istio.io/inject: '${istio.param}', traffic.sidecar.istio.io/excludeInboundPorts: "5071"}
      labels: {app: 'fawb-app-{{instanceId}}', com.fico.dmp/enable-opa: 'true'}
    spec:
      containers:
      - image: ${dockerImageName}:${image.tag}
        imagePullPolicy: Always
        name: deployment
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef: {fieldPath: metadata.name}
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef: {fieldPath: metadata.namespace}
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef: {fieldPath: metadata.namespace}
        ports:
        - {containerPort: 8080, name: http, protocol: TCP}
        - {containerPort: 5701, name: hazelcast, protocol: TCP}
        readinessProbe:
          failureThreshold: 3
          httpGet: {path: /health, port: 8080, scheme: HTTP}
          initialDelaySeconds: 30
          periodSeconds: 120
          successThreshold: 1
          timeoutSeconds: 1
        livenessProbe:
          failureThreshold: 3
          httpGet: {path: /health, port: 8080, scheme: HTTP}
          initialDelaySeconds: 30
          periodSeconds: 120
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits: {cpu: '{{parameters.LCM_DESIGN_CPU_LIMIT}}', memory: '{{parameters.LCM_DESIGN_MEM_LIMIT}}'}
          requests: {cpu: '{{parameters.LCM_DESIGN_CPU_REQUEST}}', memory: '{{parameters.LCM_DESIGN_MEM_REQUEST}}'}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - {mountPath: /app-root/runtime/data/design, name: pvc-fawb-dmp-inf}
        securityContext:
          capabilities:
            drop: [ALL]
          runAsGroup: 185
          runAsUser: 185
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: pvc-fawb-dmp-inf
        persistentVolumeClaim: {claimName: 'fawb-app-{{instanceId}}-pvc-fawb-dmp-inf'}
      topologySpreadConstraints:
      - labelSelector:
          matchLabels: {app: 'fawb-app-{{instanceId}}'}
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchLabels: {app: 'fawb-app-{{instanceId}}'}
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
      securityContext:
        fsGroup: 2000
        supplementalGroups: [2000]
---
apiVersion: v1
kind: Service
metadata:
  name: fawb-app-{{instanceId}}
  labels: {app: 'fawb-app-{{instanceId}}', fico.application.owner: '${project.build.finalName}',
    fico.application.version: '${project.version}'}
spec:
  selector: {app: 'fawb-app-{{instanceId}}'}
  ports:
  - {name: http, protocol: TCP, port: 8080, targetPort: 8080}
  - {name: hazelcast, protocol: TCP, port: 5701, targetPort: 5701}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fawb-app-{{instanceId}}
  labels: {app: 'fawb-app-{{instanceId}}', fico.application.owner: '${project.build.finalName}',
    fico.application.version: '${project.version}'}
spec:
  rules:
  - host: fawb-app-{{instanceId}}.{{deploymentZone}}
    http:
      paths:
      - backend:
          service:
            name: fawb-app-{{instanceId}}
            port: {number: 8080}
        pathType: ImplementationSpecific
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  lables: {fico.application.owner: '${project.build.finalName}', fico.application.version: '${project.version}'}
  name: fawb-app-{{instanceId}}
spec:
  maxReplicas: '{{parameters.LCM_DESIGN_MAX_REPLICAS}}'
  minReplicas: '{{parameters.LCM_DESIGN_MIN_REPLICAS}}'
  scaleTargetRef: {apiVersion: apps/v1, kind: Deployment, name: 'fawb-app-{{instanceId}}'}
  targetCPUUtilizationPercentage: 70
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fawb-app-{{instanceId}}-metering-config-map
  labels: {com.fico.meter/role: metering-metrics}
data: {metering-metrics: 'fawb_component_metered_api_count, fawb_component_user_count'}
