/**
 *This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.
 */
package com.fico.dmp.schemaservice.controller;

import com.fico.dmp.schemaservice.SchemaService;
import java.lang.String;
import java.lang.Integer;
import com.fico.dmp.schemaservice.model.DBColumnVO;
import java.util.List;
import com.fico.dmp.schemaservice.model.QueryResult;
import com.fico.dmp.schemaservice.model.DBStatusVO;
import com.fico.dmp.schemaservice.model.DBVariableVO;
import com.fico.dmp.schemaservice.model.DBTableDDL;
import com.fico.dmp.schemaservice.model.SchemaVersionVO;
import com.fico.dmp.schemaservice.model.DBProcessVO;
import com.fico.dmp.schemaservice.model.SchemaStatisticsVO;
import com.fico.dmp.schemaservice.model.DBIndexVO;
import com.fico.dmp.schemaservice.model.DBTableVO;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.MediaType;
import org.springframework.beans.factory.annotation.Autowired;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

@RestController
@RequestMapping(value = "/schema")
public class SchemaController {

    @Autowired
    private SchemaService schemaservice;

    @RequestMapping(value = "/entry", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public void deleteEntry(@RequestParam(value = "db", required = false) String db, @RequestParam(value = "rankVersion", required = false) Integer rankVersion) {
        schemaservice.deleteEntry(db, rankVersion);
    }

    @RequestMapping(value = "/descTable", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<DBColumnVO> descTable(@RequestParam(value = "db", required = false) String db, @RequestParam(value = "tableName", required = false) String tableName) {
        return schemaservice.descTable(db, tableName);
    }

    @RequestMapping(value = "/executeSQLs", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<QueryResult> executeSQLs(@RequestParam(value = "db", required = false) String db, @RequestParam(value = "dbCommands", required = false) String dbCommands) {
        return schemaservice.executeSQLs(db, dbCommands);
    }

    @RequestMapping(value = "/dBStatus", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<DBStatusVO> getDBStatus(@RequestParam(value = "db", required = false) String db) {
        return schemaservice.getDBStatus(db);
    }

    @RequestMapping(value = "/dBVariables", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<DBVariableVO> getDBVariables(@RequestParam(value = "db", required = false) String db) {
        return schemaservice.getDBVariables(db);
    }

    @RequestMapping(value = "/ddL", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public DBTableDDL getDDL(@RequestParam(value = "db", required = false) String db, @RequestParam(value = "tableName", required = false) String tableName) {
        return schemaservice.getDDL(db, tableName);
    }

    @RequestMapping(value = "/downloadEndpoints", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<QueryResult> getDownloadEndpoints() {
        return schemaservice.getDownloadEndpoints();
    }

    @RequestMapping(value = "/migrations", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<SchemaVersionVO> getMigrations(@RequestParam(value = "db", required = false) String db) {
        return schemaservice.getMigrations(db);
    }

    @RequestMapping(value = "/processList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<DBProcessVO> getProcessList(@RequestParam(value = "db", required = false) String db) {
        return schemaservice.getProcessList(db);
    }

    @RequestMapping(value = "/statistics", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<SchemaStatisticsVO> getStatistics(@RequestParam(value = "db", required = false) String db) {
        return schemaservice.getStatistics(db);
    }

    @RequestMapping(value = "/tableIndexes", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<DBIndexVO> getTableIndexes(@RequestParam(value = "db", required = false) String db, @RequestParam(value = "tableName", required = false) String tableName) {
        return schemaservice.getTableIndexes(db, tableName);
    }

    @RequestMapping(value = "/info", produces = "application/json", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public String info() {
        return schemaservice.info();
    }

    @RequestMapping(value = "/tables", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<DBTableVO> listTables(@RequestParam(value = "db", required = false) String db) {
        return schemaservice.listTables(db);
    }

    @RequestMapping(value = "/repairDB", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public void repairDB(@RequestParam(value = "db", required = false) String db) {
        schemaservice.repairDB(db);
    }

    @RequestMapping(value = "/failure", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public void setFailure(@RequestParam(value = "db", required = false) String db, @RequestParam(value = "rankVersion", required = false) Integer rankVersion) {
        schemaservice.setFailure(db, rankVersion);
    }

    @RequestMapping(value = "/success", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public void setSuccess(@RequestParam(value = "db", required = false) String db, @RequestParam(value = "rankVersion", required = false) Integer rankVersion) {
        schemaservice.setSuccess(db, rankVersion);
    }

    @RequestMapping(value = "/up", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public void setUp() {
        schemaservice.setUp();
    }
}
