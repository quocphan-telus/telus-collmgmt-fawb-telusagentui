/**
 *This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.
 */
package com.fico.dmp.pscomponent.activitylogservice.controller;

import com.fico.dmp.pscomponent.activitylogservice.ActivityLogService;
import java.lang.String;
import java.lang.Integer;
import java.lang.Boolean;
import java.sql.Timestamp;
import com.fico.core.services.ActivityServiceBS.ActivityLogResponseWrapper;
import java.lang.Byte;
import com.fico.core.services.ActivityServiceBS.ActivityType;
import java.lang.Object;
import org.springframework.http.ResponseEntity;
import com.fico.ps.model.workflow.ProcessExecutionHistoryVO;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.MediaType;
import org.springframework.beans.factory.annotation.Autowired;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

@RestController
@RequestMapping(value = "/activityLog")
public class ActivityLogController {

    @Autowired
    private ActivityLogService activityLogService;

    @RequestMapping(value = "/activityEventLogs", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ActivityLogResponseWrapper getActivityEventLogs(@RequestParam(value = "userLocale", required = false) String userLocale, @RequestParam(value = "applicationNumber", required = false) String applicationNumber, @RequestParam(value = "activityType", required = false) Integer activityType, @RequestParam(value = "activityName", required = false) String activityName, @RequestParam(value = "isAppHistory", required = false) Boolean isAppHistory, @RequestParam(value = "createdDateStart", required = false) Timestamp createdDateStart, @RequestParam(value = "createdDateEnd", required = false) Timestamp createdDateEnd, @RequestParam(value = "pageNumber", required = false) Integer pageNumber, @RequestParam(value = "pageSize", required = false) Integer pageSize, @RequestParam(value = "sortProperties", required = false) String sortProperties) {
        return activityLogService.getActivityEventLogs(userLocale, applicationNumber, activityType, activityName, isAppHistory, createdDateStart, createdDateEnd, pageNumber, pageSize, sortProperties);
    }

    @RequestMapping(value = "/saveFAWBEventHistory", method = RequestMethod.POST)
    public ResponseEntity<Object> saveFAWBEventHistory(@RequestParam(value = "applicationId", required = false) Integer applicationId, @RequestParam(value = "applicationStatus", required = false) Integer applicationStatus, @RequestParam(value = "activityName", required = false) String activityName, @RequestParam(value = "activityDesc", required = false) String activityDesc, @RequestParam(value = "activityStatus", required = false) String activityStatus, @RequestParam(value = "activityUser", required = false) String activityUser, @RequestParam(value = "activityStartTime", required = false) Timestamp activityStartTime, @RequestParam(value = "activityEndTime", required = false) Timestamp activityEndTime, @RequestParam(value = "isActivityInError", required = false) boolean isActivityInError, @RequestParam(value = "dataPayload", required = false) Byte[] dataPayload, @RequestParam(value = "isRequestPayload", required = false) Boolean isRequestPayload, @RequestParam(value = "activityType", required = false) ActivityType activityType) {
        return activityLogService.saveFAWBEventHistory(applicationId, applicationStatus, activityName, activityDesc, activityStatus, activityUser, activityStartTime, activityEndTime, isActivityInError, dataPayload, isRequestPayload, activityType);
    }

    @RequestMapping(value = "/saveProcessDesignerEventHistory", method = RequestMethod.POST, consumes = "multipart/form-data")
    public ResponseEntity<Object> saveProcessDesignerEventHistory(@RequestParam(value = "applicationId", required = false) Integer applicationId, @RequestParam(value = "applicationStatus", required = false) Integer applicationStatus, @RequestBody ProcessExecutionHistoryVO transactionHistory, @RequestParam(value = "subProcessTypesToExtract", required = false) ActivityType[] subProcessTypesToExtract) {
        return activityLogService.saveProcessDesignerEventHistory(applicationId, applicationStatus, transactionHistory, subProcessTypesToExtract);
    }
}
