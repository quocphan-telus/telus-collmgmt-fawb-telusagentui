/**
 *This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.
 */
package com.fico.dmp.filerelatedbs.controller;

import com.fico.dmp.filerelatedbs.FileRelatedBS;
import org.springframework.web.multipart.MultipartFile;
import java.lang.String;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.ResponseEntity;
import java.lang.Integer;
import java.lang.Boolean;
import java.sql.Timestamp;
import java.lang.Object;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.MediaType;
import org.springframework.beans.factory.annotation.Autowired;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

@RestController
@RequestMapping(value = "/fileRelatedBS")
public class FileRelatedBSController {

    @Autowired
    private FileRelatedBS fileRelatedBS;

    @RequestMapping(value = "/checkDomainValueUploadFileIsValid", produces = "application/json", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public String checkDomainValueUploadFileIsValid(@RequestPart(value = "importFile") MultipartFile importFile) {
        return fileRelatedBS.checkDomainValueUploadFileIsValid(importFile);
    }

    @RequestMapping(value = "/downloadGroupAndAssociations", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<ByteArrayResource> downloadGroupAndAssociations() {
        return fileRelatedBS.downloadGroupAndAssociations();
    }

    @RequestMapping(value = "/downloadPermissions", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<ByteArrayResource> downloadPermissions() {
        return fileRelatedBS.downloadPermissions();
    }

    @RequestMapping(value = "/downloadRoleAndAssociations", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<ByteArrayResource> downloadRoleAndAssociations() {
        return fileRelatedBS.downloadRoleAndAssociations();
    }

    @RequestMapping(value = "/downloadRoleGroupUserWithAssociations", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<ByteArrayResource> downloadRoleGroupUserWithAssociations() {
        return fileRelatedBS.downloadRoleGroupUserWithAssociations();
    }

    @RequestMapping(value = "/downloadUsers", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<ByteArrayResource> downloadUsers() {
        return fileRelatedBS.downloadUsers();
    }

    @RequestMapping(value = "/exportRoleGroupUserWithAssociations_Inline", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<String> exportRoleGroupUserWithAssociations_Inline() {
        return fileRelatedBS.exportRoleGroupUserWithAssociations_Inline();
    }

    @RequestMapping(value = "/extractActivityLog", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<Object> extractActivityLog(@RequestParam(value = "exportType", required = false) String exportType, @RequestParam(value = "userLocale", required = false) String userLocale, @RequestParam(value = "applicationNumber", required = false) String applicationNumber, @RequestParam(value = "activityType", required = false) Integer activityType, @RequestParam(value = "activityName", required = false) String activityName, @RequestParam(value = "isAppHistory", required = false) Boolean isAppHistory, @RequestParam(value = "createdDateStart", required = false) Timestamp createdDateStart, @RequestParam(value = "createdDateEnd", required = false) Timestamp createdDateEnd, @RequestParam(value = "pageNumber", required = false) Integer pageNumber, @RequestParam(value = "pageSize", required = false) Integer pageSize, @RequestParam(value = "sortProperties", required = false) String sortProperties) {
        return fileRelatedBS.extractActivityLog(exportType, userLocale, applicationNumber, activityType, activityName, isAppHistory, createdDateStart, createdDateEnd, pageNumber, pageSize, sortProperties);
    }

    @RequestMapping(value = "/extractDataChangeHistoryLog", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<Object> extractDataChangeHistoryLog(@RequestParam(value = "exportType", required = false) String exportType, @RequestParam(value = "userLocale", required = false) String userLocale, @RequestParam(value = "applicationId", required = false) Integer applicationId) {
        return fileRelatedBS.extractDataChangeHistoryLog(exportType, userLocale, applicationId);
    }

    @RequestMapping(value = "/extractDomainValues", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<Object> extractDomainValues() {
        return fileRelatedBS.extractDomainValues();
    }

    @RequestMapping(value = "/importGroupAndAssociations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<String> importGroupAndAssociations(@RequestPart(value = "seedFile") MultipartFile seedFile) {
        return fileRelatedBS.importGroupAndAssociations(seedFile);
    }

    @RequestMapping(value = "/importPermissions", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<String> importPermissions(@RequestPart(value = "seedFile") MultipartFile seedFile) {
        return fileRelatedBS.importPermissions(seedFile);
    }

    @RequestMapping(value = "/importRoleAndAssociations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<String> importRoleAndAssociations(@RequestPart(value = "seedFile") MultipartFile seedFile) {
        return fileRelatedBS.importRoleAndAssociations(seedFile);
    }

    @RequestMapping(value = "/importRoleGroupUserWithAssociations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<String> importRoleGroupUserWithAssociations(@RequestPart(value = "seedFile") MultipartFile seedFile) {
        return fileRelatedBS.importRoleGroupUserWithAssociations(seedFile);
    }

    @RequestMapping(value = "/importUsers", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<String> importUsers(@RequestPart(value = "seedFile") MultipartFile seedFile) {
        return fileRelatedBS.importUsers(seedFile);
    }

    @RequestMapping(value = "/loadDomainValues", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<Object> loadDomainValues(@RequestPart(value = "importFile") MultipartFile importFile) {
        return fileRelatedBS.loadDomainValues(importFile);
    }

    @RequestMapping(value = "/uploadDomainValueTypeAndRelations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<Object> uploadDomainValueTypeAndRelations(@RequestPart(value = "bootstrapExcel") MultipartFile bootstrapExcel) {
        return fileRelatedBS.uploadDomainValueTypeAndRelations(bootstrapExcel);
    }
}
