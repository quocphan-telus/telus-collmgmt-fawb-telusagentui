/**
 *This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.
 */
package com.fico.dmp.pscomponent.usermanagementservice.controller;

import com.fico.dmp.pscomponent.usermanagementservice.UserManagementService;
import java.lang.String;
import java.lang.Object;
import org.springframework.http.ResponseEntity;
import com.fico.pscomponent.model.UserDTO;
import java.lang.Exception;
import com.fico.dmp.telusagentuidb.models.query.GetPermissionByUserIdResponse;
import java.util.List;
import com.fico.dmp.telusagentuidb.User;
import javax.servlet.http.HttpServletRequest;
import java.lang.Integer;
import java.lang.Double;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.MediaType;
import org.springframework.beans.factory.annotation.Autowired;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

@RestController
@RequestMapping(value = "/userManagement")
public class UserManagementController {

    @Autowired
    private UserManagementService userManagementService;

    @RequestMapping(value = "/activateDeactivateUsers", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<Object> activateDeactivateUsers(@RequestParam(value = "userJSONList", required = false) String userJSONList) {
        return userManagementService.activateDeactivateUsers(userJSONList);
    }

    @RequestMapping(value = "/systemRoles", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public boolean createSystemRoles() {
        return userManagementService.createSystemRoles();
    }

    @RequestMapping(value = "/user", method = RequestMethod.POST)
    public ResponseEntity<String> createUser(@RequestBody UserDTO user) {
        return userManagementService.createUser(user);
    }

    @RequestMapping(value = "/deletUser", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<String> deletUser(@RequestParam(value = "userId", required = false) String userId) {
        return userManagementService.deletUser(userId);
    }

    @RequestMapping(value = "/executeGetPermissionByUserId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<GetPermissionByUserIdResponse> executeGetPermissionByUserId() throws Exception {
        return userManagementService.executeGetPermissionByUserId();
    }

    @RequestMapping(value = "/allRoles", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<String> getAllRoles() {
        return userManagementService.getAllRoles();
    }

    @RequestMapping(value = "/allUsers", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<UserDTO> getAllUsers() {
        return userManagementService.getAllUsers();
    }

    @RequestMapping(value = "/loggedInUser", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public UserDTO getLoggedInUser() {
        return userManagementService.getLoggedInUser();
    }

    @RequestMapping(value = "/loggedInUserId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public User getLoggedInUserId() {
        return userManagementService.getLoggedInUserId();
    }

    @RequestMapping(value = "/loggedInUserRoles", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<String> getLoggedInUserRoles() {
        return userManagementService.getLoggedInUserRoles();
    }

    @RequestMapping(value = "/userOrDefaultTimeZone", produces = "application/json", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public String getUserOrDefaultTimeZone() {
        return userManagementService.getUserOrDefaultTimeZone();
    }

    @RequestMapping(value = "/importUsers", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<Object> importUsers(@RequestParam(value = "importFileContents", required = false) String importFileContents) {
        return userManagementService.importUsers(importFileContents);
    }

    @RequestMapping(value = "/isSystemOnBootstrapStatus", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public boolean isSystemOnBootstrapStatus() {
        return userManagementService.isSystemOnBootstrapStatus();
    }

    @RequestMapping(value = "/refreshRoles", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public void refreshRoles(HttpServletRequest request) {
        userManagementService.refreshRoles(request);
    }

    @RequestMapping(value = "/upSuperUsers", method = RequestMethod.PUT)
    public void setupSuperUsers(HttpServletRequest request, @RequestParam(value = "newUsers", required = false) String newUsers) {
        userManagementService.setupSuperUsers(request, newUsers);
    }

    @RequestMapping(value = "/user", method = RequestMethod.PUT)
    public ResponseEntity<String> updateUser(@RequestBody UserDTO user) {
        return userManagementService.updateUser(user);
    }

    @RequestMapping(value = "/userLimitAndTimeZone", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public ResponseEntity<Object> updateUserLimitAndTimeZone(@RequestParam(value = "userId", required = false) Integer userId, @RequestParam(value = "lendingLimit", required = false) Double lendingLimit, @RequestParam(value = "timeZone", required = false) String timeZone) {
        return userManagementService.updateUserLimitAndTimeZone(userId, lendingLimit, timeZone);
    }
}
