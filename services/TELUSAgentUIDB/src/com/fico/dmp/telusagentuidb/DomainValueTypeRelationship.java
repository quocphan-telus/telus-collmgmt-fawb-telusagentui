/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * DomainValueTypeRelationship generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`DomainValueTypeRelationship`", indexes = {
            @Index(name = "`FK_DomainValueTypeRelaticKovn`", columnList = "`DomainValueTypeId`"),
            @Index(name = "`FK_DomainValueTypeRelatixUieD`", columnList = "`ParentDomainValueTypeId1`"),
            @Index(name = "`FK_DomainValueTypeRelatiY1y2v`", columnList = "`ParentDomainValueTypeId2`")})
public class DomainValueTypeRelationship implements Serializable {


    private Integer id;

    private Integer domainValueTypeId;

    private Integer parentDomainValueTypeId1;

    private Integer parentDomainValueTypeId2;

    private DomainValueType domainValueTypeByParentDomainValueTypeId1;

    private DomainValueType domainValueTypeByDomainValueTypeId;

    private DomainValueType domainValueTypeByParentDomainValueTypeId2;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`DomainValueTypeId`", nullable = true, scale = 0, precision = 10)
    public Integer getDomainValueTypeId() {
        return this.domainValueTypeId;
    }

    public void setDomainValueTypeId(Integer domainValueTypeId) {
        this.domainValueTypeId = domainValueTypeId;
    }

    @Column(name = "`ParentDomainValueTypeId1`", nullable = true, scale = 0, precision = 10)
    public Integer getParentDomainValueTypeId1() {
        return this.parentDomainValueTypeId1;
    }

    public void setParentDomainValueTypeId1(Integer parentDomainValueTypeId1) {
        this.parentDomainValueTypeId1 = parentDomainValueTypeId1;
    }

    @Column(name = "`ParentDomainValueTypeId2`", nullable = true, scale = 0, precision = 10)
    public Integer getParentDomainValueTypeId2() {
        return this.parentDomainValueTypeId2;
    }

    public void setParentDomainValueTypeId2(Integer parentDomainValueTypeId2) {
        this.parentDomainValueTypeId2 = parentDomainValueTypeId2;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ParentDomainValueTypeId1`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_DomainValueTypeRelatixUieD`"))
    @Fetch(FetchMode.JOIN)
    public DomainValueType getDomainValueTypeByParentDomainValueTypeId1() {
        return this.domainValueTypeByParentDomainValueTypeId1;
    }

    public void setDomainValueTypeByParentDomainValueTypeId1(DomainValueType domainValueTypeByParentDomainValueTypeId1) {
        if(domainValueTypeByParentDomainValueTypeId1 != null) {
            this.parentDomainValueTypeId1 = domainValueTypeByParentDomainValueTypeId1.getId();
        }

        this.domainValueTypeByParentDomainValueTypeId1 = domainValueTypeByParentDomainValueTypeId1;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`DomainValueTypeId`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_DomainValueTypeRelaticKovn`"))
    @Fetch(FetchMode.JOIN)
    public DomainValueType getDomainValueTypeByDomainValueTypeId() {
        return this.domainValueTypeByDomainValueTypeId;
    }

    public void setDomainValueTypeByDomainValueTypeId(DomainValueType domainValueTypeByDomainValueTypeId) {
        if(domainValueTypeByDomainValueTypeId != null) {
            this.domainValueTypeId = domainValueTypeByDomainValueTypeId.getId();
        }

        this.domainValueTypeByDomainValueTypeId = domainValueTypeByDomainValueTypeId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ParentDomainValueTypeId2`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_DomainValueTypeRelatiY1y2v`"))
    @Fetch(FetchMode.JOIN)
    public DomainValueType getDomainValueTypeByParentDomainValueTypeId2() {
        return this.domainValueTypeByParentDomainValueTypeId2;
    }

    public void setDomainValueTypeByParentDomainValueTypeId2(DomainValueType domainValueTypeByParentDomainValueTypeId2) {
        if(domainValueTypeByParentDomainValueTypeId2 != null) {
            this.parentDomainValueTypeId2 = domainValueTypeByParentDomainValueTypeId2.getId();
        }

        this.domainValueTypeByParentDomainValueTypeId2 = domainValueTypeByParentDomainValueTypeId2;
    }



    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DomainValueTypeRelationship)) return false;
        final DomainValueTypeRelationship domainValueTypeRelationship = (DomainValueTypeRelationship) o;
        return Objects.equals(getId(), domainValueTypeRelationship.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}