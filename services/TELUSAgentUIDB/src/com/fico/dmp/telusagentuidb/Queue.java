/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Queue generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`QUEUE`", indexes = {
            @Index(name = "`FK_QUEUE_TO_USER_LockedBy_id`", columnList = "`LockedBy`"),
            @Index(name = "`FK_QUEUE_TO_USER_CreatedBy_id`", columnList = "`CreatedBy`"),
            @Index(name = "`FK_QUEUE_TO_USER_UpdatedBy_id`", columnList = "`UpdatedBy`"),
            @Index(name = "`FK_QUEUE_TO_DomainValue_ZOr0f`", columnList = "`PersonalQueueField`"),
            @Index(name = "`FK_QUEUE_TO_DomainValue_vL7bw`", columnList = "`QueueResultPage`")})
public class Queue implements Serializable {


    private Integer id;

    private Integer category;

    private Integer rank;

    private String name;

    private String description;

    private Timestamp createdOn;

    private Integer createdBy;

    private Integer updatedBy;

    private String jsonFilterString;

    private String sortField;

    private String sortOrder;

    private Boolean isActive;

    private String filterCriteriaQuery;

    private Boolean isLocked;

    private Integer lockedBy;

    private Boolean isPersonalQueue;

    private Integer personalQueueField;

    private Integer queueResultPage;

    private Timestamp updatedOn;

    private User userByLockedBy;

    private User userByUpdatedBy;

    private DomainValue domainValueByQueueResultPage;

    private User userByCreatedBy;

    private DomainValue domainValueByPersonalQueueField;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`Category`", nullable = true, scale = 0, precision = 10)
    public Integer getCategory() {
        return this.category;
    }

    public void setCategory(Integer category) {
        this.category = category;
    }

    @Column(name = "`Rank`", nullable = true, scale = 0, precision = 10)
    public Integer getRank() {
        return this.rank;
    }

    public void setRank(Integer rank) {
        this.rank = rank;
    }

    @Column(name = "`Name`", nullable = true, length = 255)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "`Description`", nullable = true, length = 255)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "`CreatedOn`", nullable = true)
    public Timestamp getCreatedOn() {
        return this.createdOn;
    }

    public void setCreatedOn(Timestamp createdOn) {
        this.createdOn = createdOn;
    }

    @Column(name = "`CreatedBy`", nullable = true, scale = 0, precision = 10)
    public Integer getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(Integer createdBy) {
        this.createdBy = createdBy;
    }

    @Column(name = "`UpdatedBy`", nullable = true, scale = 0, precision = 10)
    public Integer getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(Integer updatedBy) {
        this.updatedBy = updatedBy;
    }

    @Column(name = "`JsonFilterString`", nullable = true, length = 2147483647)
    public String getJsonFilterString() {
        return this.jsonFilterString;
    }

    public void setJsonFilterString(String jsonFilterString) {
        this.jsonFilterString = jsonFilterString;
    }

    @Column(name = "`SortField`", nullable = true, length = 2147483647)
    public String getSortField() {
        return this.sortField;
    }

    public void setSortField(String sortField) {
        this.sortField = sortField;
    }

    @Column(name = "`SortOrder`", nullable = true, length = 255)
    public String getSortOrder() {
        return this.sortOrder;
    }

    public void setSortOrder(String sortOrder) {
        this.sortOrder = sortOrder;
    }

    @Column(name = "`IsActive`", nullable = true)
    public Boolean getIsActive() {
        return this.isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    @Column(name = "`FilterCriteriaQuery`", nullable = true, length = 2147483647)
    public String getFilterCriteriaQuery() {
        return this.filterCriteriaQuery;
    }

    public void setFilterCriteriaQuery(String filterCriteriaQuery) {
        this.filterCriteriaQuery = filterCriteriaQuery;
    }

    @Column(name = "`IsLocked`", nullable = true)
    public Boolean getIsLocked() {
        return this.isLocked;
    }

    public void setIsLocked(Boolean isLocked) {
        this.isLocked = isLocked;
    }

    @Column(name = "`LockedBy`", nullable = true, scale = 0, precision = 10)
    public Integer getLockedBy() {
        return this.lockedBy;
    }

    public void setLockedBy(Integer lockedBy) {
        this.lockedBy = lockedBy;
    }

    @Column(name = "`IsPersonalQueue`", nullable = true)
    public Boolean getIsPersonalQueue() {
        return this.isPersonalQueue;
    }

    public void setIsPersonalQueue(Boolean isPersonalQueue) {
        this.isPersonalQueue = isPersonalQueue;
    }

    @Column(name = "`PersonalQueueField`", nullable = true, scale = 0, precision = 10)
    public Integer getPersonalQueueField() {
        return this.personalQueueField;
    }

    public void setPersonalQueueField(Integer personalQueueField) {
        this.personalQueueField = personalQueueField;
    }

    @Column(name = "`QueueResultPage`", nullable = true, scale = 0, precision = 10)
    public Integer getQueueResultPage() {
        return this.queueResultPage;
    }

    public void setQueueResultPage(Integer queueResultPage) {
        this.queueResultPage = queueResultPage;
    }

    @Column(name = "`UpdatedOn`", nullable = true)
    public Timestamp getUpdatedOn() {
        return this.updatedOn;
    }

    public void setUpdatedOn(Timestamp updatedOn) {
        this.updatedOn = updatedOn;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`LockedBy`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_QUEUE_TO_USER_LockedBy_id`"))
    @Fetch(FetchMode.JOIN)
    public User getUserByLockedBy() {
        return this.userByLockedBy;
    }

    public void setUserByLockedBy(User userByLockedBy) {
        if(userByLockedBy != null) {
            this.lockedBy = userByLockedBy.getId();
        }

        this.userByLockedBy = userByLockedBy;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`UpdatedBy`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_QUEUE_TO_USER_UpdatedBy_id`"))
    @Fetch(FetchMode.JOIN)
    public User getUserByUpdatedBy() {
        return this.userByUpdatedBy;
    }

    public void setUserByUpdatedBy(User userByUpdatedBy) {
        if(userByUpdatedBy != null) {
            this.updatedBy = userByUpdatedBy.getId();
        }

        this.userByUpdatedBy = userByUpdatedBy;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`QueueResultPage`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_QUEUE_TO_DomainValue_vL7bw`"))
    @Fetch(FetchMode.JOIN)
    public DomainValue getDomainValueByQueueResultPage() {
        return this.domainValueByQueueResultPage;
    }

    public void setDomainValueByQueueResultPage(DomainValue domainValueByQueueResultPage) {
        if(domainValueByQueueResultPage != null) {
            this.queueResultPage = domainValueByQueueResultPage.getId();
        }

        this.domainValueByQueueResultPage = domainValueByQueueResultPage;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`CreatedBy`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_QUEUE_TO_USER_CreatedBy_id`"))
    @Fetch(FetchMode.JOIN)
    public User getUserByCreatedBy() {
        return this.userByCreatedBy;
    }

    public void setUserByCreatedBy(User userByCreatedBy) {
        if(userByCreatedBy != null) {
            this.createdBy = userByCreatedBy.getId();
        }

        this.userByCreatedBy = userByCreatedBy;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`PersonalQueueField`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_QUEUE_TO_DomainValue_ZOr0f`"))
    @Fetch(FetchMode.JOIN)
    public DomainValue getDomainValueByPersonalQueueField() {
        return this.domainValueByPersonalQueueField;
    }

    public void setDomainValueByPersonalQueueField(DomainValue domainValueByPersonalQueueField) {
        if(domainValueByPersonalQueueField != null) {
            this.personalQueueField = domainValueByPersonalQueueField.getId();
        }

        this.domainValueByPersonalQueueField = domainValueByPersonalQueueField;
    }



    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Queue)) return false;
        final Queue queue = (Queue) o;
        return Objects.equals(getId(), queue.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}