/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Party generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`PARTY`", indexes = {
            @Index(name = "`FK3ge8qx045mlshses9gi4yslsl`", columnList = "`updatedBy`"),
            @Index(name = "`FKl2i1vjbwn6mbfagrn8c1ox66x`", columnList = "`createdBy`"),
            @Index(name = "`FKco9t3f6g66opwm70sbn8mdr3r`", columnList = "`ApplicationId`"),
            @Index(name = "`FK_PARTY_TO_DomainValue_jBf97`", columnList = "`applicationRole`")})
public class Party implements Serializable {


    private Integer id;

    private Timestamp createdOn;

    private Timestamp updatedOn;

    private Integer version;

    private int applicationId;

    private Integer createdBy;

    private Integer updatedBy;

    private Integer applicationRole;

    private DomainValue domainValue;

    private User userByUpdatedBy;

    private User userByCreatedBy;

    private Application application;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`createdOn`", nullable = true)
    public Timestamp getCreatedOn() {
        return this.createdOn;
    }

    public void setCreatedOn(Timestamp createdOn) {
        this.createdOn = createdOn;
    }

    @Column(name = "`updatedOn`", nullable = true)
    public Timestamp getUpdatedOn() {
        return this.updatedOn;
    }

    public void setUpdatedOn(Timestamp updatedOn) {
        this.updatedOn = updatedOn;
    }

    @Column(name = "`version`", nullable = true, scale = 0, precision = 10)
    public Integer getVersion() {
        return this.version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    @Column(name = "`ApplicationId`", nullable = false, scale = 0, precision = 10)
    public int getApplicationId() {
        return this.applicationId;
    }

    public void setApplicationId(int applicationId) {
        this.applicationId = applicationId;
    }

    @Column(name = "`createdBy`", nullable = true, scale = 0, precision = 10)
    public Integer getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(Integer createdBy) {
        this.createdBy = createdBy;
    }

    @Column(name = "`updatedBy`", nullable = true, scale = 0, precision = 10)
    public Integer getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(Integer updatedBy) {
        this.updatedBy = updatedBy;
    }

    @Column(name = "`applicationRole`", nullable = true, scale = 0, precision = 10)
    public Integer getApplicationRole() {
        return this.applicationRole;
    }

    public void setApplicationRole(Integer applicationRole) {
        this.applicationRole = applicationRole;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`applicationRole`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_PARTY_TO_DomainValue_jBf97`"))
    @Fetch(FetchMode.JOIN)
    public DomainValue getDomainValue() {
        return this.domainValue;
    }

    public void setDomainValue(DomainValue domainValue) {
        if(domainValue != null) {
            this.applicationRole = domainValue.getId();
        }

        this.domainValue = domainValue;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`updatedBy`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK3ge8qx045mlshses9gi4yslsl`"))
    @Fetch(FetchMode.JOIN)
    public User getUserByUpdatedBy() {
        return this.userByUpdatedBy;
    }

    public void setUserByUpdatedBy(User userByUpdatedBy) {
        if(userByUpdatedBy != null) {
            this.updatedBy = userByUpdatedBy.getId();
        }

        this.userByUpdatedBy = userByUpdatedBy;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`createdBy`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FKl2i1vjbwn6mbfagrn8c1ox66x`"))
    @Fetch(FetchMode.JOIN)
    public User getUserByCreatedBy() {
        return this.userByCreatedBy;
    }

    public void setUserByCreatedBy(User userByCreatedBy) {
        if(userByCreatedBy != null) {
            this.createdBy = userByCreatedBy.getId();
        }

        this.userByCreatedBy = userByCreatedBy;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ApplicationId`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FKco9t3f6g66opwm70sbn8mdr3r`"))
    @Fetch(FetchMode.JOIN)
    public Application getApplication() {
        return this.application;
    }

    public void setApplication(Application application) {
        if(application != null) {
            this.applicationId = application.getId();
        }

        this.application = application;
    }



    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Party)) return false;
        final Party party = (Party) o;
        return Objects.equals(getId(), party.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}