/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * DomainValueDescription generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`DomainValueDescription`", indexes = {
            @Index(name = "`FK_DomainValueDescriptioCNODF`", columnList = "`DomainValueId`")})
public class DomainValueDescription implements Serializable {


    private Integer id;

    private Integer domainValueId;

    private String locale;

    private String description;

    private DomainValue domainValue;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`DomainValueId`", nullable = true, scale = 0, precision = 10)
    public Integer getDomainValueId() {
        return this.domainValueId;
    }

    public void setDomainValueId(Integer domainValueId) {
        this.domainValueId = domainValueId;
    }

    @Column(name = "`Locale`", nullable = true, length = 10)
    public String getLocale() {
        return this.locale;
    }

    public void setLocale(String locale) {
        this.locale = locale;
    }

    @Column(name = "`Description`", nullable = true, length = 250)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`DomainValueId`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_DomainValueDescriptioCNODF`"))
    @Fetch(FetchMode.JOIN)
    public DomainValue getDomainValue() {
        return this.domainValue;
    }

    public void setDomainValue(DomainValue domainValue) {
        if(domainValue != null) {
            this.domainValueId = domainValue.getId();
        }

        this.domainValue = domainValue;
    }



    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DomainValueDescription)) return false;
        final DomainValueDescription domainValueDescription = (DomainValueDescription) o;
        return Objects.equals(getId(), domainValueDescription.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}