/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.ErrorEntity;


/**
 * ServiceImpl object for domain model class ErrorEntity.
 *
 * @see ErrorEntity
 */
@Service("TELUSAgentUIDB.ErrorEntityService")
@Validated
public class ErrorEntityServiceImpl implements ErrorEntityService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(ErrorEntityServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.ErrorEntityDao")
    private WMGenericDao<ErrorEntity, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ErrorEntity, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public ErrorEntity create(ErrorEntity errorEntity) {
        LOGGER.debug("Creating a new ErrorEntity with information: {}", errorEntity);

        ErrorEntity errorEntityCreated = this.wmGenericDao.create(errorEntity);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(errorEntityCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public ErrorEntity getById(Integer errorentityId) {
        LOGGER.debug("Finding ErrorEntity by id: {}", errorentityId);
        return this.wmGenericDao.findById(errorentityId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public ErrorEntity findById(Integer errorentityId) {
        LOGGER.debug("Finding ErrorEntity by id: {}", errorentityId);
        try {
            return this.wmGenericDao.findById(errorentityId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ErrorEntity found with id: {}", errorentityId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<ErrorEntity> findByMultipleIds(List<Integer> errorentityIds, boolean orderedReturn) {
        LOGGER.debug("Finding ErrorEntities by ids: {}", errorentityIds);

        return this.wmGenericDao.findByMultipleIds(errorentityIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public ErrorEntity update(ErrorEntity errorEntity) {
        LOGGER.debug("Updating ErrorEntity with information: {}", errorEntity);

        this.wmGenericDao.update(errorEntity);
        this.wmGenericDao.refresh(errorEntity);

        return errorEntity;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public ErrorEntity delete(Integer errorentityId) {
        LOGGER.debug("Deleting ErrorEntity with id: {}", errorentityId);
        ErrorEntity deleted = this.wmGenericDao.findById(errorentityId);
        if (deleted == null) {
            LOGGER.debug("No ErrorEntity found with id: {}", errorentityId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), ErrorEntity.class.getSimpleName(), errorentityId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(ErrorEntity errorEntity) {
        LOGGER.debug("Deleting ErrorEntity with {}", errorEntity);
        this.wmGenericDao.delete(errorEntity);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<ErrorEntity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ErrorEntities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<ErrorEntity> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ErrorEntities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table ErrorEntity to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table ErrorEntity to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table ErrorEntity");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "Error");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}