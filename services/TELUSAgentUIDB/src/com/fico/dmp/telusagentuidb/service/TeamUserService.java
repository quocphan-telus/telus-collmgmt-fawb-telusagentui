/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.fico.dmp.telusagentuidb.TeamUser;

/**
 * Service object for domain model class {@link TeamUser}.
 */
public interface TeamUserService {

    /**
     * Creates a new TeamUser. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TeamUser if any.
     *
     * @param teamUser Details of the TeamUser to be created; value cannot be null.
     * @return The newly created TeamUser.
     */
    TeamUser create(@Valid TeamUser teamUser);


	/**
     * Returns TeamUser by given id if exists.
     *
     * @param teamuserId The id of the TeamUser to get; value cannot be null.
     * @return TeamUser associated with the given teamuserId.
	 * @throws EntityNotFoundException If no TeamUser is found.
     */
    TeamUser getById(Integer teamuserId);

    /**
     * Find and return the TeamUser by given id if exists, returns null otherwise.
     *
     * @param teamuserId The id of the TeamUser to get; value cannot be null.
     * @return TeamUser associated with the given teamuserId.
     */
    TeamUser findById(Integer teamuserId);

	/**
     * Find and return the list of TeamUsers by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param teamuserIds The id's of the TeamUser to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TeamUsers associated with the given teamuserIds.
     */
    List<TeamUser> findByMultipleIds(List<Integer> teamuserIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TeamUser. It replaces all fields of the existing TeamUser with the given teamUser.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TeamUser if any.
     *
     * @param teamUser The details of the TeamUser to be updated; value cannot be null.
     * @return The updated TeamUser.
     * @throws EntityNotFoundException if no TeamUser is found with given input.
     */
    TeamUser update(@Valid TeamUser teamUser);

    /**
     * Deletes an existing TeamUser with the given id.
     *
     * @param teamuserId The id of the TeamUser to be deleted; value cannot be null.
     * @return The deleted TeamUser.
     * @throws EntityNotFoundException if no TeamUser found with the given id.
     */
    TeamUser delete(Integer teamuserId);

    /**
     * Deletes an existing TeamUser with the given object.
     *
     * @param teamUser The instance of the TeamUser to be deleted; value cannot be null.
     */
    void delete(TeamUser teamUser);

    /**
     * Find all TeamUsers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TeamUsers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TeamUser> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TeamUsers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TeamUsers.
     *
     * @see Pageable
     * @see Page
     */
    Page<TeamUser> findAll(String query, Pageable pageable);

    /**
     * Exports all TeamUsers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TeamUsers matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Imports all TeamUsers from the csv into the table.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     */
    void importData(MultipartFile file);

    /**
     * Retrieve the count of the TeamUsers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TeamUser.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}