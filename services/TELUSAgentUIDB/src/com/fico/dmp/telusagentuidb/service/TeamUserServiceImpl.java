/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.TeamUser;


/**
 * ServiceImpl object for domain model class TeamUser.
 *
 * @see TeamUser
 */
@Service("TELUSAgentUIDB.TeamUserService")
@Validated
public class TeamUserServiceImpl implements TeamUserService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(TeamUserServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.TeamUserDao")
    private WMGenericDao<TeamUser, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TeamUser, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public TeamUser create(TeamUser teamUser) {
        LOGGER.debug("Creating a new TeamUser with information: {}", teamUser);

        TeamUser teamUserCreated = this.wmGenericDao.create(teamUser);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(teamUserCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public TeamUser getById(Integer teamuserId) {
        LOGGER.debug("Finding TeamUser by id: {}", teamuserId);
        return this.wmGenericDao.findById(teamuserId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public TeamUser findById(Integer teamuserId) {
        LOGGER.debug("Finding TeamUser by id: {}", teamuserId);
        try {
            return this.wmGenericDao.findById(teamuserId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TeamUser found with id: {}", teamuserId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<TeamUser> findByMultipleIds(List<Integer> teamuserIds, boolean orderedReturn) {
        LOGGER.debug("Finding TeamUsers by ids: {}", teamuserIds);

        return this.wmGenericDao.findByMultipleIds(teamuserIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public TeamUser update(TeamUser teamUser) {
        LOGGER.debug("Updating TeamUser with information: {}", teamUser);

        this.wmGenericDao.update(teamUser);
        this.wmGenericDao.refresh(teamUser);

        return teamUser;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public TeamUser delete(Integer teamuserId) {
        LOGGER.debug("Deleting TeamUser with id: {}", teamuserId);
        TeamUser deleted = this.wmGenericDao.findById(teamuserId);
        if (deleted == null) {
            LOGGER.debug("No TeamUser found with id: {}", teamuserId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TeamUser.class.getSimpleName(), teamuserId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(TeamUser teamUser) {
        LOGGER.debug("Deleting TeamUser with {}", teamUser);
        this.wmGenericDao.delete(teamUser);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<TeamUser> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TeamUsers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<TeamUser> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TeamUsers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table TeamUser to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table TeamUser to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table TeamUser");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "TEAM_USER");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}