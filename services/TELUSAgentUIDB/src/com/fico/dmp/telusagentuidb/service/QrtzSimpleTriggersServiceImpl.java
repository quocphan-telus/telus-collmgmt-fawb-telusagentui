/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.QrtzSimpleTriggers;
import com.fico.dmp.telusagentuidb.QrtzSimpleTriggersId;


/**
 * ServiceImpl object for domain model class QrtzSimpleTriggers.
 *
 * @see QrtzSimpleTriggers
 */
@Service("TELUSAgentUIDB.QrtzSimpleTriggersService")
@Validated
public class QrtzSimpleTriggersServiceImpl implements QrtzSimpleTriggersService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzSimpleTriggersServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.QrtzSimpleTriggersDao")
    private WMGenericDao<QrtzSimpleTriggers, QrtzSimpleTriggersId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<QrtzSimpleTriggers, QrtzSimpleTriggersId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSimpleTriggers create(QrtzSimpleTriggers qrtzSimpleTriggers) {
        LOGGER.debug("Creating a new QrtzSimpleTriggers with information: {}", qrtzSimpleTriggers);

        QrtzSimpleTriggers qrtzSimpleTriggersCreated = this.wmGenericDao.create(qrtzSimpleTriggers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(qrtzSimpleTriggersCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSimpleTriggers getById(QrtzSimpleTriggersId qrtzsimpletriggersId) {
        LOGGER.debug("Finding QrtzSimpleTriggers by id: {}", qrtzsimpletriggersId);
        return this.wmGenericDao.findById(qrtzsimpletriggersId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSimpleTriggers findById(QrtzSimpleTriggersId qrtzsimpletriggersId) {
        LOGGER.debug("Finding QrtzSimpleTriggers by id: {}", qrtzsimpletriggersId);
        try {
            return this.wmGenericDao.findById(qrtzsimpletriggersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No QrtzSimpleTriggers found with id: {}", qrtzsimpletriggersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<QrtzSimpleTriggers> findByMultipleIds(List<QrtzSimpleTriggersId> qrtzsimpletriggersIds, boolean orderedReturn) {
        LOGGER.debug("Finding QrtzSimpleTriggers by ids: {}", qrtzsimpletriggersIds);

        return this.wmGenericDao.findByMultipleIds(qrtzsimpletriggersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSimpleTriggers update(QrtzSimpleTriggers qrtzSimpleTriggers) {
        LOGGER.debug("Updating QrtzSimpleTriggers with information: {}", qrtzSimpleTriggers);

        this.wmGenericDao.update(qrtzSimpleTriggers);
        this.wmGenericDao.refresh(qrtzSimpleTriggers);

        return qrtzSimpleTriggers;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSimpleTriggers delete(QrtzSimpleTriggersId qrtzsimpletriggersId) {
        LOGGER.debug("Deleting QrtzSimpleTriggers with id: {}", qrtzsimpletriggersId);
        QrtzSimpleTriggers deleted = this.wmGenericDao.findById(qrtzsimpletriggersId);
        if (deleted == null) {
            LOGGER.debug("No QrtzSimpleTriggers found with id: {}", qrtzsimpletriggersId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), QrtzSimpleTriggers.class.getSimpleName(), qrtzsimpletriggersId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(QrtzSimpleTriggers qrtzSimpleTriggers) {
        LOGGER.debug("Deleting QrtzSimpleTriggers with {}", qrtzSimpleTriggers);
        this.wmGenericDao.delete(qrtzSimpleTriggers);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzSimpleTriggers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all QrtzSimpleTriggers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzSimpleTriggers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all QrtzSimpleTriggers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzSimpleTriggers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzSimpleTriggers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table QrtzSimpleTriggers");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "QRTZ_SIMPLE_TRIGGERS");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}