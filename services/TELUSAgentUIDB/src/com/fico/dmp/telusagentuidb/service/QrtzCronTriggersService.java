/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.fico.dmp.telusagentuidb.QrtzCronTriggers;
import com.fico.dmp.telusagentuidb.QrtzCronTriggersId;

/**
 * Service object for domain model class {@link QrtzCronTriggers}.
 */
public interface QrtzCronTriggersService {

    /**
     * Creates a new QrtzCronTriggers. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on QrtzCronTriggers if any.
     *
     * @param qrtzCronTriggers Details of the QrtzCronTriggers to be created; value cannot be null.
     * @return The newly created QrtzCronTriggers.
     */
    QrtzCronTriggers create(@Valid QrtzCronTriggers qrtzCronTriggers);


	/**
     * Returns QrtzCronTriggers by given id if exists.
     *
     * @param qrtzcrontriggersId The id of the QrtzCronTriggers to get; value cannot be null.
     * @return QrtzCronTriggers associated with the given qrtzcrontriggersId.
	 * @throws EntityNotFoundException If no QrtzCronTriggers is found.
     */
    QrtzCronTriggers getById(QrtzCronTriggersId qrtzcrontriggersId);

    /**
     * Find and return the QrtzCronTriggers by given id if exists, returns null otherwise.
     *
     * @param qrtzcrontriggersId The id of the QrtzCronTriggers to get; value cannot be null.
     * @return QrtzCronTriggers associated with the given qrtzcrontriggersId.
     */
    QrtzCronTriggers findById(QrtzCronTriggersId qrtzcrontriggersId);

	/**
     * Find and return the list of QrtzCronTriggers by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param qrtzcrontriggersIds The id's of the QrtzCronTriggers to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return QrtzCronTriggers associated with the given qrtzcrontriggersIds.
     */
    List<QrtzCronTriggers> findByMultipleIds(List<QrtzCronTriggersId> qrtzcrontriggersIds, boolean orderedReturn);


    /**
     * Updates the details of an existing QrtzCronTriggers. It replaces all fields of the existing QrtzCronTriggers with the given qrtzCronTriggers.
     *
     * This method overrides the input field values using Server side or database managed properties defined on QrtzCronTriggers if any.
     *
     * @param qrtzCronTriggers The details of the QrtzCronTriggers to be updated; value cannot be null.
     * @return The updated QrtzCronTriggers.
     * @throws EntityNotFoundException if no QrtzCronTriggers is found with given input.
     */
    QrtzCronTriggers update(@Valid QrtzCronTriggers qrtzCronTriggers);

    /**
     * Deletes an existing QrtzCronTriggers with the given id.
     *
     * @param qrtzcrontriggersId The id of the QrtzCronTriggers to be deleted; value cannot be null.
     * @return The deleted QrtzCronTriggers.
     * @throws EntityNotFoundException if no QrtzCronTriggers found with the given id.
     */
    QrtzCronTriggers delete(QrtzCronTriggersId qrtzcrontriggersId);

    /**
     * Deletes an existing QrtzCronTriggers with the given object.
     *
     * @param qrtzCronTriggers The instance of the QrtzCronTriggers to be deleted; value cannot be null.
     */
    void delete(QrtzCronTriggers qrtzCronTriggers);

    /**
     * Find all QrtzCronTriggers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching QrtzCronTriggers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<QrtzCronTriggers> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all QrtzCronTriggers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching QrtzCronTriggers.
     *
     * @see Pageable
     * @see Page
     */
    Page<QrtzCronTriggers> findAll(String query, Pageable pageable);

    /**
     * Exports all QrtzCronTriggers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all QrtzCronTriggers matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Imports all QrtzCronTriggers from the csv into the table.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     */
    void importData(MultipartFile file);

    /**
     * Retrieve the count of the QrtzCronTriggers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the QrtzCronTriggers.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}