/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.Queue;
import com.fico.dmp.telusagentuidb.QueueGroup;


/**
 * ServiceImpl object for domain model class Queue.
 *
 * @see Queue
 */
@Service("TELUSAgentUIDB.QueueService")
@Validated
public class QueueServiceImpl implements QueueService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QueueServiceImpl.class.getName());

    @Lazy
    @Autowired
    @Qualifier("TELUSAgentUIDB.QueueGroupService")
    private QueueGroupService queueGroupService;

    @Autowired
    @Qualifier("TELUSAgentUIDB.QueueDao")
    private WMGenericDao<Queue, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Queue, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Queue create(Queue queue) {
        LOGGER.debug("Creating a new Queue with information: {}", queue);

        Queue queueCreated = this.wmGenericDao.create(queue);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(queueCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Queue getById(Integer queueId) {
        LOGGER.debug("Finding Queue by id: {}", queueId);
        return this.wmGenericDao.findById(queueId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Queue findById(Integer queueId) {
        LOGGER.debug("Finding Queue by id: {}", queueId);
        try {
            return this.wmGenericDao.findById(queueId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Queue found with id: {}", queueId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<Queue> findByMultipleIds(List<Integer> queueIds, boolean orderedReturn) {
        LOGGER.debug("Finding Queues by ids: {}", queueIds);

        return this.wmGenericDao.findByMultipleIds(queueIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Queue update(Queue queue) {
        LOGGER.debug("Updating Queue with information: {}", queue);

        this.wmGenericDao.update(queue);
        this.wmGenericDao.refresh(queue);

        return queue;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Queue delete(Integer queueId) {
        LOGGER.debug("Deleting Queue with id: {}", queueId);
        Queue deleted = this.wmGenericDao.findById(queueId);
        if (deleted == null) {
            LOGGER.debug("No Queue found with id: {}", queueId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Queue.class.getSimpleName(), queueId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(Queue queue) {
        LOGGER.debug("Deleting Queue with {}", queue);
        this.wmGenericDao.delete(queue);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Queue> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Queues");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Queue> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Queues");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Queue to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Queue to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table Queue");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "QUEUE");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QueueGroup> findAssociatedQueueGroups(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated queueGroups");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("queue.id = '" + id + "'");

        return queueGroupService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service QueueGroupService instance
     */
    protected void setQueueGroupService(QueueGroupService service) {
        this.queueGroupService = service;
    }

}