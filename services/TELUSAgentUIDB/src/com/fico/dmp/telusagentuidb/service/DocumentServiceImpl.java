/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.Document;


/**
 * ServiceImpl object for domain model class Document.
 *
 * @see Document
 */
@Service("TELUSAgentUIDB.DocumentService")
@Validated
public class DocumentServiceImpl implements DocumentService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(DocumentServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.DocumentDao")
    private WMGenericDao<Document, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Document, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Document create(Document document) {
        LOGGER.debug("Creating a new Document with information: {}", document);

        Document documentCreated = this.wmGenericDao.create(document);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(documentCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Document getById(Integer documentId) {
        LOGGER.debug("Finding Document by id: {}", documentId);
        return this.wmGenericDao.findById(documentId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Document findById(Integer documentId) {
        LOGGER.debug("Finding Document by id: {}", documentId);
        try {
            return this.wmGenericDao.findById(documentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Document found with id: {}", documentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<Document> findByMultipleIds(List<Integer> documentIds, boolean orderedReturn) {
        LOGGER.debug("Finding Documents by ids: {}", documentIds);

        return this.wmGenericDao.findByMultipleIds(documentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Document update(Document document) {
        LOGGER.debug("Updating Document with information: {}", document);

        this.wmGenericDao.update(document);
        this.wmGenericDao.refresh(document);

        return document;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Document delete(Integer documentId) {
        LOGGER.debug("Deleting Document with id: {}", documentId);
        Document deleted = this.wmGenericDao.findById(documentId);
        if (deleted == null) {
            LOGGER.debug("No Document found with id: {}", documentId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Document.class.getSimpleName(), documentId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(Document document) {
        LOGGER.debug("Deleting Document with {}", document);
        this.wmGenericDao.delete(document);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Document> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Documents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Document> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Documents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Document to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Document to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table Document");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "DOCUMENT");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}