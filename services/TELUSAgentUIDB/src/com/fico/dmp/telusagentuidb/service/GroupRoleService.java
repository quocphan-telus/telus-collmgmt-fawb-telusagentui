/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.fico.dmp.telusagentuidb.GroupRole;

/**
 * Service object for domain model class {@link GroupRole}.
 */
public interface GroupRoleService {

    /**
     * Creates a new GroupRole. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on GroupRole if any.
     *
     * @param groupRole Details of the GroupRole to be created; value cannot be null.
     * @return The newly created GroupRole.
     */
    GroupRole create(@Valid GroupRole groupRole);


	/**
     * Returns GroupRole by given id if exists.
     *
     * @param grouproleId The id of the GroupRole to get; value cannot be null.
     * @return GroupRole associated with the given grouproleId.
	 * @throws EntityNotFoundException If no GroupRole is found.
     */
    GroupRole getById(Integer grouproleId);

    /**
     * Find and return the GroupRole by given id if exists, returns null otherwise.
     *
     * @param grouproleId The id of the GroupRole to get; value cannot be null.
     * @return GroupRole associated with the given grouproleId.
     */
    GroupRole findById(Integer grouproleId);

	/**
     * Find and return the list of GroupRoles by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param grouproleIds The id's of the GroupRole to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return GroupRoles associated with the given grouproleIds.
     */
    List<GroupRole> findByMultipleIds(List<Integer> grouproleIds, boolean orderedReturn);

    /**
     * Find and return the GroupRole for given groupId  androleId  if exists.
     *
     * @param groupId value of groupId; value cannot be null.
     * @param roleId value of roleId; value cannot be null.
     * @return GroupRole associated with the given inputs.
     * @throws EntityNotFoundException if no matching GroupRole found.
     */
    GroupRole getByGroupIdAndRoleId(Integer groupId, Integer roleId);

    /**
     * Updates the details of an existing GroupRole. It replaces all fields of the existing GroupRole with the given groupRole.
     *
     * This method overrides the input field values using Server side or database managed properties defined on GroupRole if any.
     *
     * @param groupRole The details of the GroupRole to be updated; value cannot be null.
     * @return The updated GroupRole.
     * @throws EntityNotFoundException if no GroupRole is found with given input.
     */
    GroupRole update(@Valid GroupRole groupRole);

    /**
     * Deletes an existing GroupRole with the given id.
     *
     * @param grouproleId The id of the GroupRole to be deleted; value cannot be null.
     * @return The deleted GroupRole.
     * @throws EntityNotFoundException if no GroupRole found with the given id.
     */
    GroupRole delete(Integer grouproleId);

    /**
     * Deletes an existing GroupRole with the given object.
     *
     * @param groupRole The instance of the GroupRole to be deleted; value cannot be null.
     */
    void delete(GroupRole groupRole);

    /**
     * Find all GroupRoles matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching GroupRoles.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<GroupRole> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all GroupRoles matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching GroupRoles.
     *
     * @see Pageable
     * @see Page
     */
    Page<GroupRole> findAll(String query, Pageable pageable);

    /**
     * Exports all GroupRoles matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all GroupRoles matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Imports all GroupRoles from the csv into the table.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     */
    void importData(MultipartFile file);

    /**
     * Retrieve the count of the GroupRoles in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the GroupRole.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}