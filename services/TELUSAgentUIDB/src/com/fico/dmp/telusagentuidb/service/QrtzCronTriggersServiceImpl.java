/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.QrtzCronTriggers;
import com.fico.dmp.telusagentuidb.QrtzCronTriggersId;


/**
 * ServiceImpl object for domain model class QrtzCronTriggers.
 *
 * @see QrtzCronTriggers
 */
@Service("TELUSAgentUIDB.QrtzCronTriggersService")
@Validated
public class QrtzCronTriggersServiceImpl implements QrtzCronTriggersService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzCronTriggersServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.QrtzCronTriggersDao")
    private WMGenericDao<QrtzCronTriggers, QrtzCronTriggersId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<QrtzCronTriggers, QrtzCronTriggersId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzCronTriggers create(QrtzCronTriggers qrtzCronTriggers) {
        LOGGER.debug("Creating a new QrtzCronTriggers with information: {}", qrtzCronTriggers);

        QrtzCronTriggers qrtzCronTriggersCreated = this.wmGenericDao.create(qrtzCronTriggers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(qrtzCronTriggersCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzCronTriggers getById(QrtzCronTriggersId qrtzcrontriggersId) {
        LOGGER.debug("Finding QrtzCronTriggers by id: {}", qrtzcrontriggersId);
        return this.wmGenericDao.findById(qrtzcrontriggersId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzCronTriggers findById(QrtzCronTriggersId qrtzcrontriggersId) {
        LOGGER.debug("Finding QrtzCronTriggers by id: {}", qrtzcrontriggersId);
        try {
            return this.wmGenericDao.findById(qrtzcrontriggersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No QrtzCronTriggers found with id: {}", qrtzcrontriggersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<QrtzCronTriggers> findByMultipleIds(List<QrtzCronTriggersId> qrtzcrontriggersIds, boolean orderedReturn) {
        LOGGER.debug("Finding QrtzCronTriggers by ids: {}", qrtzcrontriggersIds);

        return this.wmGenericDao.findByMultipleIds(qrtzcrontriggersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzCronTriggers update(QrtzCronTriggers qrtzCronTriggers) {
        LOGGER.debug("Updating QrtzCronTriggers with information: {}", qrtzCronTriggers);

        this.wmGenericDao.update(qrtzCronTriggers);
        this.wmGenericDao.refresh(qrtzCronTriggers);

        return qrtzCronTriggers;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzCronTriggers delete(QrtzCronTriggersId qrtzcrontriggersId) {
        LOGGER.debug("Deleting QrtzCronTriggers with id: {}", qrtzcrontriggersId);
        QrtzCronTriggers deleted = this.wmGenericDao.findById(qrtzcrontriggersId);
        if (deleted == null) {
            LOGGER.debug("No QrtzCronTriggers found with id: {}", qrtzcrontriggersId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), QrtzCronTriggers.class.getSimpleName(), qrtzcrontriggersId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(QrtzCronTriggers qrtzCronTriggers) {
        LOGGER.debug("Deleting QrtzCronTriggers with {}", qrtzCronTriggers);
        this.wmGenericDao.delete(qrtzCronTriggers);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzCronTriggers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all QrtzCronTriggers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzCronTriggers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all QrtzCronTriggers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzCronTriggers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzCronTriggers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table QrtzCronTriggers");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "QRTZ_CRON_TRIGGERS");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}