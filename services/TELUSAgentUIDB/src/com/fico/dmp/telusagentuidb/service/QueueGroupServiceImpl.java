/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.QueueGroup;


/**
 * ServiceImpl object for domain model class QueueGroup.
 *
 * @see QueueGroup
 */
@Service("TELUSAgentUIDB.QueueGroupService")
@Validated
public class QueueGroupServiceImpl implements QueueGroupService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QueueGroupServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.QueueGroupDao")
    private WMGenericDao<QueueGroup, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<QueueGroup, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QueueGroup create(QueueGroup queueGroup) {
        LOGGER.debug("Creating a new QueueGroup with information: {}", queueGroup);

        QueueGroup queueGroupCreated = this.wmGenericDao.create(queueGroup);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(queueGroupCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QueueGroup getById(Integer queuegroupId) {
        LOGGER.debug("Finding QueueGroup by id: {}", queuegroupId);
        return this.wmGenericDao.findById(queuegroupId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QueueGroup findById(Integer queuegroupId) {
        LOGGER.debug("Finding QueueGroup by id: {}", queuegroupId);
        try {
            return this.wmGenericDao.findById(queuegroupId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No QueueGroup found with id: {}", queuegroupId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<QueueGroup> findByMultipleIds(List<Integer> queuegroupIds, boolean orderedReturn) {
        LOGGER.debug("Finding QueueGroups by ids: {}", queuegroupIds);

        return this.wmGenericDao.findByMultipleIds(queuegroupIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QueueGroup update(QueueGroup queueGroup) {
        LOGGER.debug("Updating QueueGroup with information: {}", queueGroup);

        this.wmGenericDao.update(queueGroup);
        this.wmGenericDao.refresh(queueGroup);

        return queueGroup;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QueueGroup delete(Integer queuegroupId) {
        LOGGER.debug("Deleting QueueGroup with id: {}", queuegroupId);
        QueueGroup deleted = this.wmGenericDao.findById(queuegroupId);
        if (deleted == null) {
            LOGGER.debug("No QueueGroup found with id: {}", queuegroupId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), QueueGroup.class.getSimpleName(), queuegroupId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(QueueGroup queueGroup) {
        LOGGER.debug("Deleting QueueGroup with {}", queueGroup);
        this.wmGenericDao.delete(queueGroup);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QueueGroup> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all QueueGroups");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QueueGroup> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all QueueGroups");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QueueGroup to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QueueGroup to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table QueueGroup");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "QUEUE_GROUP");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}