/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.Activity;
import com.fico.dmp.telusagentuidb.Application;
import com.fico.dmp.telusagentuidb.AuditDataChange;
import com.fico.dmp.telusagentuidb.Document;
import com.fico.dmp.telusagentuidb.ErrorEntity;
import com.fico.dmp.telusagentuidb.Note;
import com.fico.dmp.telusagentuidb.Party;


/**
 * ServiceImpl object for domain model class Application.
 *
 * @see Application
 */
@Service("TELUSAgentUIDB.ApplicationService")
@Validated
public class ApplicationServiceImpl implements ApplicationService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(ApplicationServiceImpl.class.getName());

    @Lazy
    @Autowired
    @Qualifier("TELUSAgentUIDB.PartyService")
    private PartyService partyService;

    @Lazy
    @Autowired
    @Qualifier("TELUSAgentUIDB.AuditDataChangeService")
    private AuditDataChangeService auditDataChangeService;

    @Lazy
    @Autowired
    @Qualifier("TELUSAgentUIDB.NoteService")
    private NoteService noteService;

    @Lazy
    @Autowired
    @Qualifier("TELUSAgentUIDB.ErrorEntityService")
    private ErrorEntityService errorEntityService;

    @Lazy
    @Autowired
    @Qualifier("TELUSAgentUIDB.DocumentService")
    private DocumentService documentService;

    @Lazy
    @Autowired
    @Qualifier("TELUSAgentUIDB.ActivityService")
    private ActivityService activityService;

    @Autowired
    @Qualifier("TELUSAgentUIDB.ApplicationDao")
    private WMGenericDao<Application, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Application, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Application create(Application application) {
        LOGGER.debug("Creating a new Application with information: {}", application);

        Application applicationCreated = this.wmGenericDao.create(application);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(applicationCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Application getById(Integer applicationId) {
        LOGGER.debug("Finding Application by id: {}", applicationId);
        return this.wmGenericDao.findById(applicationId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Application findById(Integer applicationId) {
        LOGGER.debug("Finding Application by id: {}", applicationId);
        try {
            return this.wmGenericDao.findById(applicationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Application found with id: {}", applicationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<Application> findByMultipleIds(List<Integer> applicationIds, boolean orderedReturn) {
        LOGGER.debug("Finding Applications by ids: {}", applicationIds);

        return this.wmGenericDao.findByMultipleIds(applicationIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Application getByApplicationNumber(String applicationNumber) {
        Map<String, Object> applicationNumberMap = new HashMap<>();
        applicationNumberMap.put("applicationNumber", applicationNumber);

        LOGGER.debug("Finding Application by unique keys: {}", applicationNumberMap);
        return this.wmGenericDao.findByUniqueKey(applicationNumberMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Application update(Application application) {
        LOGGER.debug("Updating Application with information: {}", application);

        this.wmGenericDao.update(application);
        this.wmGenericDao.refresh(application);

        return application;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Application delete(Integer applicationId) {
        LOGGER.debug("Deleting Application with id: {}", applicationId);
        Application deleted = this.wmGenericDao.findById(applicationId);
        if (deleted == null) {
            LOGGER.debug("No Application found with id: {}", applicationId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Application.class.getSimpleName(), applicationId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(Application application) {
        LOGGER.debug("Deleting Application with {}", application);
        this.wmGenericDao.delete(application);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Application> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Applications");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Application> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Applications");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Application to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Application to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table Application");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "APPLICATION");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Party> findAssociatedParties(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated parties");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("application.id = '" + id + "'");

        return partyService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<AuditDataChange> findAssociatedAuditDataChanges(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated auditDataChanges");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("application.id = '" + id + "'");

        return auditDataChangeService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Document> findAssociatedDocuments(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated documents");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("application.id = '" + id + "'");

        return documentService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Note> findAssociatedNotes(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated notes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("application.id = '" + id + "'");

        return noteService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<ErrorEntity> findAssociatedErrorEntities(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated errorEntities");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("application.id = '" + id + "'");

        return errorEntityService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Activity> findAssociatedActivities(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated activities");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("application.id = '" + id + "'");

        return activityService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PartyService instance
     */
    protected void setPartyService(PartyService service) {
        this.partyService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AuditDataChangeService instance
     */
    protected void setAuditDataChangeService(AuditDataChangeService service) {
        this.auditDataChangeService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service NoteService instance
     */
    protected void setNoteService(NoteService service) {
        this.noteService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ErrorEntityService instance
     */
    protected void setErrorEntityService(ErrorEntityService service) {
        this.errorEntityService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service DocumentService instance
     */
    protected void setDocumentService(DocumentService service) {
        this.documentService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ActivityService instance
     */
    protected void setActivityService(ActivityService service) {
        this.activityService = service;
    }

}