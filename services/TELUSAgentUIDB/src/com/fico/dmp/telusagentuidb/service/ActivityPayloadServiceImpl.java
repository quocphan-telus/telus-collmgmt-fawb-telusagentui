/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.ActivityPayload;


/**
 * ServiceImpl object for domain model class ActivityPayload.
 *
 * @see ActivityPayload
 */
@Service("TELUSAgentUIDB.ActivityPayloadService")
@Validated
public class ActivityPayloadServiceImpl implements ActivityPayloadService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(ActivityPayloadServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.ActivityPayloadDao")
    private WMGenericDao<ActivityPayload, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ActivityPayload, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public ActivityPayload create(ActivityPayload activityPayload) {
        LOGGER.debug("Creating a new ActivityPayload with information: {}", activityPayload);

        ActivityPayload activityPayloadCreated = this.wmGenericDao.create(activityPayload);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(activityPayloadCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public ActivityPayload getById(Integer activitypayloadId) {
        LOGGER.debug("Finding ActivityPayload by id: {}", activitypayloadId);
        return this.wmGenericDao.findById(activitypayloadId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public ActivityPayload findById(Integer activitypayloadId) {
        LOGGER.debug("Finding ActivityPayload by id: {}", activitypayloadId);
        try {
            return this.wmGenericDao.findById(activitypayloadId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ActivityPayload found with id: {}", activitypayloadId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<ActivityPayload> findByMultipleIds(List<Integer> activitypayloadIds, boolean orderedReturn) {
        LOGGER.debug("Finding ActivityPayloads by ids: {}", activitypayloadIds);

        return this.wmGenericDao.findByMultipleIds(activitypayloadIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public ActivityPayload update(ActivityPayload activityPayload) {
        LOGGER.debug("Updating ActivityPayload with information: {}", activityPayload);

        this.wmGenericDao.update(activityPayload);
        this.wmGenericDao.refresh(activityPayload);

        return activityPayload;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public ActivityPayload delete(Integer activitypayloadId) {
        LOGGER.debug("Deleting ActivityPayload with id: {}", activitypayloadId);
        ActivityPayload deleted = this.wmGenericDao.findById(activitypayloadId);
        if (deleted == null) {
            LOGGER.debug("No ActivityPayload found with id: {}", activitypayloadId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), ActivityPayload.class.getSimpleName(), activitypayloadId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(ActivityPayload activityPayload) {
        LOGGER.debug("Deleting ActivityPayload with {}", activityPayload);
        this.wmGenericDao.delete(activityPayload);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<ActivityPayload> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ActivityPayloads");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<ActivityPayload> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ActivityPayloads");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table ActivityPayload to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table ActivityPayload to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table ActivityPayload");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "ACTIVITY_PAYLOAD");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}