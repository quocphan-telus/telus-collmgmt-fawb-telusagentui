/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.fico.dmp.telusagentuidb.SchemaVersion;

/**
 * Service object for domain model class {@link SchemaVersion}.
 */
public interface SchemaVersionService {

    /**
     * Creates a new SchemaVersion. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SchemaVersion if any.
     *
     * @param schemaVersion Details of the SchemaVersion to be created; value cannot be null.
     * @return The newly created SchemaVersion.
     */
    SchemaVersion create(@Valid SchemaVersion schemaVersion);


	/**
     * Returns SchemaVersion by given id if exists.
     *
     * @param schemaversionId The id of the SchemaVersion to get; value cannot be null.
     * @return SchemaVersion associated with the given schemaversionId.
	 * @throws EntityNotFoundException If no SchemaVersion is found.
     */
    SchemaVersion getById(String schemaversionId);

    /**
     * Find and return the SchemaVersion by given id if exists, returns null otherwise.
     *
     * @param schemaversionId The id of the SchemaVersion to get; value cannot be null.
     * @return SchemaVersion associated with the given schemaversionId.
     */
    SchemaVersion findById(String schemaversionId);

	/**
     * Find and return the list of SchemaVersions by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param schemaversionIds The id's of the SchemaVersion to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return SchemaVersions associated with the given schemaversionIds.
     */
    List<SchemaVersion> findByMultipleIds(List<String> schemaversionIds, boolean orderedReturn);


    /**
     * Updates the details of an existing SchemaVersion. It replaces all fields of the existing SchemaVersion with the given schemaVersion.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SchemaVersion if any.
     *
     * @param schemaVersion The details of the SchemaVersion to be updated; value cannot be null.
     * @return The updated SchemaVersion.
     * @throws EntityNotFoundException if no SchemaVersion is found with given input.
     */
    SchemaVersion update(@Valid SchemaVersion schemaVersion);

    /**
     * Deletes an existing SchemaVersion with the given id.
     *
     * @param schemaversionId The id of the SchemaVersion to be deleted; value cannot be null.
     * @return The deleted SchemaVersion.
     * @throws EntityNotFoundException if no SchemaVersion found with the given id.
     */
    SchemaVersion delete(String schemaversionId);

    /**
     * Deletes an existing SchemaVersion with the given object.
     *
     * @param schemaVersion The instance of the SchemaVersion to be deleted; value cannot be null.
     */
    void delete(SchemaVersion schemaVersion);

    /**
     * Find all SchemaVersions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SchemaVersions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<SchemaVersion> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all SchemaVersions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SchemaVersions.
     *
     * @see Pageable
     * @see Page
     */
    Page<SchemaVersion> findAll(String query, Pageable pageable);

    /**
     * Exports all SchemaVersions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all SchemaVersions matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Imports all SchemaVersions from the csv into the table.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     */
    void importData(MultipartFile file);

    /**
     * Retrieve the count of the SchemaVersions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the SchemaVersion.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}