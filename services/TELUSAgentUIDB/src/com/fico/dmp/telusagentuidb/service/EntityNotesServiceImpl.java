/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.EntityNotes;


/**
 * ServiceImpl object for domain model class EntityNotes.
 *
 * @see EntityNotes
 */
@Service("TELUSAgentUIDB.EntityNotesService")
@Validated
public class EntityNotesServiceImpl implements EntityNotesService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(EntityNotesServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.EntityNotesDao")
    private WMGenericDao<EntityNotes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EntityNotes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public EntityNotes create(EntityNotes entityNotes) {
        LOGGER.debug("Creating a new EntityNotes with information: {}", entityNotes);

        EntityNotes entityNotesCreated = this.wmGenericDao.create(entityNotes);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(entityNotesCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public EntityNotes getById(Integer entitynotesId) {
        LOGGER.debug("Finding EntityNotes by id: {}", entitynotesId);
        return this.wmGenericDao.findById(entitynotesId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public EntityNotes findById(Integer entitynotesId) {
        LOGGER.debug("Finding EntityNotes by id: {}", entitynotesId);
        try {
            return this.wmGenericDao.findById(entitynotesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No EntityNotes found with id: {}", entitynotesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<EntityNotes> findByMultipleIds(List<Integer> entitynotesIds, boolean orderedReturn) {
        LOGGER.debug("Finding EntityNotes by ids: {}", entitynotesIds);

        return this.wmGenericDao.findByMultipleIds(entitynotesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public EntityNotes update(EntityNotes entityNotes) {
        LOGGER.debug("Updating EntityNotes with information: {}", entityNotes);

        this.wmGenericDao.update(entityNotes);
        this.wmGenericDao.refresh(entityNotes);

        return entityNotes;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public EntityNotes delete(Integer entitynotesId) {
        LOGGER.debug("Deleting EntityNotes with id: {}", entitynotesId);
        EntityNotes deleted = this.wmGenericDao.findById(entitynotesId);
        if (deleted == null) {
            LOGGER.debug("No EntityNotes found with id: {}", entitynotesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), EntityNotes.class.getSimpleName(), entitynotesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(EntityNotes entityNotes) {
        LOGGER.debug("Deleting EntityNotes with {}", entityNotes);
        this.wmGenericDao.delete(entityNotes);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<EntityNotes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EntityNotes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<EntityNotes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EntityNotes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table EntityNotes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table EntityNotes to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table EntityNotes");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "ENTITY_NOTES");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}