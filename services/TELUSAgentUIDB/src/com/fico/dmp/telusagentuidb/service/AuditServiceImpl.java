/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.Audit;


/**
 * ServiceImpl object for domain model class Audit.
 *
 * @see Audit
 */
@Service("TELUSAgentUIDB.AuditService")
@Validated
public class AuditServiceImpl implements AuditService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(AuditServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.AuditDao")
    private WMGenericDao<Audit, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Audit, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Audit create(Audit audit) {
        LOGGER.debug("Creating a new Audit with information: {}", audit);

        Audit auditCreated = this.wmGenericDao.create(audit);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(auditCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Audit getById(Integer auditId) {
        LOGGER.debug("Finding Audit by id: {}", auditId);
        return this.wmGenericDao.findById(auditId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Audit findById(Integer auditId) {
        LOGGER.debug("Finding Audit by id: {}", auditId);
        try {
            return this.wmGenericDao.findById(auditId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Audit found with id: {}", auditId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<Audit> findByMultipleIds(List<Integer> auditIds, boolean orderedReturn) {
        LOGGER.debug("Finding Audits by ids: {}", auditIds);

        return this.wmGenericDao.findByMultipleIds(auditIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Audit update(Audit audit) {
        LOGGER.debug("Updating Audit with information: {}", audit);

        this.wmGenericDao.update(audit);
        this.wmGenericDao.refresh(audit);

        return audit;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Audit delete(Integer auditId) {
        LOGGER.debug("Deleting Audit with id: {}", auditId);
        Audit deleted = this.wmGenericDao.findById(auditId);
        if (deleted == null) {
            LOGGER.debug("No Audit found with id: {}", auditId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Audit.class.getSimpleName(), auditId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(Audit audit) {
        LOGGER.debug("Deleting Audit with {}", audit);
        this.wmGenericDao.delete(audit);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Audit> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Audits");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Audit> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Audits");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Audit to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Audit to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table Audit");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "AUDIT");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}