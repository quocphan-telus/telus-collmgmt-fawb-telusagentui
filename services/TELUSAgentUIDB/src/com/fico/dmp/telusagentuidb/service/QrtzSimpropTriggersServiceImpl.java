/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.QrtzSimpropTriggers;
import com.fico.dmp.telusagentuidb.QrtzSimpropTriggersId;


/**
 * ServiceImpl object for domain model class QrtzSimpropTriggers.
 *
 * @see QrtzSimpropTriggers
 */
@Service("TELUSAgentUIDB.QrtzSimpropTriggersService")
@Validated
public class QrtzSimpropTriggersServiceImpl implements QrtzSimpropTriggersService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzSimpropTriggersServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.QrtzSimpropTriggersDao")
    private WMGenericDao<QrtzSimpropTriggers, QrtzSimpropTriggersId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<QrtzSimpropTriggers, QrtzSimpropTriggersId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSimpropTriggers create(QrtzSimpropTriggers qrtzSimpropTriggers) {
        LOGGER.debug("Creating a new QrtzSimpropTriggers with information: {}", qrtzSimpropTriggers);

        QrtzSimpropTriggers qrtzSimpropTriggersCreated = this.wmGenericDao.create(qrtzSimpropTriggers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(qrtzSimpropTriggersCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSimpropTriggers getById(QrtzSimpropTriggersId qrtzsimproptriggersId) {
        LOGGER.debug("Finding QrtzSimpropTriggers by id: {}", qrtzsimproptriggersId);
        return this.wmGenericDao.findById(qrtzsimproptriggersId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSimpropTriggers findById(QrtzSimpropTriggersId qrtzsimproptriggersId) {
        LOGGER.debug("Finding QrtzSimpropTriggers by id: {}", qrtzsimproptriggersId);
        try {
            return this.wmGenericDao.findById(qrtzsimproptriggersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No QrtzSimpropTriggers found with id: {}", qrtzsimproptriggersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<QrtzSimpropTriggers> findByMultipleIds(List<QrtzSimpropTriggersId> qrtzsimproptriggersIds, boolean orderedReturn) {
        LOGGER.debug("Finding QrtzSimpropTriggers by ids: {}", qrtzsimproptriggersIds);

        return this.wmGenericDao.findByMultipleIds(qrtzsimproptriggersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSimpropTriggers update(QrtzSimpropTriggers qrtzSimpropTriggers) {
        LOGGER.debug("Updating QrtzSimpropTriggers with information: {}", qrtzSimpropTriggers);

        this.wmGenericDao.update(qrtzSimpropTriggers);
        this.wmGenericDao.refresh(qrtzSimpropTriggers);

        return qrtzSimpropTriggers;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSimpropTriggers delete(QrtzSimpropTriggersId qrtzsimproptriggersId) {
        LOGGER.debug("Deleting QrtzSimpropTriggers with id: {}", qrtzsimproptriggersId);
        QrtzSimpropTriggers deleted = this.wmGenericDao.findById(qrtzsimproptriggersId);
        if (deleted == null) {
            LOGGER.debug("No QrtzSimpropTriggers found with id: {}", qrtzsimproptriggersId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), QrtzSimpropTriggers.class.getSimpleName(), qrtzsimproptriggersId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(QrtzSimpropTriggers qrtzSimpropTriggers) {
        LOGGER.debug("Deleting QrtzSimpropTriggers with {}", qrtzSimpropTriggers);
        this.wmGenericDao.delete(qrtzSimpropTriggers);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzSimpropTriggers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all QrtzSimpropTriggers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzSimpropTriggers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all QrtzSimpropTriggers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzSimpropTriggers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzSimpropTriggers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table QrtzSimpropTriggers");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "QRTZ_SIMPROP_TRIGGERS");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}