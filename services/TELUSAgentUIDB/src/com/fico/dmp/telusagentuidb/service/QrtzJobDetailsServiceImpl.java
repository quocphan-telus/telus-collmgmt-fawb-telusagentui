/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.QrtzJobDetails;
import com.fico.dmp.telusagentuidb.QrtzJobDetailsId;
import com.fico.dmp.telusagentuidb.QrtzTriggers;


/**
 * ServiceImpl object for domain model class QrtzJobDetails.
 *
 * @see QrtzJobDetails
 */
@Service("TELUSAgentUIDB.QrtzJobDetailsService")
@Validated
public class QrtzJobDetailsServiceImpl implements QrtzJobDetailsService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzJobDetailsServiceImpl.class.getName());

    @Lazy
    @Autowired
    @Qualifier("TELUSAgentUIDB.QrtzTriggersService")
    private QrtzTriggersService qrtzTriggersService;

    @Autowired
    @Qualifier("TELUSAgentUIDB.QrtzJobDetailsDao")
    private WMGenericDao<QrtzJobDetails, QrtzJobDetailsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<QrtzJobDetails, QrtzJobDetailsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzJobDetails create(QrtzJobDetails qrtzJobDetails) {
        LOGGER.debug("Creating a new QrtzJobDetails with information: {}", qrtzJobDetails);

        QrtzJobDetails qrtzJobDetailsCreated = this.wmGenericDao.create(qrtzJobDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(qrtzJobDetailsCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzJobDetails getById(QrtzJobDetailsId qrtzjobdetailsId) {
        LOGGER.debug("Finding QrtzJobDetails by id: {}", qrtzjobdetailsId);
        return this.wmGenericDao.findById(qrtzjobdetailsId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzJobDetails findById(QrtzJobDetailsId qrtzjobdetailsId) {
        LOGGER.debug("Finding QrtzJobDetails by id: {}", qrtzjobdetailsId);
        try {
            return this.wmGenericDao.findById(qrtzjobdetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No QrtzJobDetails found with id: {}", qrtzjobdetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<QrtzJobDetails> findByMultipleIds(List<QrtzJobDetailsId> qrtzjobdetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding QrtzJobDetails by ids: {}", qrtzjobdetailsIds);

        return this.wmGenericDao.findByMultipleIds(qrtzjobdetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzJobDetails update(QrtzJobDetails qrtzJobDetails) {
        LOGGER.debug("Updating QrtzJobDetails with information: {}", qrtzJobDetails);

        this.wmGenericDao.update(qrtzJobDetails);
        this.wmGenericDao.refresh(qrtzJobDetails);

        return qrtzJobDetails;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzJobDetails delete(QrtzJobDetailsId qrtzjobdetailsId) {
        LOGGER.debug("Deleting QrtzJobDetails with id: {}", qrtzjobdetailsId);
        QrtzJobDetails deleted = this.wmGenericDao.findById(qrtzjobdetailsId);
        if (deleted == null) {
            LOGGER.debug("No QrtzJobDetails found with id: {}", qrtzjobdetailsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), QrtzJobDetails.class.getSimpleName(), qrtzjobdetailsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(QrtzJobDetails qrtzJobDetails) {
        LOGGER.debug("Deleting QrtzJobDetails with {}", qrtzJobDetails);
        this.wmGenericDao.delete(qrtzJobDetails);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzJobDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all QrtzJobDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzJobDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all QrtzJobDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzJobDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzJobDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table QrtzJobDetails");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "QRTZ_JOB_DETAILS");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzTriggers> findAssociatedQrtzTriggerses(String jobGroup, String schedName, String jobName, Pageable pageable) {
        LOGGER.debug("Fetching all associated qrtzTriggerses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("qrtzJobDetails.jobGroup = '" + jobGroup + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("qrtzJobDetails.schedName = '" + schedName + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("qrtzJobDetails.jobName = '" + jobName + "'");

        return qrtzTriggersService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service QrtzTriggersService instance
     */
    protected void setQrtzTriggersService(QrtzTriggersService service) {
        this.qrtzTriggersService = service;
    }

}