/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.Permission;
import com.fico.dmp.telusagentuidb.RolePermission;


/**
 * ServiceImpl object for domain model class Permission.
 *
 * @see Permission
 */
@Service("TELUSAgentUIDB.PermissionService")
@Validated
public class PermissionServiceImpl implements PermissionService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(PermissionServiceImpl.class.getName());

    @Lazy
    @Autowired
    @Qualifier("TELUSAgentUIDB.RolePermissionService")
    private RolePermissionService rolePermissionService;

    @Autowired
    @Qualifier("TELUSAgentUIDB.PermissionDao")
    private WMGenericDao<Permission, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Permission, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Permission create(Permission permission) {
        LOGGER.debug("Creating a new Permission with information: {}", permission);

        Permission permissionCreated = this.wmGenericDao.create(permission);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(permissionCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Permission getById(Integer permissionId) {
        LOGGER.debug("Finding Permission by id: {}", permissionId);
        return this.wmGenericDao.findById(permissionId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Permission findById(Integer permissionId) {
        LOGGER.debug("Finding Permission by id: {}", permissionId);
        try {
            return this.wmGenericDao.findById(permissionId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Permission found with id: {}", permissionId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<Permission> findByMultipleIds(List<Integer> permissionIds, boolean orderedReturn) {
        LOGGER.debug("Finding Permissions by ids: {}", permissionIds);

        return this.wmGenericDao.findByMultipleIds(permissionIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Permission update(Permission permission) {
        LOGGER.debug("Updating Permission with information: {}", permission);

        this.wmGenericDao.update(permission);
        this.wmGenericDao.refresh(permission);

        return permission;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Permission delete(Integer permissionId) {
        LOGGER.debug("Deleting Permission with id: {}", permissionId);
        Permission deleted = this.wmGenericDao.findById(permissionId);
        if (deleted == null) {
            LOGGER.debug("No Permission found with id: {}", permissionId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Permission.class.getSimpleName(), permissionId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(Permission permission) {
        LOGGER.debug("Deleting Permission with {}", permission);
        this.wmGenericDao.delete(permission);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Permission> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Permissions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Permission> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Permissions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Permission to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Permission to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table Permission");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "PERMISSION");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<RolePermission> findAssociatedRolePermissions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated rolePermissions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("permission.id = '" + id + "'");

        return rolePermissionService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RolePermissionService instance
     */
    protected void setRolePermissionService(RolePermissionService service) {
        this.rolePermissionService = service;
    }

}