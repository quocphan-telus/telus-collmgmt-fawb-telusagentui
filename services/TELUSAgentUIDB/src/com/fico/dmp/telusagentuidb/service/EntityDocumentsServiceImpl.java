/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.EntityDocuments;


/**
 * ServiceImpl object for domain model class EntityDocuments.
 *
 * @see EntityDocuments
 */
@Service("TELUSAgentUIDB.EntityDocumentsService")
@Validated
public class EntityDocumentsServiceImpl implements EntityDocumentsService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(EntityDocumentsServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.EntityDocumentsDao")
    private WMGenericDao<EntityDocuments, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EntityDocuments, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public EntityDocuments create(EntityDocuments entityDocuments) {
        LOGGER.debug("Creating a new EntityDocuments with information: {}", entityDocuments);

        EntityDocuments entityDocumentsCreated = this.wmGenericDao.create(entityDocuments);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(entityDocumentsCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public EntityDocuments getById(Integer entitydocumentsId) {
        LOGGER.debug("Finding EntityDocuments by id: {}", entitydocumentsId);
        return this.wmGenericDao.findById(entitydocumentsId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public EntityDocuments findById(Integer entitydocumentsId) {
        LOGGER.debug("Finding EntityDocuments by id: {}", entitydocumentsId);
        try {
            return this.wmGenericDao.findById(entitydocumentsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No EntityDocuments found with id: {}", entitydocumentsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<EntityDocuments> findByMultipleIds(List<Integer> entitydocumentsIds, boolean orderedReturn) {
        LOGGER.debug("Finding EntityDocuments by ids: {}", entitydocumentsIds);

        return this.wmGenericDao.findByMultipleIds(entitydocumentsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public EntityDocuments update(EntityDocuments entityDocuments) {
        LOGGER.debug("Updating EntityDocuments with information: {}", entityDocuments);

        this.wmGenericDao.update(entityDocuments);
        this.wmGenericDao.refresh(entityDocuments);

        return entityDocuments;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public EntityDocuments delete(Integer entitydocumentsId) {
        LOGGER.debug("Deleting EntityDocuments with id: {}", entitydocumentsId);
        EntityDocuments deleted = this.wmGenericDao.findById(entitydocumentsId);
        if (deleted == null) {
            LOGGER.debug("No EntityDocuments found with id: {}", entitydocumentsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), EntityDocuments.class.getSimpleName(), entitydocumentsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(EntityDocuments entityDocuments) {
        LOGGER.debug("Deleting EntityDocuments with {}", entityDocuments);
        this.wmGenericDao.delete(entityDocuments);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<EntityDocuments> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EntityDocuments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<EntityDocuments> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EntityDocuments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table EntityDocuments to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table EntityDocuments to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table EntityDocuments");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "ENTITY_DOCUMENTS");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}