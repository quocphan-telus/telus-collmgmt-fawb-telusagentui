/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.SchemaVersion;


/**
 * ServiceImpl object for domain model class SchemaVersion.
 *
 * @see SchemaVersion
 */
@Service("TELUSAgentUIDB.SchemaVersionService")
@Validated
public class SchemaVersionServiceImpl implements SchemaVersionService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(SchemaVersionServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.SchemaVersionDao")
    private WMGenericDao<SchemaVersion, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SchemaVersion, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public SchemaVersion create(SchemaVersion schemaVersion) {
        LOGGER.debug("Creating a new SchemaVersion with information: {}", schemaVersion);

        SchemaVersion schemaVersionCreated = this.wmGenericDao.create(schemaVersion);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(schemaVersionCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public SchemaVersion getById(String schemaversionId) {
        LOGGER.debug("Finding SchemaVersion by id: {}", schemaversionId);
        return this.wmGenericDao.findById(schemaversionId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public SchemaVersion findById(String schemaversionId) {
        LOGGER.debug("Finding SchemaVersion by id: {}", schemaversionId);
        try {
            return this.wmGenericDao.findById(schemaversionId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SchemaVersion found with id: {}", schemaversionId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<SchemaVersion> findByMultipleIds(List<String> schemaversionIds, boolean orderedReturn) {
        LOGGER.debug("Finding SchemaVersions by ids: {}", schemaversionIds);

        return this.wmGenericDao.findByMultipleIds(schemaversionIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public SchemaVersion update(SchemaVersion schemaVersion) {
        LOGGER.debug("Updating SchemaVersion with information: {}", schemaVersion);

        this.wmGenericDao.update(schemaVersion);
        this.wmGenericDao.refresh(schemaVersion);

        return schemaVersion;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public SchemaVersion delete(String schemaversionId) {
        LOGGER.debug("Deleting SchemaVersion with id: {}", schemaversionId);
        SchemaVersion deleted = this.wmGenericDao.findById(schemaversionId);
        if (deleted == null) {
            LOGGER.debug("No SchemaVersion found with id: {}", schemaversionId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), SchemaVersion.class.getSimpleName(), schemaversionId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(SchemaVersion schemaVersion) {
        LOGGER.debug("Deleting SchemaVersion with {}", schemaVersion);
        this.wmGenericDao.delete(schemaVersion);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<SchemaVersion> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SchemaVersions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<SchemaVersion> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SchemaVersions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table SchemaVersion to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table SchemaVersion to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table SchemaVersion");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "schema_version");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}