/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.fico.dmp.telusagentuidb.DomainValueTypeRelationship;

/**
 * Service object for domain model class {@link DomainValueTypeRelationship}.
 */
public interface DomainValueTypeRelationshipService {

    /**
     * Creates a new DomainValueTypeRelationship. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DomainValueTypeRelationship if any.
     *
     * @param domainValueTypeRelationship Details of the DomainValueTypeRelationship to be created; value cannot be null.
     * @return The newly created DomainValueTypeRelationship.
     */
    DomainValueTypeRelationship create(@Valid DomainValueTypeRelationship domainValueTypeRelationship);


	/**
     * Returns DomainValueTypeRelationship by given id if exists.
     *
     * @param domainvaluetyperelationshipId The id of the DomainValueTypeRelationship to get; value cannot be null.
     * @return DomainValueTypeRelationship associated with the given domainvaluetyperelationshipId.
	 * @throws EntityNotFoundException If no DomainValueTypeRelationship is found.
     */
    DomainValueTypeRelationship getById(Integer domainvaluetyperelationshipId);

    /**
     * Find and return the DomainValueTypeRelationship by given id if exists, returns null otherwise.
     *
     * @param domainvaluetyperelationshipId The id of the DomainValueTypeRelationship to get; value cannot be null.
     * @return DomainValueTypeRelationship associated with the given domainvaluetyperelationshipId.
     */
    DomainValueTypeRelationship findById(Integer domainvaluetyperelationshipId);

	/**
     * Find and return the list of DomainValueTypeRelationships by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param domainvaluetyperelationshipIds The id's of the DomainValueTypeRelationship to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return DomainValueTypeRelationships associated with the given domainvaluetyperelationshipIds.
     */
    List<DomainValueTypeRelationship> findByMultipleIds(List<Integer> domainvaluetyperelationshipIds, boolean orderedReturn);


    /**
     * Updates the details of an existing DomainValueTypeRelationship. It replaces all fields of the existing DomainValueTypeRelationship with the given domainValueTypeRelationship.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DomainValueTypeRelationship if any.
     *
     * @param domainValueTypeRelationship The details of the DomainValueTypeRelationship to be updated; value cannot be null.
     * @return The updated DomainValueTypeRelationship.
     * @throws EntityNotFoundException if no DomainValueTypeRelationship is found with given input.
     */
    DomainValueTypeRelationship update(@Valid DomainValueTypeRelationship domainValueTypeRelationship);

    /**
     * Deletes an existing DomainValueTypeRelationship with the given id.
     *
     * @param domainvaluetyperelationshipId The id of the DomainValueTypeRelationship to be deleted; value cannot be null.
     * @return The deleted DomainValueTypeRelationship.
     * @throws EntityNotFoundException if no DomainValueTypeRelationship found with the given id.
     */
    DomainValueTypeRelationship delete(Integer domainvaluetyperelationshipId);

    /**
     * Deletes an existing DomainValueTypeRelationship with the given object.
     *
     * @param domainValueTypeRelationship The instance of the DomainValueTypeRelationship to be deleted; value cannot be null.
     */
    void delete(DomainValueTypeRelationship domainValueTypeRelationship);

    /**
     * Find all DomainValueTypeRelationships matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DomainValueTypeRelationships.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<DomainValueTypeRelationship> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all DomainValueTypeRelationships matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DomainValueTypeRelationships.
     *
     * @see Pageable
     * @see Page
     */
    Page<DomainValueTypeRelationship> findAll(String query, Pageable pageable);

    /**
     * Exports all DomainValueTypeRelationships matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all DomainValueTypeRelationships matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Imports all DomainValueTypeRelationships from the csv into the table.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     */
    void importData(MultipartFile file);

    /**
     * Retrieve the count of the DomainValueTypeRelationships in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the DomainValueTypeRelationship.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}