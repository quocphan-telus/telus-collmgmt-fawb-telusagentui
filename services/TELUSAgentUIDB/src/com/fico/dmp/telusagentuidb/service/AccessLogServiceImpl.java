/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.AccessLog;


/**
 * ServiceImpl object for domain model class AccessLog.
 *
 * @see AccessLog
 */
@Service("TELUSAgentUIDB.AccessLogService")
@Validated
public class AccessLogServiceImpl implements AccessLogService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(AccessLogServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.AccessLogDao")
    private WMGenericDao<AccessLog, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AccessLog, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AccessLog create(AccessLog accessLog) {
        LOGGER.debug("Creating a new AccessLog with information: {}", accessLog);

        AccessLog accessLogCreated = this.wmGenericDao.create(accessLog);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(accessLogCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AccessLog getById(Integer accesslogId) {
        LOGGER.debug("Finding AccessLog by id: {}", accesslogId);
        return this.wmGenericDao.findById(accesslogId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AccessLog findById(Integer accesslogId) {
        LOGGER.debug("Finding AccessLog by id: {}", accesslogId);
        try {
            return this.wmGenericDao.findById(accesslogId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AccessLog found with id: {}", accesslogId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<AccessLog> findByMultipleIds(List<Integer> accesslogIds, boolean orderedReturn) {
        LOGGER.debug("Finding AccessLogs by ids: {}", accesslogIds);

        return this.wmGenericDao.findByMultipleIds(accesslogIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AccessLog update(AccessLog accessLog) {
        LOGGER.debug("Updating AccessLog with information: {}", accessLog);

        this.wmGenericDao.update(accessLog);
        this.wmGenericDao.refresh(accessLog);

        return accessLog;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AccessLog delete(Integer accesslogId) {
        LOGGER.debug("Deleting AccessLog with id: {}", accesslogId);
        AccessLog deleted = this.wmGenericDao.findById(accesslogId);
        if (deleted == null) {
            LOGGER.debug("No AccessLog found with id: {}", accesslogId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), AccessLog.class.getSimpleName(), accesslogId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(AccessLog accessLog) {
        LOGGER.debug("Deleting AccessLog with {}", accessLog);
        this.wmGenericDao.delete(accessLog);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<AccessLog> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AccessLogs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<AccessLog> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AccessLogs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table AccessLog to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table AccessLog to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table AccessLog");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "ACCESS_LOG");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}