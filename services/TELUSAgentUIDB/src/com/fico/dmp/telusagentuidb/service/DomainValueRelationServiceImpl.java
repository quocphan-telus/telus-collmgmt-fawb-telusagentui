/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.DomainValueRelation;


/**
 * ServiceImpl object for domain model class DomainValueRelation.
 *
 * @see DomainValueRelation
 */
@Service("TELUSAgentUIDB.DomainValueRelationService")
@Validated
public class DomainValueRelationServiceImpl implements DomainValueRelationService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(DomainValueRelationServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.DomainValueRelationDao")
    private WMGenericDao<DomainValueRelation, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DomainValueRelation, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public DomainValueRelation create(DomainValueRelation domainValueRelation) {
        LOGGER.debug("Creating a new DomainValueRelation with information: {}", domainValueRelation);

        DomainValueRelation domainValueRelationCreated = this.wmGenericDao.create(domainValueRelation);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(domainValueRelationCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public DomainValueRelation getById(Integer domainvaluerelationId) {
        LOGGER.debug("Finding DomainValueRelation by id: {}", domainvaluerelationId);
        return this.wmGenericDao.findById(domainvaluerelationId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public DomainValueRelation findById(Integer domainvaluerelationId) {
        LOGGER.debug("Finding DomainValueRelation by id: {}", domainvaluerelationId);
        try {
            return this.wmGenericDao.findById(domainvaluerelationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No DomainValueRelation found with id: {}", domainvaluerelationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<DomainValueRelation> findByMultipleIds(List<Integer> domainvaluerelationIds, boolean orderedReturn) {
        LOGGER.debug("Finding DomainValueRelations by ids: {}", domainvaluerelationIds);

        return this.wmGenericDao.findByMultipleIds(domainvaluerelationIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public DomainValueRelation update(DomainValueRelation domainValueRelation) {
        LOGGER.debug("Updating DomainValueRelation with information: {}", domainValueRelation);

        this.wmGenericDao.update(domainValueRelation);
        this.wmGenericDao.refresh(domainValueRelation);

        return domainValueRelation;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public DomainValueRelation delete(Integer domainvaluerelationId) {
        LOGGER.debug("Deleting DomainValueRelation with id: {}", domainvaluerelationId);
        DomainValueRelation deleted = this.wmGenericDao.findById(domainvaluerelationId);
        if (deleted == null) {
            LOGGER.debug("No DomainValueRelation found with id: {}", domainvaluerelationId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), DomainValueRelation.class.getSimpleName(), domainvaluerelationId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(DomainValueRelation domainValueRelation) {
        LOGGER.debug("Deleting DomainValueRelation with {}", domainValueRelation);
        this.wmGenericDao.delete(domainValueRelation);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<DomainValueRelation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DomainValueRelations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<DomainValueRelation> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DomainValueRelations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table DomainValueRelation to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table DomainValueRelation to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table DomainValueRelation");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "DomainValueRelation");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}