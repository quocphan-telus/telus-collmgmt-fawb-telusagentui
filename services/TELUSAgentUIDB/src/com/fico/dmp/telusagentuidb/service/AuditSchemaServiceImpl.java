/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.AuditSchema;


/**
 * ServiceImpl object for domain model class AuditSchema.
 *
 * @see AuditSchema
 */
@Service("TELUSAgentUIDB.AuditSchemaService")
@Validated
public class AuditSchemaServiceImpl implements AuditSchemaService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(AuditSchemaServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.AuditSchemaDao")
    private WMGenericDao<AuditSchema, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AuditSchema, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AuditSchema create(AuditSchema auditSchema) {
        LOGGER.debug("Creating a new AuditSchema with information: {}", auditSchema);

        AuditSchema auditSchemaCreated = this.wmGenericDao.create(auditSchema);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(auditSchemaCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AuditSchema getById(Integer auditschemaId) {
        LOGGER.debug("Finding AuditSchema by id: {}", auditschemaId);
        return this.wmGenericDao.findById(auditschemaId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AuditSchema findById(Integer auditschemaId) {
        LOGGER.debug("Finding AuditSchema by id: {}", auditschemaId);
        try {
            return this.wmGenericDao.findById(auditschemaId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AuditSchema found with id: {}", auditschemaId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<AuditSchema> findByMultipleIds(List<Integer> auditschemaIds, boolean orderedReturn) {
        LOGGER.debug("Finding AuditSchemas by ids: {}", auditschemaIds);

        return this.wmGenericDao.findByMultipleIds(auditschemaIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AuditSchema update(AuditSchema auditSchema) {
        LOGGER.debug("Updating AuditSchema with information: {}", auditSchema);

        this.wmGenericDao.update(auditSchema);
        this.wmGenericDao.refresh(auditSchema);

        return auditSchema;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AuditSchema delete(Integer auditschemaId) {
        LOGGER.debug("Deleting AuditSchema with id: {}", auditschemaId);
        AuditSchema deleted = this.wmGenericDao.findById(auditschemaId);
        if (deleted == null) {
            LOGGER.debug("No AuditSchema found with id: {}", auditschemaId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), AuditSchema.class.getSimpleName(), auditschemaId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(AuditSchema auditSchema) {
        LOGGER.debug("Deleting AuditSchema with {}", auditSchema);
        this.wmGenericDao.delete(auditSchema);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<AuditSchema> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AuditSchemas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<AuditSchema> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AuditSchemas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table AuditSchema to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table AuditSchema to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table AuditSchema");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "AuditSchema");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}