/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.GroupRole;
import com.fico.dmp.telusagentuidb.Role;
import com.fico.dmp.telusagentuidb.RolePermission;
import com.fico.dmp.telusagentuidb.UserRole;


/**
 * ServiceImpl object for domain model class Role.
 *
 * @see Role
 */
@Service("TELUSAgentUIDB.RoleService")
@Validated
public class RoleServiceImpl implements RoleService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(RoleServiceImpl.class.getName());

    @Lazy
    @Autowired
    @Qualifier("TELUSAgentUIDB.GroupRoleService")
    private GroupRoleService groupRoleService;

    @Lazy
    @Autowired
    @Qualifier("TELUSAgentUIDB.RolePermissionService")
    private RolePermissionService rolePermissionService;

    @Lazy
    @Autowired
    @Qualifier("TELUSAgentUIDB.UserRoleService")
    private UserRoleService userRoleService;

    @Autowired
    @Qualifier("TELUSAgentUIDB.RoleDao")
    private WMGenericDao<Role, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Role, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Role create(Role roleInstance) {
        LOGGER.debug("Creating a new Role with information: {}", roleInstance);

        Role roleInstanceCreated = this.wmGenericDao.create(roleInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(roleInstanceCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Role getById(Integer roleId) {
        LOGGER.debug("Finding Role by id: {}", roleId);
        return this.wmGenericDao.findById(roleId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Role findById(Integer roleId) {
        LOGGER.debug("Finding Role by id: {}", roleId);
        try {
            return this.wmGenericDao.findById(roleId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Role found with id: {}", roleId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<Role> findByMultipleIds(List<Integer> roleIds, boolean orderedReturn) {
        LOGGER.debug("Finding Roles by ids: {}", roleIds);

        return this.wmGenericDao.findByMultipleIds(roleIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Role getByRole(String role) {
        Map<String, Object> roleMap = new HashMap<>();
        roleMap.put("role", role);

        LOGGER.debug("Finding Role by unique keys: {}", roleMap);
        return this.wmGenericDao.findByUniqueKey(roleMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Role update(Role roleInstance) {
        LOGGER.debug("Updating Role with information: {}", roleInstance);

        this.wmGenericDao.update(roleInstance);
        this.wmGenericDao.refresh(roleInstance);

        return roleInstance;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Role delete(Integer roleId) {
        LOGGER.debug("Deleting Role with id: {}", roleId);
        Role deleted = this.wmGenericDao.findById(roleId);
        if (deleted == null) {
            LOGGER.debug("No Role found with id: {}", roleId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Role.class.getSimpleName(), roleId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(Role roleInstance) {
        LOGGER.debug("Deleting Role with {}", roleInstance);
        this.wmGenericDao.delete(roleInstance);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Role> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Roles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Role> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Roles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Role to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Role to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table Role");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "ROLE");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<UserRole> findAssociatedUserRoles(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated userRoles");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("role.id = '" + id + "'");

        return userRoleService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<RolePermission> findAssociatedRolePermissions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated rolePermissions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("role.id = '" + id + "'");

        return rolePermissionService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<GroupRole> findAssociatedGroupRoles(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated groupRoles");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("role.id = '" + id + "'");

        return groupRoleService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service GroupRoleService instance
     */
    protected void setGroupRoleService(GroupRoleService service) {
        this.groupRoleService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RolePermissionService instance
     */
    protected void setRolePermissionService(RolePermissionService service) {
        this.rolePermissionService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service UserRoleService instance
     */
    protected void setUserRoleService(UserRoleService service) {
        this.userRoleService = service;
    }

}