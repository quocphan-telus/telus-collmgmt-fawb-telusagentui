/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.QrtzBlobTriggers;
import com.fico.dmp.telusagentuidb.QrtzBlobTriggersId;


/**
 * ServiceImpl object for domain model class QrtzBlobTriggers.
 *
 * @see QrtzBlobTriggers
 */
@Service("TELUSAgentUIDB.QrtzBlobTriggersService")
@Validated
public class QrtzBlobTriggersServiceImpl implements QrtzBlobTriggersService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzBlobTriggersServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.QrtzBlobTriggersDao")
    private WMGenericDao<QrtzBlobTriggers, QrtzBlobTriggersId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<QrtzBlobTriggers, QrtzBlobTriggersId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzBlobTriggers create(QrtzBlobTriggers qrtzBlobTriggers) {
        LOGGER.debug("Creating a new QrtzBlobTriggers with information: {}", qrtzBlobTriggers);

        QrtzBlobTriggers qrtzBlobTriggersCreated = this.wmGenericDao.create(qrtzBlobTriggers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(qrtzBlobTriggersCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzBlobTriggers getById(QrtzBlobTriggersId qrtzblobtriggersId) {
        LOGGER.debug("Finding QrtzBlobTriggers by id: {}", qrtzblobtriggersId);
        return this.wmGenericDao.findById(qrtzblobtriggersId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzBlobTriggers findById(QrtzBlobTriggersId qrtzblobtriggersId) {
        LOGGER.debug("Finding QrtzBlobTriggers by id: {}", qrtzblobtriggersId);
        try {
            return this.wmGenericDao.findById(qrtzblobtriggersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No QrtzBlobTriggers found with id: {}", qrtzblobtriggersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<QrtzBlobTriggers> findByMultipleIds(List<QrtzBlobTriggersId> qrtzblobtriggersIds, boolean orderedReturn) {
        LOGGER.debug("Finding QrtzBlobTriggers by ids: {}", qrtzblobtriggersIds);

        return this.wmGenericDao.findByMultipleIds(qrtzblobtriggersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzBlobTriggers update(QrtzBlobTriggers qrtzBlobTriggers) {
        LOGGER.debug("Updating QrtzBlobTriggers with information: {}", qrtzBlobTriggers);

        this.wmGenericDao.update(qrtzBlobTriggers);
        this.wmGenericDao.refresh(qrtzBlobTriggers);

        return qrtzBlobTriggers;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzBlobTriggers delete(QrtzBlobTriggersId qrtzblobtriggersId) {
        LOGGER.debug("Deleting QrtzBlobTriggers with id: {}", qrtzblobtriggersId);
        QrtzBlobTriggers deleted = this.wmGenericDao.findById(qrtzblobtriggersId);
        if (deleted == null) {
            LOGGER.debug("No QrtzBlobTriggers found with id: {}", qrtzblobtriggersId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), QrtzBlobTriggers.class.getSimpleName(), qrtzblobtriggersId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(QrtzBlobTriggers qrtzBlobTriggers) {
        LOGGER.debug("Deleting QrtzBlobTriggers with {}", qrtzBlobTriggers);
        this.wmGenericDao.delete(qrtzBlobTriggers);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzBlobTriggers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all QrtzBlobTriggers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzBlobTriggers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all QrtzBlobTriggers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzBlobTriggers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzBlobTriggers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table QrtzBlobTriggers");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "QRTZ_BLOB_TRIGGERS");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}