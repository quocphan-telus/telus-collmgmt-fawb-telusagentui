/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.TeamManager;


/**
 * ServiceImpl object for domain model class TeamManager.
 *
 * @see TeamManager
 */
@Service("TELUSAgentUIDB.TeamManagerService")
@Validated
public class TeamManagerServiceImpl implements TeamManagerService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(TeamManagerServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.TeamManagerDao")
    private WMGenericDao<TeamManager, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TeamManager, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public TeamManager create(TeamManager teamManager) {
        LOGGER.debug("Creating a new TeamManager with information: {}", teamManager);

        TeamManager teamManagerCreated = this.wmGenericDao.create(teamManager);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(teamManagerCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public TeamManager getById(Integer teammanagerId) {
        LOGGER.debug("Finding TeamManager by id: {}", teammanagerId);
        return this.wmGenericDao.findById(teammanagerId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public TeamManager findById(Integer teammanagerId) {
        LOGGER.debug("Finding TeamManager by id: {}", teammanagerId);
        try {
            return this.wmGenericDao.findById(teammanagerId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TeamManager found with id: {}", teammanagerId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<TeamManager> findByMultipleIds(List<Integer> teammanagerIds, boolean orderedReturn) {
        LOGGER.debug("Finding TeamManagers by ids: {}", teammanagerIds);

        return this.wmGenericDao.findByMultipleIds(teammanagerIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public TeamManager update(TeamManager teamManager) {
        LOGGER.debug("Updating TeamManager with information: {}", teamManager);

        this.wmGenericDao.update(teamManager);
        this.wmGenericDao.refresh(teamManager);

        return teamManager;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public TeamManager delete(Integer teammanagerId) {
        LOGGER.debug("Deleting TeamManager with id: {}", teammanagerId);
        TeamManager deleted = this.wmGenericDao.findById(teammanagerId);
        if (deleted == null) {
            LOGGER.debug("No TeamManager found with id: {}", teammanagerId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TeamManager.class.getSimpleName(), teammanagerId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(TeamManager teamManager) {
        LOGGER.debug("Deleting TeamManager with {}", teamManager);
        this.wmGenericDao.delete(teamManager);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<TeamManager> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TeamManagers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<TeamManager> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TeamManagers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table TeamManager to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table TeamManager to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table TeamManager");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "TEAM_MANAGER");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}