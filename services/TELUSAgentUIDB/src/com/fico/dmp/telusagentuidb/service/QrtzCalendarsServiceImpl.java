/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.QrtzCalendars;
import com.fico.dmp.telusagentuidb.QrtzCalendarsId;


/**
 * ServiceImpl object for domain model class QrtzCalendars.
 *
 * @see QrtzCalendars
 */
@Service("TELUSAgentUIDB.QrtzCalendarsService")
@Validated
public class QrtzCalendarsServiceImpl implements QrtzCalendarsService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzCalendarsServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.QrtzCalendarsDao")
    private WMGenericDao<QrtzCalendars, QrtzCalendarsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<QrtzCalendars, QrtzCalendarsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzCalendars create(QrtzCalendars qrtzCalendars) {
        LOGGER.debug("Creating a new QrtzCalendars with information: {}", qrtzCalendars);

        QrtzCalendars qrtzCalendarsCreated = this.wmGenericDao.create(qrtzCalendars);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(qrtzCalendarsCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzCalendars getById(QrtzCalendarsId qrtzcalendarsId) {
        LOGGER.debug("Finding QrtzCalendars by id: {}", qrtzcalendarsId);
        return this.wmGenericDao.findById(qrtzcalendarsId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzCalendars findById(QrtzCalendarsId qrtzcalendarsId) {
        LOGGER.debug("Finding QrtzCalendars by id: {}", qrtzcalendarsId);
        try {
            return this.wmGenericDao.findById(qrtzcalendarsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No QrtzCalendars found with id: {}", qrtzcalendarsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<QrtzCalendars> findByMultipleIds(List<QrtzCalendarsId> qrtzcalendarsIds, boolean orderedReturn) {
        LOGGER.debug("Finding QrtzCalendars by ids: {}", qrtzcalendarsIds);

        return this.wmGenericDao.findByMultipleIds(qrtzcalendarsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzCalendars update(QrtzCalendars qrtzCalendars) {
        LOGGER.debug("Updating QrtzCalendars with information: {}", qrtzCalendars);

        this.wmGenericDao.update(qrtzCalendars);
        this.wmGenericDao.refresh(qrtzCalendars);

        return qrtzCalendars;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzCalendars delete(QrtzCalendarsId qrtzcalendarsId) {
        LOGGER.debug("Deleting QrtzCalendars with id: {}", qrtzcalendarsId);
        QrtzCalendars deleted = this.wmGenericDao.findById(qrtzcalendarsId);
        if (deleted == null) {
            LOGGER.debug("No QrtzCalendars found with id: {}", qrtzcalendarsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), QrtzCalendars.class.getSimpleName(), qrtzcalendarsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(QrtzCalendars qrtzCalendars) {
        LOGGER.debug("Deleting QrtzCalendars with {}", qrtzCalendars);
        this.wmGenericDao.delete(qrtzCalendars);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzCalendars> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all QrtzCalendars");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzCalendars> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all QrtzCalendars");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzCalendars to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzCalendars to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table QrtzCalendars");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "QRTZ_CALENDARS");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}