/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.fico.dmp.telusagentuidb.Activity;
import com.fico.dmp.telusagentuidb.Application;
import com.fico.dmp.telusagentuidb.AuditDataChange;
import com.fico.dmp.telusagentuidb.Document;
import com.fico.dmp.telusagentuidb.ErrorEntity;
import com.fico.dmp.telusagentuidb.Note;
import com.fico.dmp.telusagentuidb.Party;

/**
 * Service object for domain model class {@link Application}.
 */
public interface ApplicationService {

    /**
     * Creates a new Application. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Application if any.
     *
     * @param application Details of the Application to be created; value cannot be null.
     * @return The newly created Application.
     */
    Application create(@Valid Application application);


	/**
     * Returns Application by given id if exists.
     *
     * @param applicationId The id of the Application to get; value cannot be null.
     * @return Application associated with the given applicationId.
	 * @throws EntityNotFoundException If no Application is found.
     */
    Application getById(Integer applicationId);

    /**
     * Find and return the Application by given id if exists, returns null otherwise.
     *
     * @param applicationId The id of the Application to get; value cannot be null.
     * @return Application associated with the given applicationId.
     */
    Application findById(Integer applicationId);

	/**
     * Find and return the list of Applications by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param applicationIds The id's of the Application to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Applications associated with the given applicationIds.
     */
    List<Application> findByMultipleIds(List<Integer> applicationIds, boolean orderedReturn);

    /**
     * Find and return the Application for given applicationNumber  if exists.
     *
     * @param applicationNumber value of applicationNumber; value cannot be null.
     * @return Application associated with the given inputs.
     * @throws EntityNotFoundException if no matching Application found.
     */
    Application getByApplicationNumber(String applicationNumber);

    /**
     * Updates the details of an existing Application. It replaces all fields of the existing Application with the given application.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Application if any.
     *
     * @param application The details of the Application to be updated; value cannot be null.
     * @return The updated Application.
     * @throws EntityNotFoundException if no Application is found with given input.
     */
    Application update(@Valid Application application);

    /**
     * Deletes an existing Application with the given id.
     *
     * @param applicationId The id of the Application to be deleted; value cannot be null.
     * @return The deleted Application.
     * @throws EntityNotFoundException if no Application found with the given id.
     */
    Application delete(Integer applicationId);

    /**
     * Deletes an existing Application with the given object.
     *
     * @param application The instance of the Application to be deleted; value cannot be null.
     */
    void delete(Application application);

    /**
     * Find all Applications matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Applications.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Application> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Applications matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Applications.
     *
     * @see Pageable
     * @see Page
     */
    Page<Application> findAll(String query, Pageable pageable);

    /**
     * Exports all Applications matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Applications matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Imports all Applications from the csv into the table.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     */
    void importData(MultipartFile file);

    /**
     * Retrieve the count of the Applications in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Application.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated auditDataChanges for given Application id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AuditDataChange instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AuditDataChange> findAssociatedAuditDataChanges(Integer id, Pageable pageable);

    /*
     * Returns the associated notes for given Application id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Note instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Note> findAssociatedNotes(Integer id, Pageable pageable);

    /*
     * Returns the associated activities for given Application id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Activity instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Activity> findAssociatedActivities(Integer id, Pageable pageable);

    /*
     * Returns the associated documents for given Application id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Document instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Document> findAssociatedDocuments(Integer id, Pageable pageable);

    /*
     * Returns the associated errorEntities for given Application id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated ErrorEntity instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<ErrorEntity> findAssociatedErrorEntities(Integer id, Pageable pageable);

    /*
     * Returns the associated parties for given Application id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Party instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Party> findAssociatedParties(Integer id, Pageable pageable);

}