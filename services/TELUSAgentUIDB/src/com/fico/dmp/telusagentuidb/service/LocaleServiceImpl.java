/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.Locale;


/**
 * ServiceImpl object for domain model class Locale.
 *
 * @see Locale
 */
@Service("TELUSAgentUIDB.LocaleService")
@Validated
public class LocaleServiceImpl implements LocaleService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(LocaleServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.LocaleDao")
    private WMGenericDao<Locale, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Locale, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Locale create(Locale locale) {
        LOGGER.debug("Creating a new Locale with information: {}", locale);

        Locale localeCreated = this.wmGenericDao.create(locale);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(localeCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Locale getById(Integer localeId) {
        LOGGER.debug("Finding Locale by id: {}", localeId);
        return this.wmGenericDao.findById(localeId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Locale findById(Integer localeId) {
        LOGGER.debug("Finding Locale by id: {}", localeId);
        try {
            return this.wmGenericDao.findById(localeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Locale found with id: {}", localeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<Locale> findByMultipleIds(List<Integer> localeIds, boolean orderedReturn) {
        LOGGER.debug("Finding Locales by ids: {}", localeIds);

        return this.wmGenericDao.findByMultipleIds(localeIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Locale update(Locale locale) {
        LOGGER.debug("Updating Locale with information: {}", locale);

        this.wmGenericDao.update(locale);
        this.wmGenericDao.refresh(locale);

        return locale;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Locale delete(Integer localeId) {
        LOGGER.debug("Deleting Locale with id: {}", localeId);
        Locale deleted = this.wmGenericDao.findById(localeId);
        if (deleted == null) {
            LOGGER.debug("No Locale found with id: {}", localeId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Locale.class.getSimpleName(), localeId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(Locale locale) {
        LOGGER.debug("Deleting Locale with {}", locale);
        this.wmGenericDao.delete(locale);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Locale> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Locales");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Locale> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Locales");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Locale to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table Locale to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table Locale");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "LOCALE");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}