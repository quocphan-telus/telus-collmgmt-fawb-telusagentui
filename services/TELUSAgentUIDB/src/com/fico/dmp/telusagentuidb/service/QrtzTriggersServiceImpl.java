/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.QrtzTriggers;
import com.fico.dmp.telusagentuidb.QrtzTriggersId;


/**
 * ServiceImpl object for domain model class QrtzTriggers.
 *
 * @see QrtzTriggers
 */
@Service("TELUSAgentUIDB.QrtzTriggersService")
@Validated
public class QrtzTriggersServiceImpl implements QrtzTriggersService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzTriggersServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.QrtzTriggersDao")
    private WMGenericDao<QrtzTriggers, QrtzTriggersId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<QrtzTriggers, QrtzTriggersId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzTriggers create(QrtzTriggers qrtzTriggers) {
        LOGGER.debug("Creating a new QrtzTriggers with information: {}", qrtzTriggers);

        QrtzTriggers qrtzTriggersCreated = this.wmGenericDao.create(qrtzTriggers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(qrtzTriggersCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzTriggers getById(QrtzTriggersId qrtztriggersId) {
        LOGGER.debug("Finding QrtzTriggers by id: {}", qrtztriggersId);
        return this.wmGenericDao.findById(qrtztriggersId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzTriggers findById(QrtzTriggersId qrtztriggersId) {
        LOGGER.debug("Finding QrtzTriggers by id: {}", qrtztriggersId);
        try {
            return this.wmGenericDao.findById(qrtztriggersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No QrtzTriggers found with id: {}", qrtztriggersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<QrtzTriggers> findByMultipleIds(List<QrtzTriggersId> qrtztriggersIds, boolean orderedReturn) {
        LOGGER.debug("Finding QrtzTriggers by ids: {}", qrtztriggersIds);

        return this.wmGenericDao.findByMultipleIds(qrtztriggersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzTriggers update(QrtzTriggers qrtzTriggers) {
        LOGGER.debug("Updating QrtzTriggers with information: {}", qrtzTriggers);

        this.wmGenericDao.update(qrtzTriggers);
        this.wmGenericDao.refresh(qrtzTriggers);

        return qrtzTriggers;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzTriggers delete(QrtzTriggersId qrtztriggersId) {
        LOGGER.debug("Deleting QrtzTriggers with id: {}", qrtztriggersId);
        QrtzTriggers deleted = this.wmGenericDao.findById(qrtztriggersId);
        if (deleted == null) {
            LOGGER.debug("No QrtzTriggers found with id: {}", qrtztriggersId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), QrtzTriggers.class.getSimpleName(), qrtztriggersId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(QrtzTriggers qrtzTriggers) {
        LOGGER.debug("Deleting QrtzTriggers with {}", qrtzTriggers);
        this.wmGenericDao.delete(qrtzTriggers);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzTriggers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all QrtzTriggers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzTriggers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all QrtzTriggers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzTriggers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzTriggers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table QrtzTriggers");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "QRTZ_TRIGGERS");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}