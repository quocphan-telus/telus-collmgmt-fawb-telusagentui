/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.fico.dmp.telusagentuidb.DomainValue;
import com.fico.dmp.telusagentuidb.DomainValueType;
import com.fico.dmp.telusagentuidb.DomainValueTypeRelationship;

/**
 * Service object for domain model class {@link DomainValueType}.
 */
public interface DomainValueTypeService {

    /**
     * Creates a new DomainValueType. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DomainValueType if any.
     *
     * @param domainValueType Details of the DomainValueType to be created; value cannot be null.
     * @return The newly created DomainValueType.
     */
    DomainValueType create(@Valid DomainValueType domainValueType);


	/**
     * Returns DomainValueType by given id if exists.
     *
     * @param domainvaluetypeId The id of the DomainValueType to get; value cannot be null.
     * @return DomainValueType associated with the given domainvaluetypeId.
	 * @throws EntityNotFoundException If no DomainValueType is found.
     */
    DomainValueType getById(Integer domainvaluetypeId);

    /**
     * Find and return the DomainValueType by given id if exists, returns null otherwise.
     *
     * @param domainvaluetypeId The id of the DomainValueType to get; value cannot be null.
     * @return DomainValueType associated with the given domainvaluetypeId.
     */
    DomainValueType findById(Integer domainvaluetypeId);

	/**
     * Find and return the list of DomainValueTypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param domainvaluetypeIds The id's of the DomainValueType to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return DomainValueTypes associated with the given domainvaluetypeIds.
     */
    List<DomainValueType> findByMultipleIds(List<Integer> domainvaluetypeIds, boolean orderedReturn);


    /**
     * Updates the details of an existing DomainValueType. It replaces all fields of the existing DomainValueType with the given domainValueType.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DomainValueType if any.
     *
     * @param domainValueType The details of the DomainValueType to be updated; value cannot be null.
     * @return The updated DomainValueType.
     * @throws EntityNotFoundException if no DomainValueType is found with given input.
     */
    DomainValueType update(@Valid DomainValueType domainValueType);

    /**
     * Deletes an existing DomainValueType with the given id.
     *
     * @param domainvaluetypeId The id of the DomainValueType to be deleted; value cannot be null.
     * @return The deleted DomainValueType.
     * @throws EntityNotFoundException if no DomainValueType found with the given id.
     */
    DomainValueType delete(Integer domainvaluetypeId);

    /**
     * Deletes an existing DomainValueType with the given object.
     *
     * @param domainValueType The instance of the DomainValueType to be deleted; value cannot be null.
     */
    void delete(DomainValueType domainValueType);

    /**
     * Find all DomainValueTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DomainValueTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<DomainValueType> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all DomainValueTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DomainValueTypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<DomainValueType> findAll(String query, Pageable pageable);

    /**
     * Exports all DomainValueTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all DomainValueTypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Imports all DomainValueTypes from the csv into the table.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     */
    void importData(MultipartFile file);

    /**
     * Retrieve the count of the DomainValueTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the DomainValueType.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated domainValues for given DomainValueType id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated DomainValue instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<DomainValue> findAssociatedDomainValues(Integer id, Pageable pageable);

    /*
     * Returns the associated domainValueTypeRelationshipsForDomainValueTypeId for given DomainValueType id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated DomainValueTypeRelationship instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<DomainValueTypeRelationship> findAssociatedDomainValueTypeRelationshipsForDomainValueTypeId(Integer id, Pageable pageable);

    /*
     * Returns the associated domainValueTypeRelationshipsForParentDomainValueTypeId2 for given DomainValueType id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated DomainValueTypeRelationship instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<DomainValueTypeRelationship> findAssociatedDomainValueTypeRelationshipsForParentDomainValueTypeId2(Integer id, Pageable pageable);

    /*
     * Returns the associated domainValueTypeRelationshipsForParentDomainValueTypeId1 for given DomainValueType id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated DomainValueTypeRelationship instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<DomainValueTypeRelationship> findAssociatedDomainValueTypeRelationshipsForParentDomainValueTypeId1(Integer id, Pageable pageable);

}