/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.fico.dmp.telusagentuidb.Activity;
import com.fico.dmp.telusagentuidb.Document;
import com.fico.dmp.telusagentuidb.DomainValue;
import com.fico.dmp.telusagentuidb.DomainValueDescription;
import com.fico.dmp.telusagentuidb.DomainValueRelation;
import com.fico.dmp.telusagentuidb.Note;
import com.fico.dmp.telusagentuidb.Party;
import com.fico.dmp.telusagentuidb.Queue;

/**
 * Service object for domain model class {@link DomainValue}.
 */
public interface DomainValueService {

    /**
     * Creates a new DomainValue. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DomainValue if any.
     *
     * @param domainValue Details of the DomainValue to be created; value cannot be null.
     * @return The newly created DomainValue.
     */
    DomainValue create(@Valid DomainValue domainValue);


	/**
     * Returns DomainValue by given id if exists.
     *
     * @param domainvalueId The id of the DomainValue to get; value cannot be null.
     * @return DomainValue associated with the given domainvalueId.
	 * @throws EntityNotFoundException If no DomainValue is found.
     */
    DomainValue getById(Integer domainvalueId);

    /**
     * Find and return the DomainValue by given id if exists, returns null otherwise.
     *
     * @param domainvalueId The id of the DomainValue to get; value cannot be null.
     * @return DomainValue associated with the given domainvalueId.
     */
    DomainValue findById(Integer domainvalueId);

	/**
     * Find and return the list of DomainValues by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param domainvalueIds The id's of the DomainValue to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return DomainValues associated with the given domainvalueIds.
     */
    List<DomainValue> findByMultipleIds(List<Integer> domainvalueIds, boolean orderedReturn);


    /**
     * Updates the details of an existing DomainValue. It replaces all fields of the existing DomainValue with the given domainValue.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DomainValue if any.
     *
     * @param domainValue The details of the DomainValue to be updated; value cannot be null.
     * @return The updated DomainValue.
     * @throws EntityNotFoundException if no DomainValue is found with given input.
     */
    DomainValue update(@Valid DomainValue domainValue);

    /**
     * Deletes an existing DomainValue with the given id.
     *
     * @param domainvalueId The id of the DomainValue to be deleted; value cannot be null.
     * @return The deleted DomainValue.
     * @throws EntityNotFoundException if no DomainValue found with the given id.
     */
    DomainValue delete(Integer domainvalueId);

    /**
     * Deletes an existing DomainValue with the given object.
     *
     * @param domainValue The instance of the DomainValue to be deleted; value cannot be null.
     */
    void delete(DomainValue domainValue);

    /**
     * Find all DomainValues matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DomainValues.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<DomainValue> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all DomainValues matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DomainValues.
     *
     * @see Pageable
     * @see Page
     */
    Page<DomainValue> findAll(String query, Pageable pageable);

    /**
     * Exports all DomainValues matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all DomainValues matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Imports all DomainValues from the csv into the table.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     */
    void importData(MultipartFile file);

    /**
     * Retrieve the count of the DomainValues in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the DomainValue.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated parties for given DomainValue id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Party instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Party> findAssociatedParties(Integer id, Pageable pageable);

    /*
     * Returns the associated notes for given DomainValue id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Note instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Note> findAssociatedNotes(Integer id, Pageable pageable);

    /*
     * Returns the associated queuesForQueueResultPage for given DomainValue id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Queue instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Queue> findAssociatedQueuesForQueueResultPage(Integer id, Pageable pageable);

    /*
     * Returns the associated queuesForPersonalQueueField for given DomainValue id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Queue instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Queue> findAssociatedQueuesForPersonalQueueField(Integer id, Pageable pageable);

    /*
     * Returns the associated documentsForType for given DomainValue id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Document instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Document> findAssociatedDocumentsForType(Integer id, Pageable pageable);

    /*
     * Returns the associated documentsForDocumentLabel for given DomainValue id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Document instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Document> findAssociatedDocumentsForDocumentLabel(Integer id, Pageable pageable);

    /*
     * Returns the associated domainValueDescriptions for given DomainValue id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated DomainValueDescription instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<DomainValueDescription> findAssociatedDomainValueDescriptions(Integer id, Pageable pageable);

    /*
     * Returns the associated domainValueRelationsForParentDomainValueId1 for given DomainValue id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated DomainValueRelation instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<DomainValueRelation> findAssociatedDomainValueRelationsForParentDomainValueId1(Integer id, Pageable pageable);

    /*
     * Returns the associated domainValueRelationsForDomainValueId for given DomainValue id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated DomainValueRelation instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<DomainValueRelation> findAssociatedDomainValueRelationsForDomainValueId(Integer id, Pageable pageable);

    /*
     * Returns the associated domainValueRelationsForParentDomainValueId2 for given DomainValue id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated DomainValueRelation instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<DomainValueRelation> findAssociatedDomainValueRelationsForParentDomainValueId2(Integer id, Pageable pageable);

    /*
     * Returns the associated activitiesForApplicationStatus for given DomainValue id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Activity instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Activity> findAssociatedActivitiesForApplicationStatus(Integer id, Pageable pageable);

    /*
     * Returns the associated activitiesForSource for given DomainValue id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Activity instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Activity> findAssociatedActivitiesForSource(Integer id, Pageable pageable);

    /*
     * Returns the associated activitiesForType for given DomainValue id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Activity instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Activity> findAssociatedActivitiesForType(Integer id, Pageable pageable);

}