/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.GroupRole;


/**
 * ServiceImpl object for domain model class GroupRole.
 *
 * @see GroupRole
 */
@Service("TELUSAgentUIDB.GroupRoleService")
@Validated
public class GroupRoleServiceImpl implements GroupRoleService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(GroupRoleServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.GroupRoleDao")
    private WMGenericDao<GroupRole, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<GroupRole, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public GroupRole create(GroupRole groupRole) {
        LOGGER.debug("Creating a new GroupRole with information: {}", groupRole);

        GroupRole groupRoleCreated = this.wmGenericDao.create(groupRole);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(groupRoleCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public GroupRole getById(Integer grouproleId) {
        LOGGER.debug("Finding GroupRole by id: {}", grouproleId);
        return this.wmGenericDao.findById(grouproleId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public GroupRole findById(Integer grouproleId) {
        LOGGER.debug("Finding GroupRole by id: {}", grouproleId);
        try {
            return this.wmGenericDao.findById(grouproleId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No GroupRole found with id: {}", grouproleId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<GroupRole> findByMultipleIds(List<Integer> grouproleIds, boolean orderedReturn) {
        LOGGER.debug("Finding GroupRoles by ids: {}", grouproleIds);

        return this.wmGenericDao.findByMultipleIds(grouproleIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public GroupRole getByGroupIdAndRoleId(Integer groupId, Integer roleId) {
        Map<String, Object> groupIdAndRoleIdMap = new HashMap<>();
        groupIdAndRoleIdMap.put("groupId", groupId);
        groupIdAndRoleIdMap.put("roleId", roleId);

        LOGGER.debug("Finding GroupRole by unique keys: {}", groupIdAndRoleIdMap);
        return this.wmGenericDao.findByUniqueKey(groupIdAndRoleIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public GroupRole update(GroupRole groupRole) {
        LOGGER.debug("Updating GroupRole with information: {}", groupRole);

        this.wmGenericDao.update(groupRole);
        this.wmGenericDao.refresh(groupRole);

        return groupRole;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public GroupRole delete(Integer grouproleId) {
        LOGGER.debug("Deleting GroupRole with id: {}", grouproleId);
        GroupRole deleted = this.wmGenericDao.findById(grouproleId);
        if (deleted == null) {
            LOGGER.debug("No GroupRole found with id: {}", grouproleId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), GroupRole.class.getSimpleName(), grouproleId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(GroupRole groupRole) {
        LOGGER.debug("Deleting GroupRole with {}", groupRole);
        this.wmGenericDao.delete(groupRole);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<GroupRole> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all GroupRoles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<GroupRole> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all GroupRoles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table GroupRole to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table GroupRole to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table GroupRole");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "GROUP_ROLE");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}