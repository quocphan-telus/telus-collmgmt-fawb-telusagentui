/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.QrtzSchedulerState;
import com.fico.dmp.telusagentuidb.QrtzSchedulerStateId;


/**
 * ServiceImpl object for domain model class QrtzSchedulerState.
 *
 * @see QrtzSchedulerState
 */
@Service("TELUSAgentUIDB.QrtzSchedulerStateService")
@Validated
public class QrtzSchedulerStateServiceImpl implements QrtzSchedulerStateService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzSchedulerStateServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.QrtzSchedulerStateDao")
    private WMGenericDao<QrtzSchedulerState, QrtzSchedulerStateId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<QrtzSchedulerState, QrtzSchedulerStateId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSchedulerState create(QrtzSchedulerState qrtzSchedulerState) {
        LOGGER.debug("Creating a new QrtzSchedulerState with information: {}", qrtzSchedulerState);

        QrtzSchedulerState qrtzSchedulerStateCreated = this.wmGenericDao.create(qrtzSchedulerState);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(qrtzSchedulerStateCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSchedulerState getById(QrtzSchedulerStateId qrtzschedulerstateId) {
        LOGGER.debug("Finding QrtzSchedulerState by id: {}", qrtzschedulerstateId);
        return this.wmGenericDao.findById(qrtzschedulerstateId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSchedulerState findById(QrtzSchedulerStateId qrtzschedulerstateId) {
        LOGGER.debug("Finding QrtzSchedulerState by id: {}", qrtzschedulerstateId);
        try {
            return this.wmGenericDao.findById(qrtzschedulerstateId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No QrtzSchedulerState found with id: {}", qrtzschedulerstateId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<QrtzSchedulerState> findByMultipleIds(List<QrtzSchedulerStateId> qrtzschedulerstateIds, boolean orderedReturn) {
        LOGGER.debug("Finding QrtzSchedulerStates by ids: {}", qrtzschedulerstateIds);

        return this.wmGenericDao.findByMultipleIds(qrtzschedulerstateIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSchedulerState update(QrtzSchedulerState qrtzSchedulerState) {
        LOGGER.debug("Updating QrtzSchedulerState with information: {}", qrtzSchedulerState);

        this.wmGenericDao.update(qrtzSchedulerState);
        this.wmGenericDao.refresh(qrtzSchedulerState);

        return qrtzSchedulerState;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public QrtzSchedulerState delete(QrtzSchedulerStateId qrtzschedulerstateId) {
        LOGGER.debug("Deleting QrtzSchedulerState with id: {}", qrtzschedulerstateId);
        QrtzSchedulerState deleted = this.wmGenericDao.findById(qrtzschedulerstateId);
        if (deleted == null) {
            LOGGER.debug("No QrtzSchedulerState found with id: {}", qrtzschedulerstateId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), QrtzSchedulerState.class.getSimpleName(), qrtzschedulerstateId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(QrtzSchedulerState qrtzSchedulerState) {
        LOGGER.debug("Deleting QrtzSchedulerState with {}", qrtzSchedulerState);
        this.wmGenericDao.delete(qrtzSchedulerState);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzSchedulerState> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all QrtzSchedulerStates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<QrtzSchedulerState> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all QrtzSchedulerStates");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzSchedulerState to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table QrtzSchedulerState to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table QrtzSchedulerState");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "QRTZ_SCHEDULER_STATE");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}