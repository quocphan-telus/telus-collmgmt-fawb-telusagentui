/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.models.query.*;

@Service
public class TELUSAgentUIDBQueryExecutorServiceImpl implements TELUSAgentUIDBQueryExecutorService {

    private static final Logger LOGGER = FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(TELUSAgentUIDBQueryExecutorServiceImpl.class.getName());

    @Autowired
    @Qualifier("TELUSAgentUIDBWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetTeamManagerByRoleIdResponse> executeGetTeamManagerByRoleId(Integer roleId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("roleId", roleId);

        return queryExecutor.executeNamedQuery("getTeamManagerByRoleId", params, GetTeamManagerByRoleIdResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetTeamManagerByRoleId(Integer roleId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("roleId", roleId);

        QueryProcedureInput<GetTeamManagerByRoleIdResponse> queryInput = new QueryProcedureInput<>("getTeamManagerByRoleId", params, GetTeamManagerByRoleIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetRolesByGroupIdResponse> executeGetRolesByGroupId(String groupId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("GroupId", groupId);

        return queryExecutor.executeNamedQuery("getRolesByGroupId", params, GetRolesByGroupIdResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetRolesByGroupId(String groupId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("GroupId", groupId);

        QueryProcedureInput<GetRolesByGroupIdResponse> queryInput = new QueryProcedureInput<>("getRolesByGroupId", params, GetRolesByGroupIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Integer executeDeleteGroupUser(String groupId) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("GroupId", groupId);

        return queryExecutor.executeNamedQueryForUpdate("deleteGroupUser", params);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Integer executeQuery_updateUserDetails(QueryUpdateUserDetailsRequest queryUpdateUserDetailsRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("lendingLimit", queryUpdateUserDetailsRequest.getLendingLimit());
        params.put("preferredTZ", queryUpdateUserDetailsRequest.getPreferredTz());
        params.put("userId", queryUpdateUserDetailsRequest.getUserId());

        return queryExecutor.executeNamedQueryForUpdate("Query_updateUserDetails", params);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<QueryGetAllDomainValueWithOneParentResponse> executeQuery_GetAllDomainValueWithOneParent(String suppliedLocale, String domainValueTypeCode, Integer parent1domainValueId, String dvDescription, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("suppliedLocale", suppliedLocale);
        params.put("domainValueTypeCode", domainValueTypeCode);
        params.put("parent1DomainValueId", parent1domainValueId);
        params.put("dvDescription", dvDescription);

        return queryExecutor.executeNamedQuery("Query_GetAllDomainValueWithOneParent", params, QueryGetAllDomainValueWithOneParentResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQuery_GetAllDomainValueWithOneParent(String suppliedLocale, String domainValueTypeCode, Integer parent1domainValueId, String dvDescription, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("suppliedLocale", suppliedLocale);
        params.put("domainValueTypeCode", domainValueTypeCode);
        params.put("parent1DomainValueId", parent1domainValueId);
        params.put("dvDescription", dvDescription);

        QueryProcedureInput<QueryGetAllDomainValueWithOneParentResponse> queryInput = new QueryProcedureInput<>("Query_GetAllDomainValueWithOneParent", params, QueryGetAllDomainValueWithOneParentResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<QueryGetDomainValueByCodeAndTypeCodeResponse> executeQuery_GetDomainValueByCodeAndTypeCode(String selectedLocale, String domainValueCode, String domainValueTypeCode, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("selectedLocale", selectedLocale);
        params.put("domainValueCode", domainValueCode);
        params.put("domainValueTypeCode", domainValueTypeCode);

        return queryExecutor.executeNamedQuery("Query_GetDomainValueByCodeAndTypeCode", params, QueryGetDomainValueByCodeAndTypeCodeResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQuery_GetDomainValueByCodeAndTypeCode(String selectedLocale, String domainValueCode, String domainValueTypeCode, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("selectedLocale", selectedLocale);
        params.put("domainValueCode", domainValueCode);
        params.put("domainValueTypeCode", domainValueTypeCode);

        QueryProcedureInput<QueryGetDomainValueByCodeAndTypeCodeResponse> queryInput = new QueryProcedureInput<>("Query_GetDomainValueByCodeAndTypeCode", params, QueryGetDomainValueByCodeAndTypeCodeResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetTeamManagersByTeamIdResponse> executeGetTeamManagersByTeamId(String teamId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("teamId", teamId);

        return queryExecutor.executeNamedQuery("getTeamManagersByTeamId", params, GetTeamManagersByTeamIdResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetTeamManagersByTeamId(String teamId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("teamId", teamId);

        QueryProcedureInput<GetTeamManagersByTeamIdResponse> queryInput = new QueryProcedureInput<>("getTeamManagersByTeamId", params, GetTeamManagersByTeamIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Integer executeQuery_DeleteAllErrorsByApplicationId(String applicationId) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("applicationId", applicationId);

        return queryExecutor.executeNamedQueryForUpdate("Query_DeleteAllErrorsByApplicationId", params);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<CountRolePermissionResponse> executeCountRolePermission(String roleId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("RoleId", roleId);

        return queryExecutor.executeNamedQuery("countRolePermission", params, CountRolePermissionResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportCountRolePermission(String roleId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("RoleId", roleId);

        QueryProcedureInput<CountRolePermissionResponse> queryInput = new QueryProcedureInput<>("countRolePermission", params, CountRolePermissionResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetActiveRolesByUserNameResponse> executeGetActiveRolesByUserName(String userName, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("UserName", userName);

        return queryExecutor.executeNamedQuery("getActiveRolesByUserName", params, GetActiveRolesByUserNameResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetActiveRolesByUserName(String userName, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("UserName", userName);

        QueryProcedureInput<GetActiveRolesByUserNameResponse> queryInput = new QueryProcedureInput<>("getActiveRolesByUserName", params, GetActiveRolesByUserNameResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<SearchUsersResponse> executeSearchUsers(String userCriteria, String teamId, String role, String workCategory, String managerId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("userCriteria", userCriteria);
        params.put("TeamID", teamId);
        params.put("role", role);
        params.put("work_category", workCategory);
        params.put("managerId", managerId);

        return queryExecutor.executeNamedQuery("searchUsers", params, SearchUsersResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSearchUsers(String userCriteria, String teamId, String role, String workCategory, String managerId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("userCriteria", userCriteria);
        params.put("TeamID", teamId);
        params.put("role", role);
        params.put("work_category", workCategory);
        params.put("managerId", managerId);

        QueryProcedureInput<SearchUsersResponse> queryInput = new QueryProcedureInput<>("searchUsers", params, SearchUsersResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Integer executeDeleteGroupRole(String groupId) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("GroupId", groupId);

        return queryExecutor.executeNamedQueryForUpdate("deleteGroupRole", params);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetPermissionByUserIdResponse> executeGetPermissionByUserId(String userId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("UserId", userId);

        return queryExecutor.executeNamedQuery("getPermissionByUserId", params, GetPermissionByUserIdResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetPermissionByUserId(String userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("UserId", userId);

        QueryProcedureInput<GetPermissionByUserIdResponse> queryInput = new QueryProcedureInput<>("getPermissionByUserId", params, GetPermissionByUserIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetTeamManagerNameResponse> executeGetTeamManagerName(String roles, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("roles", roles);

        return queryExecutor.executeNamedQuery("getTeamManagerName", params, GetTeamManagerNameResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetTeamManagerName(String roles, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("roles", roles);

        QueryProcedureInput<GetTeamManagerNameResponse> queryInput = new QueryProcedureInput<>("getTeamManagerName", params, GetTeamManagerNameResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetWorkCtegoryByCodeResponse> executeGetWorkCtegoryByCode(String workCategory, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("workCategory", workCategory);

        return queryExecutor.executeNamedQuery("getWorkCtegoryByCode", params, GetWorkCtegoryByCodeResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetWorkCtegoryByCode(String workCategory, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("workCategory", workCategory);

        QueryProcedureInput<GetWorkCtegoryByCodeResponse> queryInput = new QueryProcedureInput<>("getWorkCtegoryByCode", params, GetWorkCtegoryByCodeResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<QueryGetQueuesByUserIdResponse> executeQuery_GetQueuesByUserId(Integer userId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("Query_GetQueuesByUserId", params, QueryGetQueuesByUserIdResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQuery_GetQueuesByUserId(Integer userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userId", userId);

        QueryProcedureInput<QueryGetQueuesByUserIdResponse> queryInput = new QueryProcedureInput<>("Query_GetQueuesByUserId", params, QueryGetQueuesByUserIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetPermissionByRoleIdResponse> executeGetPermissionByRoleId(String roleId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("RoleId", roleId);

        return queryExecutor.executeNamedQuery("getPermissionByRoleId", params, GetPermissionByRoleIdResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetPermissionByRoleId(String roleId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("RoleId", roleId);

        QueryProcedureInput<GetPermissionByRoleIdResponse> queryInput = new QueryProcedureInput<>("getPermissionByRoleId", params, GetPermissionByRoleIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<QueryGetDomainValueByIdWithActiveFlagResponse> executeQuery_GetDomainValueByIdWithActiveFlag(String selectedLocale, Integer domainValueId, Boolean showAll, Boolean isActiveFlag, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("selectedLocale", selectedLocale);
        params.put("domainValueId", domainValueId);
        params.put("showAll", showAll);
        params.put("isActiveFlag", isActiveFlag);

        return queryExecutor.executeNamedQuery("Query_GetDomainValueByIdWithActiveFlag", params, QueryGetDomainValueByIdWithActiveFlagResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQuery_GetDomainValueByIdWithActiveFlag(String selectedLocale, Integer domainValueId, Boolean showAll, Boolean isActiveFlag, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("selectedLocale", selectedLocale);
        params.put("domainValueId", domainValueId);
        params.put("showAll", showAll);
        params.put("isActiveFlag", isActiveFlag);

        QueryProcedureInput<QueryGetDomainValueByIdWithActiveFlagResponse> queryInput = new QueryProcedureInput<>("Query_GetDomainValueByIdWithActiveFlag", params, QueryGetDomainValueByIdWithActiveFlagResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Integer executeDeleteRolePermission(String roleId) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("RoleId", roleId);

        return queryExecutor.executeNamedQueryForUpdate("deleteRolePermission", params);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetAllRolePermissionResponse> executeGetAllRolePermission(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getAllRolePermission", params, GetAllRolePermissionResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetAllRolePermission(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetAllRolePermissionResponse> queryInput = new QueryProcedureInput<>("getAllRolePermission", params, GetAllRolePermissionResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Integer executeQueueUnLock(QueueUnLockRequest queueUnLockRequest) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("updatedBy", queueUnLockRequest.getUpdatedBy());
        params.put("updatedOn", queueUnLockRequest.getUpdatedOn());
        params.put("id", queueUnLockRequest.getId());

        return queryExecutor.executeNamedQueryForUpdate("QueueUnLock", params);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Integer executeDeleteGroupRoleByRoleId(String roleId) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("RoleId", roleId);

        return queryExecutor.executeNamedQueryForUpdate("deleteGroupRoleByRoleId", params);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<QueryGetDomainValueByIdResponse> executeQuery_GetDomainValueById(String selectedLocale, Integer domainValueId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("selectedLocale", selectedLocale);
        params.put("domainValueId", domainValueId);

        return queryExecutor.executeNamedQuery("Query_GetDomainValueById", params, QueryGetDomainValueByIdResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQuery_GetDomainValueById(String selectedLocale, Integer domainValueId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("selectedLocale", selectedLocale);
        params.put("domainValueId", domainValueId);

        QueryProcedureInput<QueryGetDomainValueByIdResponse> queryInput = new QueryProcedureInput<>("Query_GetDomainValueById", params, QueryGetDomainValueByIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetRolesPermissionResponse> executeGetRolesPermission(String roleId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("RoleId", roleId);

        return queryExecutor.executeNamedQuery("getRolesPermission", params, GetRolesPermissionResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetRolesPermission(String roleId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("RoleId", roleId);

        QueryProcedureInput<GetRolesPermissionResponse> queryInput = new QueryProcedureInput<>("getRolesPermission", params, GetRolesPermissionResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetManagerBasedOnTeamIdResponse> executeGetManagerBasedOnTeamId(String teamId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("teamId", teamId);

        return queryExecutor.executeNamedQuery("getManagerBasedOnTeamId", params, GetManagerBasedOnTeamIdResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetManagerBasedOnTeamId(String teamId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("teamId", teamId);

        QueryProcedureInput<GetManagerBasedOnTeamIdResponse> queryInput = new QueryProcedureInput<>("getManagerBasedOnTeamId", params, GetManagerBasedOnTeamIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<QueryGetAllDomainValuesTwoParentResponse> executeQuery_GetAllDomainValuesTwoParent(String suppliedLocale, String domainValueTypeCode, Integer parent1domainValueId, Integer parent2domainValueId, String dvDescription, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("suppliedLocale", suppliedLocale);
        params.put("domainValueTypeCode", domainValueTypeCode);
        params.put("parent1DomainValueId", parent1domainValueId);
        params.put("parent2DomainValueId", parent2domainValueId);
        params.put("dvDescription", dvDescription);

        return queryExecutor.executeNamedQuery("Query_GetAllDomainValuesTwoParent", params, QueryGetAllDomainValuesTwoParentResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQuery_GetAllDomainValuesTwoParent(String suppliedLocale, String domainValueTypeCode, Integer parent1domainValueId, Integer parent2domainValueId, String dvDescription, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("suppliedLocale", suppliedLocale);
        params.put("domainValueTypeCode", domainValueTypeCode);
        params.put("parent1DomainValueId", parent1domainValueId);
        params.put("parent2DomainValueId", parent2domainValueId);
        params.put("dvDescription", dvDescription);

        QueryProcedureInput<QueryGetAllDomainValuesTwoParentResponse> queryInput = new QueryProcedureInput<>("Query_GetAllDomainValuesTwoParent", params, QueryGetAllDomainValuesTwoParentResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<QueryActivityLogResponse> executeQuery_ActivityLog(String userLocale, String applicationNumber, Integer activityType, String activityName, Boolean isAppHistory, Timestamp createdDateStart, Timestamp createdDateEnd, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(7);

        params.put("userLocale", userLocale);
        params.put("applicationNumber", applicationNumber);
        params.put("activityType", activityType);
        params.put("activityName", activityName);
        params.put("isAppHistory", isAppHistory);
        params.put("createdDateStart", createdDateStart);
        params.put("createdDateEnd", createdDateEnd);

        return queryExecutor.executeNamedQuery("Query_ActivityLog", params, QueryActivityLogResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQuery_ActivityLog(String userLocale, String applicationNumber, Integer activityType, String activityName, Boolean isAppHistory, Timestamp createdDateStart, Timestamp createdDateEnd, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(7);

        params.put("userLocale", userLocale);
        params.put("applicationNumber", applicationNumber);
        params.put("activityType", activityType);
        params.put("activityName", activityName);
        params.put("isAppHistory", isAppHistory);
        params.put("createdDateStart", createdDateStart);
        params.put("createdDateEnd", createdDateEnd);

        QueryProcedureInput<QueryActivityLogResponse> queryInput = new QueryProcedureInput<>("Query_ActivityLog", params, QueryActivityLogResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Integer executeDeleteQueueGroup(String queueId, String groupId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("QueueId", queueId);
        params.put("GroupId", groupId);

        return queryExecutor.executeNamedQueryForUpdate("deleteQueueGroup", params);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetGroupByUserIdResponse> executeGetGroupByUserId(String userId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("UserId", userId);

        return queryExecutor.executeNamedQuery("getGroupByUserId", params, GetGroupByUserIdResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetGroupByUserId(String userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("UserId", userId);

        QueryProcedureInput<GetGroupByUserIdResponse> queryInput = new QueryProcedureInput<>("getGroupByUserId", params, GetGroupByUserIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetRoleByUserIdResponse> executeGetRoleByUserId(String userId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("UserId", userId);

        return queryExecutor.executeNamedQuery("getRoleByUserId", params, GetRoleByUserIdResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetRoleByUserId(String userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("UserId", userId);

        QueryProcedureInput<GetRoleByUserIdResponse> queryInput = new QueryProcedureInput<>("getRoleByUserId", params, GetRoleByUserIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<QueryGetAllDomainValuesByDvTypeCodeResponse> executeQuery_GetAllDomainValuesByDvTypeCode(String selectedLocale, String domainValueTypeCode, Boolean isAlphaSort, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("selectedLocale", selectedLocale);
        params.put("domainValueTypeCode", domainValueTypeCode);
        params.put("isAlphaSort", isAlphaSort);

        return queryExecutor.executeNamedQuery("Query_GetAllDomainValuesByDvTypeCode", params, QueryGetAllDomainValuesByDvTypeCodeResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQuery_GetAllDomainValuesByDvTypeCode(String selectedLocale, String domainValueTypeCode, Boolean isAlphaSort, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("selectedLocale", selectedLocale);
        params.put("domainValueTypeCode", domainValueTypeCode);
        params.put("isAlphaSort", isAlphaSort);

        QueryProcedureInput<QueryGetAllDomainValuesByDvTypeCodeResponse> queryInput = new QueryProcedureInput<>("Query_GetAllDomainValuesByDvTypeCode", params, QueryGetAllDomainValuesByDvTypeCodeResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<DvsearchByCodeAndDescriptionResponse> executeDVSearchByCodeAndDescription(String defaultLocale, String domainValueTypeId, Boolean showAll, Boolean isActiveFlag, String searchValue, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("defaultLocale", defaultLocale);
        params.put("domainValueTypeId", domainValueTypeId);
        params.put("showAll", showAll);
        params.put("isActiveFlag", isActiveFlag);
        params.put("searchValue", searchValue);

        return queryExecutor.executeNamedQuery("DVSearchByCodeAndDescription", params, DvsearchByCodeAndDescriptionResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportDVSearchByCodeAndDescription(String defaultLocale, String domainValueTypeId, Boolean showAll, Boolean isActiveFlag, String searchValue, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("defaultLocale", defaultLocale);
        params.put("domainValueTypeId", domainValueTypeId);
        params.put("showAll", showAll);
        params.put("isActiveFlag", isActiveFlag);
        params.put("searchValue", searchValue);

        QueryProcedureInput<DvsearchByCodeAndDescriptionResponse> queryInput = new QueryProcedureInput<>("DVSearchByCodeAndDescription", params, DvsearchByCodeAndDescriptionResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetPermissionGroupByRoleIdResponse> executeGetPermissionGroupByRoleId(String roleId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("RoleId", roleId);

        return queryExecutor.executeNamedQuery("getPermissionGroupByRoleId", params, GetPermissionGroupByRoleIdResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetPermissionGroupByRoleId(String roleId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("RoleId", roleId);

        QueryProcedureInput<GetPermissionGroupByRoleIdResponse> queryInput = new QueryProcedureInput<>("getPermissionGroupByRoleId", params, GetPermissionGroupByRoleIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<QueryGetAllDvsByDvtypeWithActiveFlagResponse> executeQuery_GetAllDVsByDVTypeWithActiveFlag(String selectedLocale, String domainValueTypeCode, Boolean showAll, Boolean isActiveFlag, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("selectedLocale", selectedLocale);
        params.put("domainValueTypeCode", domainValueTypeCode);
        params.put("showAll", showAll);
        params.put("isActiveFlag", isActiveFlag);

        return queryExecutor.executeNamedQuery("Query_GetAllDVsByDVTypeWithActiveFlag", params, QueryGetAllDvsByDvtypeWithActiveFlagResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQuery_GetAllDVsByDVTypeWithActiveFlag(String selectedLocale, String domainValueTypeCode, Boolean showAll, Boolean isActiveFlag, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("selectedLocale", selectedLocale);
        params.put("domainValueTypeCode", domainValueTypeCode);
        params.put("showAll", showAll);
        params.put("isActiveFlag", isActiveFlag);

        QueryProcedureInput<QueryGetAllDvsByDvtypeWithActiveFlagResponse> queryInput = new QueryProcedureInput<>("Query_GetAllDVsByDVTypeWithActiveFlag", params, QueryGetAllDvsByDvtypeWithActiveFlagResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetGroupsRolesByUserIdResponse> executeGetGroupsRolesByUserId(String userId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("UserId", userId);

        return queryExecutor.executeNamedQuery("getGroupsRolesByUserId", params, GetGroupsRolesByUserIdResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetGroupsRolesByUserId(String userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("UserId", userId);

        QueryProcedureInput<GetGroupsRolesByUserIdResponse> queryInput = new QueryProcedureInput<>("getGroupsRolesByUserId", params, GetGroupsRolesByUserIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<QueryGetDvbyCodeAndTypeCodeWithActiveFlagResponse> executeQuery_GetDVByCodeAndTypeCodeWithActiveFlag(String selectedLocale, String domainValueCode, String domainValueTypeCode, Boolean showAll, Boolean isActiveFlag, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("selectedLocale", selectedLocale);
        params.put("domainValueCode", domainValueCode);
        params.put("domainValueTypeCode", domainValueTypeCode);
        params.put("showAll", showAll);
        params.put("isActiveFlag", isActiveFlag);

        return queryExecutor.executeNamedQuery("Query_GetDVByCodeAndTypeCodeWithActiveFlag", params, QueryGetDvbyCodeAndTypeCodeWithActiveFlagResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQuery_GetDVByCodeAndTypeCodeWithActiveFlag(String selectedLocale, String domainValueCode, String domainValueTypeCode, Boolean showAll, Boolean isActiveFlag, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("selectedLocale", selectedLocale);
        params.put("domainValueCode", domainValueCode);
        params.put("domainValueTypeCode", domainValueTypeCode);
        params.put("showAll", showAll);
        params.put("isActiveFlag", isActiveFlag);

        QueryProcedureInput<QueryGetDvbyCodeAndTypeCodeWithActiveFlagResponse> queryInput = new QueryProcedureInput<>("Query_GetDVByCodeAndTypeCodeWithActiveFlag", params, QueryGetDvbyCodeAndTypeCodeWithActiveFlagResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Integer executeQueueLock(QueueLockRequest queueLockRequest) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("lockedBy", queueLockRequest.getLockedBy());
        params.put("updatedBy", queueLockRequest.getUpdatedBy());
        params.put("updatedOn", queueLockRequest.getUpdatedOn());
        params.put("id", queueLockRequest.getId());

        return queryExecutor.executeNamedQueryForUpdate("QueueLock", params);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", readOnly = true)
    @Override
    public Page<GetWorkCategoryByUserIdResponse> executeGetWorkCategoryByUserId(String userId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("getWorkCategoryByUserId", params, GetWorkCategoryByUserIdResponse.class, pageable);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetWorkCategoryByUserId(String userId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("userId", userId);

        QueryProcedureInput<GetWorkCategoryByUserIdResponse> queryInput = new QueryProcedureInput<>("getWorkCategoryByUserId", params, GetWorkCategoryByUserIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Integer executeDeleteTeamUser(Integer teamId) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("teamId", teamId);

        return queryExecutor.executeNamedQueryForUpdate("deleteTeamUser", params);
    }

}