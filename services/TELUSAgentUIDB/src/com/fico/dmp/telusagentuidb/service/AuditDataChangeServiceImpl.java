/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;

import com.fico.dmp.telusagentuidb.AuditDataChange;


/**
 * ServiceImpl object for domain model class AuditDataChange.
 *
 * @see AuditDataChange
 */
@Service("TELUSAgentUIDB.AuditDataChangeService")
@Validated
public class AuditDataChangeServiceImpl implements AuditDataChangeService {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(AuditDataChangeServiceImpl.class.getName());


    @Autowired
    @Qualifier("TELUSAgentUIDB.AuditDataChangeDao")
    private WMGenericDao<AuditDataChange, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AuditDataChange, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AuditDataChange create(AuditDataChange auditDataChange) {
        LOGGER.debug("Creating a new AuditDataChange with information: {}", auditDataChange);

        AuditDataChange auditDataChangeCreated = this.wmGenericDao.create(auditDataChange);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(auditDataChangeCreated);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AuditDataChange getById(Integer auditdatachangeId) {
        LOGGER.debug("Finding AuditDataChange by id: {}", auditdatachangeId);
        return this.wmGenericDao.findById(auditdatachangeId);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AuditDataChange findById(Integer auditdatachangeId) {
        LOGGER.debug("Finding AuditDataChange by id: {}", auditdatachangeId);
        try {
            return this.wmGenericDao.findById(auditdatachangeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AuditDataChange found with id: {}", auditdatachangeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public List<AuditDataChange> findByMultipleIds(List<Integer> auditdatachangeIds, boolean orderedReturn) {
        LOGGER.debug("Finding AuditDataChanges by ids: {}", auditdatachangeIds);

        return this.wmGenericDao.findByMultipleIds(auditdatachangeIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AuditDataChange update(AuditDataChange auditDataChange) {
        LOGGER.debug("Updating AuditDataChange with information: {}", auditDataChange);

        this.wmGenericDao.update(auditDataChange);
        this.wmGenericDao.refresh(auditDataChange);

        return auditDataChange;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public AuditDataChange delete(Integer auditdatachangeId) {
        LOGGER.debug("Deleting AuditDataChange with id: {}", auditdatachangeId);
        AuditDataChange deleted = this.wmGenericDao.findById(auditdatachangeId);
        if (deleted == null) {
            LOGGER.debug("No AuditDataChange found with id: {}", auditdatachangeId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), AuditDataChange.class.getSimpleName(), auditdatachangeId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void delete(AuditDataChange auditDataChange) {
        LOGGER.debug("Deleting AuditDataChange with {}", auditDataChange);
        this.wmGenericDao.delete(auditDataChange);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<AuditDataChange> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AuditDataChanges");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<AuditDataChange> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AuditDataChanges");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table AuditDataChange to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TELUSAgentUIDB for table AuditDataChange to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public void importData(MultipartFile file) {
        LOGGER.debug("importing data in the service TELUSAgentUIDB for table AuditDataChange");
        this.wmGenericDao.importData(file, "TELUSAgentUIDB", "AuditDataChange");
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TELUSAgentUIDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}