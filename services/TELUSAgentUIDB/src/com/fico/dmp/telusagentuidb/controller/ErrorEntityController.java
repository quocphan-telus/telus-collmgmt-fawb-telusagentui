/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.ErrorEntity;
import com.fico.dmp.telusagentuidb.service.ErrorEntityService;


/**
 * Controller object for domain model class ErrorEntity.
 * @see ErrorEntity
 */
@RestController("TELUSAgentUIDB.ErrorEntityController")
@Api(value = "ErrorEntityController", description = "Exposes APIs to work with ErrorEntity resource.")
@RequestMapping("/TELUSAgentUIDB/ErrorEntity")
public class ErrorEntityController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(ErrorEntityController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.ErrorEntityService")
	private ErrorEntityService errorEntityService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ErrorEntity instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ErrorEntity createErrorEntity(@RequestBody ErrorEntity errorEntity) {
		LOGGER.debug("Create ErrorEntity with information: {}" , errorEntity);

		errorEntity = errorEntityService.create(errorEntity);
		LOGGER.debug("Created ErrorEntity with information: {}" , errorEntity);

	    return errorEntity;
	}

    @ApiOperation(value = "Returns the ErrorEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ErrorEntity getErrorEntity(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ErrorEntity with id: {}" , id);

        ErrorEntity foundErrorEntity = errorEntityService.getById(id);
        LOGGER.debug("ErrorEntity details with id: {}" , foundErrorEntity);

        return foundErrorEntity;
    }

    @ApiOperation(value = "Updates the ErrorEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ErrorEntity editErrorEntity(@PathVariable("id") Integer id, @RequestBody ErrorEntity errorEntity) {
        LOGGER.debug("Editing ErrorEntity with id: {}" , errorEntity.getId());

        errorEntity.setId(id);
        errorEntity = errorEntityService.update(errorEntity);
        LOGGER.debug("ErrorEntity details with id: {}" , errorEntity);

        return errorEntity;
    }

    @ApiOperation(value = "Deletes the ErrorEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteErrorEntity(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ErrorEntity with id: {}" , id);

        ErrorEntity deletedErrorEntity = errorEntityService.delete(id);

        return deletedErrorEntity != null;
    }

    /**
     * @deprecated Use {@link #findErrorEntities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ErrorEntity instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<ErrorEntity> searchErrorEntitiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ErrorEntities list by query filter:{}", (Object) queryFilters);
        return errorEntityService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ErrorEntity instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ErrorEntity> findErrorEntities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ErrorEntities list by filter:", query);
        return errorEntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ErrorEntity instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<ErrorEntity> filterErrorEntities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ErrorEntities list by filter", query);
        return errorEntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportErrorEntities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return errorEntityService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportErrorEntitiesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ErrorEntity.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> errorEntityService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ErrorEntity instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countErrorEntities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ErrorEntities");
		return errorEntityService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getErrorEntityAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return errorEntityService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importErrorEntitys(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing ErrorEntity table rows from csv");
        errorEntityService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ErrorEntityService instance
	 */
	protected void setErrorEntityService(ErrorEntityService service) {
		this.errorEntityService = service;
	}

}