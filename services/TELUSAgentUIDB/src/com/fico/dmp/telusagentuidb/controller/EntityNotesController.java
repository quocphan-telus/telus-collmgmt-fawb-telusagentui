/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.EntityNotes;
import com.fico.dmp.telusagentuidb.service.EntityNotesService;


/**
 * Controller object for domain model class EntityNotes.
 * @see EntityNotes
 */
@RestController("TELUSAgentUIDB.EntityNotesController")
@Api(value = "EntityNotesController", description = "Exposes APIs to work with EntityNotes resource.")
@RequestMapping("/TELUSAgentUIDB/EntityNotes")
public class EntityNotesController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(EntityNotesController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.EntityNotesService")
	private EntityNotesService entityNotesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new EntityNotes instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EntityNotes createEntityNotes(@RequestBody EntityNotes entityNotes) {
		LOGGER.debug("Create EntityNotes with information: {}" , entityNotes);

		entityNotes = entityNotesService.create(entityNotes);
		LOGGER.debug("Created EntityNotes with information: {}" , entityNotes);

	    return entityNotes;
	}

    @ApiOperation(value = "Returns the EntityNotes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EntityNotes getEntityNotes(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting EntityNotes with id: {}" , id);

        EntityNotes foundEntityNotes = entityNotesService.getById(id);
        LOGGER.debug("EntityNotes details with id: {}" , foundEntityNotes);

        return foundEntityNotes;
    }

    @ApiOperation(value = "Updates the EntityNotes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EntityNotes editEntityNotes(@PathVariable("id") Integer id, @RequestBody EntityNotes entityNotes) {
        LOGGER.debug("Editing EntityNotes with id: {}" , entityNotes.getId());

        entityNotes.setId(id);
        entityNotes = entityNotesService.update(entityNotes);
        LOGGER.debug("EntityNotes details with id: {}" , entityNotes);

        return entityNotes;
    }

    @ApiOperation(value = "Deletes the EntityNotes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEntityNotes(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting EntityNotes with id: {}" , id);

        EntityNotes deletedEntityNotes = entityNotesService.delete(id);

        return deletedEntityNotes != null;
    }

    /**
     * @deprecated Use {@link #findEntityNotes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EntityNotes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<EntityNotes> searchEntityNotesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EntityNotes list by query filter:{}", (Object) queryFilters);
        return entityNotesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EntityNotes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EntityNotes> findEntityNotes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EntityNotes list by filter:", query);
        return entityNotesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EntityNotes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<EntityNotes> filterEntityNotes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EntityNotes list by filter", query);
        return entityNotesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportEntityNotes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return entityNotesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportEntityNotesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = EntityNotes.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> entityNotesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of EntityNotes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countEntityNotes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EntityNotes");
		return entityNotesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getEntityNotesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return entityNotesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importEntityNotess(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing EntityNotes table rows from csv");
        entityNotesService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EntityNotesService instance
	 */
	protected void setEntityNotesService(EntityNotesService service) {
		this.entityNotesService = service;
	}

}