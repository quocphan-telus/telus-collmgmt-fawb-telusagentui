/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.DomainValueRelation;
import com.fico.dmp.telusagentuidb.service.DomainValueRelationService;


/**
 * Controller object for domain model class DomainValueRelation.
 * @see DomainValueRelation
 */
@RestController("TELUSAgentUIDB.DomainValueRelationController")
@Api(value = "DomainValueRelationController", description = "Exposes APIs to work with DomainValueRelation resource.")
@RequestMapping("/TELUSAgentUIDB/DomainValueRelation")
public class DomainValueRelationController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(DomainValueRelationController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.DomainValueRelationService")
	private DomainValueRelationService domainValueRelationService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new DomainValueRelation instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DomainValueRelation createDomainValueRelation(@RequestBody DomainValueRelation domainValueRelation) {
		LOGGER.debug("Create DomainValueRelation with information: {}" , domainValueRelation);

		domainValueRelation = domainValueRelationService.create(domainValueRelation);
		LOGGER.debug("Created DomainValueRelation with information: {}" , domainValueRelation);

	    return domainValueRelation;
	}

    @ApiOperation(value = "Returns the DomainValueRelation instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DomainValueRelation getDomainValueRelation(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting DomainValueRelation with id: {}" , id);

        DomainValueRelation foundDomainValueRelation = domainValueRelationService.getById(id);
        LOGGER.debug("DomainValueRelation details with id: {}" , foundDomainValueRelation);

        return foundDomainValueRelation;
    }

    @ApiOperation(value = "Updates the DomainValueRelation instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DomainValueRelation editDomainValueRelation(@PathVariable("id") Integer id, @RequestBody DomainValueRelation domainValueRelation) {
        LOGGER.debug("Editing DomainValueRelation with id: {}" , domainValueRelation.getId());

        domainValueRelation.setId(id);
        domainValueRelation = domainValueRelationService.update(domainValueRelation);
        LOGGER.debug("DomainValueRelation details with id: {}" , domainValueRelation);

        return domainValueRelation;
    }

    @ApiOperation(value = "Deletes the DomainValueRelation instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDomainValueRelation(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting DomainValueRelation with id: {}" , id);

        DomainValueRelation deletedDomainValueRelation = domainValueRelationService.delete(id);

        return deletedDomainValueRelation != null;
    }

    /**
     * @deprecated Use {@link #findDomainValueRelations(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DomainValueRelation instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<DomainValueRelation> searchDomainValueRelationsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DomainValueRelations list by query filter:{}", (Object) queryFilters);
        return domainValueRelationService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DomainValueRelation instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DomainValueRelation> findDomainValueRelations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DomainValueRelations list by filter:", query);
        return domainValueRelationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DomainValueRelation instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<DomainValueRelation> filterDomainValueRelations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DomainValueRelations list by filter", query);
        return domainValueRelationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportDomainValueRelations(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return domainValueRelationService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportDomainValueRelationsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = DomainValueRelation.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> domainValueRelationService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of DomainValueRelation instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countDomainValueRelations( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DomainValueRelations");
		return domainValueRelationService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getDomainValueRelationAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return domainValueRelationService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importDomainValueRelations(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing DomainValueRelation table rows from csv");
        domainValueRelationService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DomainValueRelationService instance
	 */
	protected void setDomainValueRelationService(DomainValueRelationService service) {
		this.domainValueRelationService = service;
	}

}