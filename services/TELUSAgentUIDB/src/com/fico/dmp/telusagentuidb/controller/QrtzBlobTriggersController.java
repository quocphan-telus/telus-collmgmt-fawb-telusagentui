/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.QrtzBlobTriggers;
import com.fico.dmp.telusagentuidb.QrtzBlobTriggersId;
import com.fico.dmp.telusagentuidb.service.QrtzBlobTriggersService;


/**
 * Controller object for domain model class QrtzBlobTriggers.
 * @see QrtzBlobTriggers
 */
@RestController("TELUSAgentUIDB.QrtzBlobTriggersController")
@Api(value = "QrtzBlobTriggersController", description = "Exposes APIs to work with QrtzBlobTriggers resource.")
@RequestMapping("/TELUSAgentUIDB/QrtzBlobTriggers")
public class QrtzBlobTriggersController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzBlobTriggersController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.QrtzBlobTriggersService")
	private QrtzBlobTriggersService qrtzBlobTriggersService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new QrtzBlobTriggers instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzBlobTriggers createQrtzBlobTriggers(@RequestPart("wm_data_json") QrtzBlobTriggers qrtzBlobTriggers, @RequestPart(value = "blobData", required = false) MultipartFile _blobData) {
		LOGGER.debug("Create QrtzBlobTriggers with information: {}" , qrtzBlobTriggers);

    qrtzBlobTriggers.setBlobData(WMMultipartUtils.toByteArray(_blobData));
		qrtzBlobTriggers = qrtzBlobTriggersService.create(qrtzBlobTriggers);
		LOGGER.debug("Created QrtzBlobTriggers with information: {}" , qrtzBlobTriggers);

	    return qrtzBlobTriggers;
	}

    @ApiOperation(value = "Returns the QrtzBlobTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzBlobTriggers getQrtzBlobTriggers(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup) {

        QrtzBlobTriggersId qrtzblobtriggersId = new QrtzBlobTriggersId();
        qrtzblobtriggersId.setSchedName(schedName);
        qrtzblobtriggersId.setTriggerName(triggerName);
        qrtzblobtriggersId.setTriggerGroup(triggerGroup);

        LOGGER.debug("Getting QrtzBlobTriggers with id: {}" , qrtzblobtriggersId);
        QrtzBlobTriggers qrtzBlobTriggers = qrtzBlobTriggersService.getById(qrtzblobtriggersId);
        LOGGER.debug("QrtzBlobTriggers details with id: {}" , qrtzBlobTriggers);

        return qrtzBlobTriggers;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in QrtzBlobTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getQrtzBlobTriggersBLOBContent(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in QrtzBlobTriggers instance" , fieldName);

        if(!WMRuntimeUtils.isLob(QrtzBlobTriggers.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        QrtzBlobTriggersId qrtzblobtriggersId = new QrtzBlobTriggersId();
        qrtzblobtriggersId.setSchedName(schedName);
        qrtzblobtriggersId.setTriggerName(triggerName);
        qrtzblobtriggersId.setTriggerGroup(triggerGroup);

        QrtzBlobTriggers qrtzBlobTriggers = qrtzBlobTriggersService.getById(qrtzblobtriggersId);
        WMMultipartUtils.buildHttpResponseForBlob(qrtzBlobTriggers, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the QrtzBlobTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzBlobTriggers editQrtzBlobTriggers(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup, @RequestBody QrtzBlobTriggers qrtzBlobTriggers) {

        qrtzBlobTriggers.setSchedName(schedName);
        qrtzBlobTriggers.setTriggerName(triggerName);
        qrtzBlobTriggers.setTriggerGroup(triggerGroup);

        LOGGER.debug("QrtzBlobTriggers details with id is updated with: {}" , qrtzBlobTriggers);

        return qrtzBlobTriggersService.update(qrtzBlobTriggers);
    }

    @ApiOperation(value = "Updates the QrtzBlobTriggers instance associated with the given composite-id.This API should be used when QrtzBlobTriggers instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzBlobTriggers editQrtzBlobTriggers(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup, MultipartHttpServletRequest multipartHttpServletRequest) {
        return this.editQrtzBlobTriggersAndMultiparts(schedName, triggerName, triggerGroup, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the QrtzBlobTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzBlobTriggers editQrtzBlobTriggersAndMultiparts(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup, MultipartHttpServletRequest multipartHttpServletRequest) { 

        QrtzBlobTriggersId qrtzblobtriggersId = new QrtzBlobTriggersId();
        qrtzblobtriggersId.setSchedName(schedName);
        qrtzblobtriggersId.setTriggerName(triggerName);
        qrtzblobtriggersId.setTriggerGroup(triggerGroup);

        QrtzBlobTriggers newQrtzBlobTriggers = WMMultipartUtils.toObject(multipartHttpServletRequest, QrtzBlobTriggers.class, "TELUSAgentUIDB");
        QrtzBlobTriggers oldQrtzBlobTriggers = qrtzBlobTriggersService.getById(qrtzblobtriggersId);

        WMMultipartUtils.updateLobsContent(oldQrtzBlobTriggers, newQrtzBlobTriggers);

        newQrtzBlobTriggers.setSchedName(schedName);
        newQrtzBlobTriggers.setTriggerName(triggerName);
        newQrtzBlobTriggers.setTriggerGroup(triggerGroup);

        LOGGER.debug("QrtzBlobTriggers details with id is updated with: {}" , newQrtzBlobTriggers);

        return qrtzBlobTriggersService.update(newQrtzBlobTriggers);
    }


    @ApiOperation(value = "Deletes the QrtzBlobTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteQrtzBlobTriggers(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup) {

        QrtzBlobTriggersId qrtzblobtriggersId = new QrtzBlobTriggersId();
        qrtzblobtriggersId.setSchedName(schedName);
        qrtzblobtriggersId.setTriggerName(triggerName);
        qrtzblobtriggersId.setTriggerGroup(triggerGroup);

        LOGGER.debug("Deleting QrtzBlobTriggers with id: {}" , qrtzblobtriggersId);
        QrtzBlobTriggers qrtzBlobTriggers = qrtzBlobTriggersService.delete(qrtzblobtriggersId);

        return qrtzBlobTriggers != null;
    }


    /**
     * @deprecated Use {@link #findQrtzBlobTriggers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of QrtzBlobTriggers instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzBlobTriggers> searchQrtzBlobTriggersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering QrtzBlobTriggers list by query filter:{}", (Object) queryFilters);
        return qrtzBlobTriggersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzBlobTriggers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<QrtzBlobTriggers> findQrtzBlobTriggers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzBlobTriggers list by filter:", query);
        return qrtzBlobTriggersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzBlobTriggers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzBlobTriggers> filterQrtzBlobTriggers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzBlobTriggers list by filter", query);
        return qrtzBlobTriggersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportQrtzBlobTriggers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return qrtzBlobTriggersService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQrtzBlobTriggersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = QrtzBlobTriggers.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> qrtzBlobTriggersService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of QrtzBlobTriggers instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countQrtzBlobTriggers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting QrtzBlobTriggers");
		return qrtzBlobTriggersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getQrtzBlobTriggersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return qrtzBlobTriggersService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importQrtzBlobTriggerss(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing QrtzBlobTriggers table rows from csv");
        qrtzBlobTriggersService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service QrtzBlobTriggersService instance
	 */
	protected void setQrtzBlobTriggersService(QrtzBlobTriggersService service) {
		this.qrtzBlobTriggersService = service;
	}

}