/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.GroupRole;
import com.fico.dmp.telusagentuidb.Role;
import com.fico.dmp.telusagentuidb.RolePermission;
import com.fico.dmp.telusagentuidb.service.RoleService;


/**
 * Controller object for domain model class Role.
 * @see Role
 */
@RestController("TELUSAgentUIDB.RoleController")
@Api(value = "RoleController", description = "Exposes APIs to work with Role resource.")
@RequestMapping("/TELUSAgentUIDB/Role")
public class RoleController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(RoleController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.RoleService")
	private RoleService roleService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Role instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Role createRole(@RequestBody Role roleInstance) {
		LOGGER.debug("Create Role with information: {}" , roleInstance);

		roleInstance = roleService.create(roleInstance);
		LOGGER.debug("Created Role with information: {}" , roleInstance);

	    return roleInstance;
	}

    @ApiOperation(value = "Returns the Role instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Role getRole(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Role with id: {}" , id);

        Role foundRole = roleService.getById(id);
        LOGGER.debug("Role details with id: {}" , foundRole);

        return foundRole;
    }

    @ApiOperation(value = "Updates the Role instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Role editRole(@PathVariable("id") Integer id, @RequestBody Role roleInstance) {
        LOGGER.debug("Editing Role with id: {}" , roleInstance.getId());

        roleInstance.setId(id);
        roleInstance = roleService.update(roleInstance);
        LOGGER.debug("Role details with id: {}" , roleInstance);

        return roleInstance;
    }

    @ApiOperation(value = "Deletes the Role instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRole(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Role with id: {}" , id);

        Role deletedRole = roleService.delete(id);

        return deletedRole != null;
    }

    @RequestMapping(value = "/role/{role}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Role with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Role getByRole(@PathVariable("role") String role) {
        LOGGER.debug("Getting Role with uniques key Role");
        return roleService.getByRole(role);
    }

    /**
     * @deprecated Use {@link #findRoles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Role instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Role> searchRolesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Roles list by query filter:{}", (Object) queryFilters);
        return roleService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Role instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Role> findRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Roles list by filter:", query);
        return roleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Role instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Role> filterRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Roles list by filter", query);
        return roleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportRoles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return roleService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportRolesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Role.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> roleService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Role instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countRoles( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Roles");
		return roleService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getRoleAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return roleService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importRoles(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing Role table rows from csv");
        roleService.importData(file);
    }

    @RequestMapping(value="/{id:.+}/groupRoles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the groupRoles instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GroupRole> findAssociatedGroupRoles(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated groupRoles");
        return roleService.findAssociatedGroupRoles(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/rolePermissions", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the rolePermissions instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RolePermission> findAssociatedRolePermissions(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated rolePermissions");
        return roleService.findAssociatedRolePermissions(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RoleService instance
	 */
	protected void setRoleService(RoleService service) {
		this.roleService = service;
	}

}