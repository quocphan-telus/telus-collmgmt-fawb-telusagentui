/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.QrtzFiredTriggers;
import com.fico.dmp.telusagentuidb.QrtzFiredTriggersId;
import com.fico.dmp.telusagentuidb.service.QrtzFiredTriggersService;


/**
 * Controller object for domain model class QrtzFiredTriggers.
 * @see QrtzFiredTriggers
 */
@RestController("TELUSAgentUIDB.QrtzFiredTriggersController")
@Api(value = "QrtzFiredTriggersController", description = "Exposes APIs to work with QrtzFiredTriggers resource.")
@RequestMapping("/TELUSAgentUIDB/QrtzFiredTriggers")
public class QrtzFiredTriggersController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzFiredTriggersController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.QrtzFiredTriggersService")
	private QrtzFiredTriggersService qrtzFiredTriggersService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new QrtzFiredTriggers instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzFiredTriggers createQrtzFiredTriggers(@RequestBody QrtzFiredTriggers qrtzFiredTriggers) {
		LOGGER.debug("Create QrtzFiredTriggers with information: {}" , qrtzFiredTriggers);

		qrtzFiredTriggers = qrtzFiredTriggersService.create(qrtzFiredTriggers);
		LOGGER.debug("Created QrtzFiredTriggers with information: {}" , qrtzFiredTriggers);

	    return qrtzFiredTriggers;
	}

    @ApiOperation(value = "Returns the QrtzFiredTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzFiredTriggers getQrtzFiredTriggers(@RequestParam("entryId") String entryId, @RequestParam("schedName") String schedName) {

        QrtzFiredTriggersId qrtzfiredtriggersId = new QrtzFiredTriggersId();
        qrtzfiredtriggersId.setEntryId(entryId);
        qrtzfiredtriggersId.setSchedName(schedName);

        LOGGER.debug("Getting QrtzFiredTriggers with id: {}" , qrtzfiredtriggersId);
        QrtzFiredTriggers qrtzFiredTriggers = qrtzFiredTriggersService.getById(qrtzfiredtriggersId);
        LOGGER.debug("QrtzFiredTriggers details with id: {}" , qrtzFiredTriggers);

        return qrtzFiredTriggers;
    }



    @ApiOperation(value = "Updates the QrtzFiredTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzFiredTriggers editQrtzFiredTriggers(@RequestParam("entryId") String entryId, @RequestParam("schedName") String schedName, @RequestBody QrtzFiredTriggers qrtzFiredTriggers) {

        qrtzFiredTriggers.setEntryId(entryId);
        qrtzFiredTriggers.setSchedName(schedName);

        LOGGER.debug("QrtzFiredTriggers details with id is updated with: {}" , qrtzFiredTriggers);

        return qrtzFiredTriggersService.update(qrtzFiredTriggers);
    }


    @ApiOperation(value = "Deletes the QrtzFiredTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteQrtzFiredTriggers(@RequestParam("entryId") String entryId, @RequestParam("schedName") String schedName) {

        QrtzFiredTriggersId qrtzfiredtriggersId = new QrtzFiredTriggersId();
        qrtzfiredtriggersId.setEntryId(entryId);
        qrtzfiredtriggersId.setSchedName(schedName);

        LOGGER.debug("Deleting QrtzFiredTriggers with id: {}" , qrtzfiredtriggersId);
        QrtzFiredTriggers qrtzFiredTriggers = qrtzFiredTriggersService.delete(qrtzfiredtriggersId);

        return qrtzFiredTriggers != null;
    }


    /**
     * @deprecated Use {@link #findQrtzFiredTriggers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of QrtzFiredTriggers instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzFiredTriggers> searchQrtzFiredTriggersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering QrtzFiredTriggers list by query filter:{}", (Object) queryFilters);
        return qrtzFiredTriggersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzFiredTriggers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<QrtzFiredTriggers> findQrtzFiredTriggers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzFiredTriggers list by filter:", query);
        return qrtzFiredTriggersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzFiredTriggers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzFiredTriggers> filterQrtzFiredTriggers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzFiredTriggers list by filter", query);
        return qrtzFiredTriggersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportQrtzFiredTriggers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return qrtzFiredTriggersService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQrtzFiredTriggersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = QrtzFiredTriggers.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> qrtzFiredTriggersService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of QrtzFiredTriggers instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countQrtzFiredTriggers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting QrtzFiredTriggers");
		return qrtzFiredTriggersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getQrtzFiredTriggersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return qrtzFiredTriggersService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importQrtzFiredTriggerss(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing QrtzFiredTriggers table rows from csv");
        qrtzFiredTriggersService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service QrtzFiredTriggersService instance
	 */
	protected void setQrtzFiredTriggersService(QrtzFiredTriggersService service) {
		this.qrtzFiredTriggersService = service;
	}

}