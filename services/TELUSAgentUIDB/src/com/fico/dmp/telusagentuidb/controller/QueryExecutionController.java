/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.InputStream;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.annotation.JsonView;
import com.wavemaker.commons.json.views.JsonViews.BlobAsUrlView;
import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.fico.dmp.telusagentuidb.service.TELUSAgentUIDBQueryExecutorService;
import com.fico.dmp.telusagentuidb.models.query.*;

@RestController(value = "TELUSAgentUIDB.QueryExecutionController")
@RequestMapping("/TELUSAgentUIDB/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QueryExecutionController.class.getName());

    @Autowired
    private TELUSAgentUIDBQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/getTeamNameByEmplId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getTeamNameByEmplId")
    public Page<GetTeamNameByEmplIdResponse> executeGetTeamNameByEmplId(@RequestParam(value = "emplId") String emplId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getTeamNameByEmplId");
        Page<GetTeamNameByEmplIdResponse> _result = queryService.executeGetTeamNameByEmplId(emplId, pageable);
        LOGGER.debug("got the result for named query: getTeamNameByEmplId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getTeamNameByEmplId")
    @RequestMapping(value = "/queries/getTeamNameByEmplId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetTeamNameByEmplId(@RequestParam(value = "emplId") String emplId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getTeamNameByEmplId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getTeamNameByEmplId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetTeamNameByEmplId(emplId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/checkforDocumentWithEid", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "checkforDocumentWithEid")
    public Page<CheckforDocumentWithEidResponse> executeCheckforDocumentWithEid(@RequestParam(value = "entityId") String entityId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: checkforDocumentWithEid");
        Page<CheckforDocumentWithEidResponse> _result = queryService.executeCheckforDocumentWithEid(entityId, pageable);
        LOGGER.debug("got the result for named query: checkforDocumentWithEid, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query checkforDocumentWithEid")
    @RequestMapping(value = "/queries/checkforDocumentWithEid/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportCheckforDocumentWithEid(@RequestParam(value = "entityId") String entityId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: checkforDocumentWithEid");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "checkforDocumentWithEid";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportCheckforDocumentWithEid(entityId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Query_GetDomainValueByCodeAndTypeCode", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query_GetDomainValueByCodeAndTypeCode")
    public Page<QueryGetDomainValueByCodeAndTypeCodeResponse> executeQuery_GetDomainValueByCodeAndTypeCode(@RequestParam(value = "selectedLocale") String selectedLocale, @RequestParam(value = "domainValueCode") String domainValueCode, @RequestParam(value = "domainValueTypeCode") String domainValueTypeCode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Query_GetDomainValueByCodeAndTypeCode");
        Page<QueryGetDomainValueByCodeAndTypeCodeResponse> _result = queryService.executeQuery_GetDomainValueByCodeAndTypeCode(selectedLocale, domainValueCode, domainValueTypeCode, pageable);
        LOGGER.debug("got the result for named query: Query_GetDomainValueByCodeAndTypeCode, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Query_GetDomainValueByCodeAndTypeCode")
    @RequestMapping(value = "/queries/Query_GetDomainValueByCodeAndTypeCode/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQuery_GetDomainValueByCodeAndTypeCode(@RequestParam(value = "selectedLocale") String selectedLocale, @RequestParam(value = "domainValueCode") String domainValueCode, @RequestParam(value = "domainValueTypeCode") String domainValueTypeCode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Query_GetDomainValueByCodeAndTypeCode");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Query_GetDomainValueByCodeAndTypeCode";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQuery_GetDomainValueByCodeAndTypeCode(selectedLocale, domainValueCode, domainValueTypeCode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getTeamManagersByTeamId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getTeamManagersByTeamId")
    public Page<GetTeamManagersByTeamIdResponse> executeGetTeamManagersByTeamId(@RequestParam(value = "teamId") String teamId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getTeamManagersByTeamId");
        Page<GetTeamManagersByTeamIdResponse> _result = queryService.executeGetTeamManagersByTeamId(teamId, pageable);
        LOGGER.debug("got the result for named query: getTeamManagersByTeamId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getTeamManagersByTeamId")
    @RequestMapping(value = "/queries/getTeamManagersByTeamId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetTeamManagersByTeamId(@RequestParam(value = "teamId") String teamId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getTeamManagersByTeamId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getTeamManagersByTeamId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetTeamManagersByTeamId(teamId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/countRolePermission", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "countRolePermission")
    public Page<CountRolePermissionResponse> executeCountRolePermission(@RequestParam(value = "RoleId") String roleId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: countRolePermission");
        Page<CountRolePermissionResponse> _result = queryService.executeCountRolePermission(roleId, pageable);
        LOGGER.debug("got the result for named query: countRolePermission, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query countRolePermission")
    @RequestMapping(value = "/queries/countRolePermission/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportCountRolePermission(@RequestParam(value = "RoleId") String roleId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: countRolePermission");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "countRolePermission";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportCountRolePermission(roleId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getActiveAgentListWithWorkCategory", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This query is used to retrieve the active agent information list along with work categories")
    public Page<GetActiveAgentListWithWorkCategoryResponse> executeGetActiveAgentListWithWorkCategory(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getActiveAgentListWithWorkCategory");
        Page<GetActiveAgentListWithWorkCategoryResponse> _result = queryService.executeGetActiveAgentListWithWorkCategory(pageable);
        LOGGER.debug("got the result for named query: getActiveAgentListWithWorkCategory, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getActiveAgentListWithWorkCategory")
    @RequestMapping(value = "/queries/getActiveAgentListWithWorkCategory/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetActiveAgentListWithWorkCategory(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getActiveAgentListWithWorkCategory");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getActiveAgentListWithWorkCategory";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetActiveAgentListWithWorkCategory( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getRolesAssociatedUsersPermissions", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getRolesAssociatedUsersPermissions")
    public Page<GetRolesAssociatedUsersPermissionsResponse> executeGetRolesAssociatedUsersPermissions(@RequestParam(value = "role", required = false) String role, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getRolesAssociatedUsersPermissions");
        Page<GetRolesAssociatedUsersPermissionsResponse> _result = queryService.executeGetRolesAssociatedUsersPermissions(role, pageable);
        LOGGER.debug("got the result for named query: getRolesAssociatedUsersPermissions, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getRolesAssociatedUsersPermissions")
    @RequestMapping(value = "/queries/getRolesAssociatedUsersPermissions/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetRolesAssociatedUsersPermissions(@RequestParam(value = "role", required = false) String role, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getRolesAssociatedUsersPermissions");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getRolesAssociatedUsersPermissions";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetRolesAssociatedUsersPermissions(role,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getActiveRolesByUserName", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getActiveRolesByUserName")
    public Page<GetActiveRolesByUserNameResponse> executeGetActiveRolesByUserName(@RequestParam(value = "UserName") String userName, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getActiveRolesByUserName");
        Page<GetActiveRolesByUserNameResponse> _result = queryService.executeGetActiveRolesByUserName(userName, pageable);
        LOGGER.debug("got the result for named query: getActiveRolesByUserName, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getActiveRolesByUserName")
    @RequestMapping(value = "/queries/getActiveRolesByUserName/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetActiveRolesByUserName(@RequestParam(value = "UserName") String userName, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getActiveRolesByUserName");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getActiveRolesByUserName";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetActiveRolesByUserName(userName,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/searchUsers", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Search Users")
    public Page<SearchUsersResponse> executeSearchUsers(@RequestParam(value = "userCriteria", required = false) String userCriteria, @RequestParam(value = "teamID", required = false) String teamId, @RequestParam(value = "role", required = false) String role, @RequestParam(value = "work_category", required = false) String workCategory, @RequestParam(value = "managerId", required = false) String managerId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: searchUsers");
        Page<SearchUsersResponse> _result = queryService.executeSearchUsers(userCriteria, teamId, role, workCategory, managerId, pageable);
        LOGGER.debug("got the result for named query: searchUsers, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query searchUsers")
    @RequestMapping(value = "/queries/searchUsers/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSearchUsers(@RequestParam(value = "userCriteria", required = false) String userCriteria, @RequestParam(value = "teamID", required = false) String teamId, @RequestParam(value = "role", required = false) String role, @RequestParam(value = "work_category", required = false) String workCategory, @RequestParam(value = "managerId", required = false) String managerId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: searchUsers");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "searchUsers";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSearchUsers(userCriteria, teamId, role, workCategory, managerId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/deleteGroupRole", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deleteGroupRole")
    public IntegerWrapper executeDeleteGroupRole(@RequestParam(value = "GroupId") String groupId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteGroupRole");
        Integer _result = queryService.executeDeleteGroupRole(groupId);
        LOGGER.debug("got the result for named query: deleteGroupRole, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getLoggedInUserTeam", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This query is used to retrieve the logged in user team Id")
    public GetLoggedInUserTeamResponse executeGetLoggedInUserTeam(@RequestParam(value = "userId") Integer userId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getLoggedInUserTeam");
        GetLoggedInUserTeamResponse _result = queryService.executeGetLoggedInUserTeam(userId);
        LOGGER.debug("got the result for named query: getLoggedInUserTeam, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/deleteUserRole", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deleteUserRole")
    public IntegerWrapper executeDeleteUserRole(@RequestParam(value = "roleId") String roleId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteUserRole");
        Integer _result = queryService.executeDeleteUserRole(roleId);
        LOGGER.debug("got the result for named query: deleteUserRole, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getPermissionByRoleId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getPermissionByRoleId")
    public Page<GetPermissionByRoleIdResponse> executeGetPermissionByRoleId(@RequestParam(value = "RoleId") String roleId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getPermissionByRoleId");
        Page<GetPermissionByRoleIdResponse> _result = queryService.executeGetPermissionByRoleId(roleId, pageable);
        LOGGER.debug("got the result for named query: getPermissionByRoleId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getPermissionByRoleId")
    @RequestMapping(value = "/queries/getPermissionByRoleId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetPermissionByRoleId(@RequestParam(value = "RoleId") String roleId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getPermissionByRoleId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getPermissionByRoleId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetPermissionByRoleId(roleId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Query_GetDomainValueByIdWithActiveFlag", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query_GetDomainValueByIdWithActiveFlag")
    public Page<QueryGetDomainValueByIdWithActiveFlagResponse> executeQuery_GetDomainValueByIdWithActiveFlag(@RequestParam(value = "selectedLocale") String selectedLocale, @RequestParam(value = "domainValueId") Integer domainValueId, @RequestParam(value = "showAll", required = false) Boolean showAll, @RequestParam(value = "isActiveFlag", required = false) Boolean isActiveFlag, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Query_GetDomainValueByIdWithActiveFlag");
        Page<QueryGetDomainValueByIdWithActiveFlagResponse> _result = queryService.executeQuery_GetDomainValueByIdWithActiveFlag(selectedLocale, domainValueId, showAll, isActiveFlag, pageable);
        LOGGER.debug("got the result for named query: Query_GetDomainValueByIdWithActiveFlag, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Query_GetDomainValueByIdWithActiveFlag")
    @RequestMapping(value = "/queries/Query_GetDomainValueByIdWithActiveFlag/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQuery_GetDomainValueByIdWithActiveFlag(@RequestParam(value = "selectedLocale") String selectedLocale, @RequestParam(value = "domainValueId") Integer domainValueId, @RequestParam(value = "showAll", required = false) Boolean showAll, @RequestParam(value = "isActiveFlag", required = false) Boolean isActiveFlag, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Query_GetDomainValueByIdWithActiveFlag");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Query_GetDomainValueByIdWithActiveFlag";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQuery_GetDomainValueByIdWithActiveFlag(selectedLocale, domainValueId, showAll, isActiveFlag,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getLatestNotes", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getLatestNotes")
    public Page<GetLatestNotesResponse> executeGetLatestNotes(@RequestParam(value = "entityId") String entityId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getLatestNotes");
        Page<GetLatestNotesResponse> _result = queryService.executeGetLatestNotes(entityId, pageable);
        LOGGER.debug("got the result for named query: getLatestNotes, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getLatestNotes")
    @RequestMapping(value = "/queries/getLatestNotes/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetLatestNotes(@RequestParam(value = "entityId") String entityId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getLatestNotes");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getLatestNotes";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetLatestNotes(entityId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getAllRolePermission", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getAllRolePermission")
    public Page<GetAllRolePermissionResponse> executeGetAllRolePermission(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getAllRolePermission");
        Page<GetAllRolePermissionResponse> _result = queryService.executeGetAllRolePermission(pageable);
        LOGGER.debug("got the result for named query: getAllRolePermission, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getAllRolePermission")
    @RequestMapping(value = "/queries/getAllRolePermission/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetAllRolePermission(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getAllRolePermission");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getAllRolePermission";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetAllRolePermission( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/deleteTeamManager", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deleteTeamManager")
    public IntegerWrapper executeDeleteTeamManager(@RequestParam(value = "teamId") String teamId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteTeamManager");
        Integer _result = queryService.executeDeleteTeamManager(teamId);
        LOGGER.debug("got the result for named query: deleteTeamManager, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/getDocumentByDocId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This query is used to return the document from ENTITY_DOCUMENTS table using docId")
    public Page<GetDocumentByDocIdResponse> executeGetDocumentByDocId(@RequestParam(value = "docId") Integer docId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getDocumentByDocId");
        Page<GetDocumentByDocIdResponse> _result = queryService.executeGetDocumentByDocId(docId, pageable);
        LOGGER.debug("got the result for named query: getDocumentByDocId, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/{id}/content/{_fieldName_}");
        for(GetDocumentByDocIdResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(2);
            _properties.put("id", _content.getId());
            _properties.put("_fieldName_", "document");
            if(_content.getDocument() != null) {
                _content.setDocument(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setDocument(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property document in query getDocumentByDocId")
    @RequestMapping(value = "/queries/getDocumentByDocId/{id}/content/document", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getDocumentContentForGetDocumentByDocId(@PathVariable("id") Long id, @RequestParam(value = "docId") Integer docId, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getDocumentByDocId");

        InputStream _result = queryService.getDocumentContentForGetDocumentByDocId(id, docId);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file url for query getDocumentByDocId")
    @RequestMapping(value = "/queries/getDocumentByDocId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetDocumentByDocId(@RequestParam(value = "docId") Integer docId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getDocumentByDocId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getDocumentByDocId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetDocumentByDocId(docId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getDvTypeById", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getDvTypeById")
    public Page<GetDvTypeByIdResponse> executeGetDvTypeById(@RequestParam(value = "id") Integer id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getDvTypeById");
        Page<GetDvTypeByIdResponse> _result = queryService.executeGetDvTypeById(id, pageable);
        LOGGER.debug("got the result for named query: getDvTypeById, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getDvTypeById")
    @RequestMapping(value = "/queries/getDvTypeById/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetDvTypeById(@RequestParam(value = "id") Integer id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getDvTypeById");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getDvTypeById";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetDvTypeById(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Query_ActivityLog", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query_ActivityLog")
    public Page<QueryActivityLogResponse> executeQuery_ActivityLog(@RequestParam(value = "userLocale", required = false) String userLocale, @RequestParam(value = "applicationNumber", required = false) String applicationNumber, @RequestParam(value = "activityType", required = false) Integer activityType, @RequestParam(value = "activityName", required = false) String activityName, @RequestParam(value = "isAppHistory", required = false) Boolean isAppHistory, @RequestParam(value = "createdDateStart", required = false) Timestamp createdDateStart, @RequestParam(value = "createdDateEnd", required = false) Timestamp createdDateEnd, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Query_ActivityLog");
        Page<QueryActivityLogResponse> _result = queryService.executeQuery_ActivityLog(userLocale, applicationNumber, activityType, activityName, isAppHistory, createdDateStart, createdDateEnd, pageable);
        LOGGER.debug("got the result for named query: Query_ActivityLog, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Query_ActivityLog")
    @RequestMapping(value = "/queries/Query_ActivityLog/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQuery_ActivityLog(@RequestParam(value = "userLocale", required = false) String userLocale, @RequestParam(value = "applicationNumber", required = false) String applicationNumber, @RequestParam(value = "activityType", required = false) Integer activityType, @RequestParam(value = "activityName", required = false) String activityName, @RequestParam(value = "isAppHistory", required = false) Boolean isAppHistory, @RequestParam(value = "createdDateStart", required = false) Timestamp createdDateStart, @RequestParam(value = "createdDateEnd", required = false) Timestamp createdDateEnd, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Query_ActivityLog");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Query_ActivityLog";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQuery_ActivityLog(userLocale, applicationNumber, activityType, activityName, isAppHistory, createdDateStart, createdDateEnd,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getGroupByUserId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getGroupByUserId")
    public Page<GetGroupByUserIdResponse> executeGetGroupByUserId(@RequestParam(value = "UserId") String userId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getGroupByUserId");
        Page<GetGroupByUserIdResponse> _result = queryService.executeGetGroupByUserId(userId, pageable);
        LOGGER.debug("got the result for named query: getGroupByUserId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getGroupByUserId")
    @RequestMapping(value = "/queries/getGroupByUserId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetGroupByUserId(@RequestParam(value = "UserId") String userId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getGroupByUserId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getGroupByUserId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetGroupByUserId(userId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getRoleByUserId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getRoleByUserId")
    public Page<GetRoleByUserIdResponse> executeGetRoleByUserId(@RequestParam(value = "UserId") String userId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getRoleByUserId");
        Page<GetRoleByUserIdResponse> _result = queryService.executeGetRoleByUserId(userId, pageable);
        LOGGER.debug("got the result for named query: getRoleByUserId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getRoleByUserId")
    @RequestMapping(value = "/queries/getRoleByUserId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetRoleByUserId(@RequestParam(value = "UserId") String userId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getRoleByUserId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getRoleByUserId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetRoleByUserId(userId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getTeamsAndAssociatedUsers", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getTeamsAndAssociatedUsers")
    public Page<GetTeamsAndAssociatedUsersResponse> executeGetTeamsAndAssociatedUsers(@RequestParam(value = "teamId") String teamId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getTeamsAndAssociatedUsers");
        Page<GetTeamsAndAssociatedUsersResponse> _result = queryService.executeGetTeamsAndAssociatedUsers(teamId, pageable);
        LOGGER.debug("got the result for named query: getTeamsAndAssociatedUsers, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getTeamsAndAssociatedUsers")
    @RequestMapping(value = "/queries/getTeamsAndAssociatedUsers/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetTeamsAndAssociatedUsers(@RequestParam(value = "teamId") String teamId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getTeamsAndAssociatedUsers");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getTeamsAndAssociatedUsers";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetTeamsAndAssociatedUsers(teamId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getTeaMnagerIdOnTeamId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getTeaMnagerIdOnTeamId")
    public Page<GetTeaMnagerIdOnTeamIdResponse> executeGetTeaMnagerIdOnTeamId(@RequestParam(value = "teamId") String teamId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getTeaMnagerIdOnTeamId");
        Page<GetTeaMnagerIdOnTeamIdResponse> _result = queryService.executeGetTeaMnagerIdOnTeamId(teamId, pageable);
        LOGGER.debug("got the result for named query: getTeaMnagerIdOnTeamId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getTeaMnagerIdOnTeamId")
    @RequestMapping(value = "/queries/getTeaMnagerIdOnTeamId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetTeaMnagerIdOnTeamId(@RequestParam(value = "teamId") String teamId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getTeaMnagerIdOnTeamId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getTeaMnagerIdOnTeamId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetTeaMnagerIdOnTeamId(teamId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/DVSearchByCodeAndDescription", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "DVSearchByCodeAndDescription")
    public Page<DvsearchByCodeAndDescriptionResponse> executeDVSearchByCodeAndDescription(@RequestParam(value = "defaultLocale") String defaultLocale, @RequestParam(value = "domainValueTypeId") String domainValueTypeId, @RequestParam(value = "showAll") Boolean showAll, @RequestParam(value = "isActiveFlag") Boolean isActiveFlag, @RequestParam(value = "searchValue") String searchValue, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: DVSearchByCodeAndDescription");
        Page<DvsearchByCodeAndDescriptionResponse> _result = queryService.executeDVSearchByCodeAndDescription(defaultLocale, domainValueTypeId, showAll, isActiveFlag, searchValue, pageable);
        LOGGER.debug("got the result for named query: DVSearchByCodeAndDescription, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query DVSearchByCodeAndDescription")
    @RequestMapping(value = "/queries/DVSearchByCodeAndDescription/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportDVSearchByCodeAndDescription(@RequestParam(value = "defaultLocale") String defaultLocale, @RequestParam(value = "domainValueTypeId") String domainValueTypeId, @RequestParam(value = "showAll") Boolean showAll, @RequestParam(value = "isActiveFlag") Boolean isActiveFlag, @RequestParam(value = "searchValue") String searchValue, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: DVSearchByCodeAndDescription");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "DVSearchByCodeAndDescription";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportDVSearchByCodeAndDescription(defaultLocale, domainValueTypeId, showAll, isActiveFlag, searchValue,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Query_GetAllDVsByDVTypeWithActiveFlag", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query_GetAllDVsByDVTypeWithActiveFlag")
    public Page<QueryGetAllDvsByDvtypeWithActiveFlagResponse> executeQuery_GetAllDVsByDVTypeWithActiveFlag(@RequestParam(value = "selectedLocale") String selectedLocale, @RequestParam(value = "domainValueTypeCode") String domainValueTypeCode, @RequestParam(value = "showAll") Boolean showAll, @RequestParam(value = "isActiveFlag") Boolean isActiveFlag, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Query_GetAllDVsByDVTypeWithActiveFlag");
        Page<QueryGetAllDvsByDvtypeWithActiveFlagResponse> _result = queryService.executeQuery_GetAllDVsByDVTypeWithActiveFlag(selectedLocale, domainValueTypeCode, showAll, isActiveFlag, pageable);
        LOGGER.debug("got the result for named query: Query_GetAllDVsByDVTypeWithActiveFlag, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Query_GetAllDVsByDVTypeWithActiveFlag")
    @RequestMapping(value = "/queries/Query_GetAllDVsByDVTypeWithActiveFlag/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQuery_GetAllDVsByDVTypeWithActiveFlag(@RequestParam(value = "selectedLocale") String selectedLocale, @RequestParam(value = "domainValueTypeCode") String domainValueTypeCode, @RequestParam(value = "showAll") Boolean showAll, @RequestParam(value = "isActiveFlag") Boolean isActiveFlag, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Query_GetAllDVsByDVTypeWithActiveFlag");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Query_GetAllDVsByDVTypeWithActiveFlag";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQuery_GetAllDVsByDVTypeWithActiveFlag(selectedLocale, domainValueTypeCode, showAll, isActiveFlag,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getManagerNameByTeamId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getManagerNameByTeamId")
    public Page<GetManagerNameByTeamIdResponse> executeGetManagerNameByTeamId(@RequestParam(value = "teamId") String teamId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getManagerNameByTeamId");
        Page<GetManagerNameByTeamIdResponse> _result = queryService.executeGetManagerNameByTeamId(teamId, pageable);
        LOGGER.debug("got the result for named query: getManagerNameByTeamId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getManagerNameByTeamId")
    @RequestMapping(value = "/queries/getManagerNameByTeamId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetManagerNameByTeamId(@RequestParam(value = "teamId") String teamId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getManagerNameByTeamId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getManagerNameByTeamId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetManagerNameByTeamId(teamId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getManagerByTeamName", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getManagerByTeamName")
    public Page<GetManagerByTeamNameResponse> executeGetManagerByTeamName(@RequestParam(value = "teamId") String teamId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getManagerByTeamName");
        Page<GetManagerByTeamNameResponse> _result = queryService.executeGetManagerByTeamName(teamId, pageable);
        LOGGER.debug("got the result for named query: getManagerByTeamName, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getManagerByTeamName")
    @RequestMapping(value = "/queries/getManagerByTeamName/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetManagerByTeamName(@RequestParam(value = "teamId") String teamId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getManagerByTeamName");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getManagerByTeamName";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetManagerByTeamName(teamId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getWorkCategoryByUserId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getting work category by Id for user profile page")
    public Page<GetWorkCategoryByUserIdResponse> executeGetWorkCategoryByUserId(@RequestParam(value = "userId") String userId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getWorkCategoryByUserId");
        Page<GetWorkCategoryByUserIdResponse> _result = queryService.executeGetWorkCategoryByUserId(userId, pageable);
        LOGGER.debug("got the result for named query: getWorkCategoryByUserId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getWorkCategoryByUserId")
    @RequestMapping(value = "/queries/getWorkCategoryByUserId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetWorkCategoryByUserId(@RequestParam(value = "userId") String userId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getWorkCategoryByUserId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getWorkCategoryByUserId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetWorkCategoryByUserId(userId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/deleteTeamUser", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deleteTeamUser")
    public IntegerWrapper executeDeleteTeamUser(@RequestParam(value = "teamId") Integer teamId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteTeamUser");
        Integer _result = queryService.executeDeleteTeamUser(teamId);
        LOGGER.debug("got the result for named query: deleteTeamUser, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getTeamManagerByRoleId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getTeamManagerByRoleId")
    public Page<GetTeamManagerByRoleIdResponse> executeGetTeamManagerByRoleId(@RequestParam(value = "roleId") Integer roleId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getTeamManagerByRoleId");
        Page<GetTeamManagerByRoleIdResponse> _result = queryService.executeGetTeamManagerByRoleId(roleId, pageable);
        LOGGER.debug("got the result for named query: getTeamManagerByRoleId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getTeamManagerByRoleId")
    @RequestMapping(value = "/queries/getTeamManagerByRoleId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetTeamManagerByRoleId(@RequestParam(value = "roleId") Integer roleId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getTeamManagerByRoleId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getTeamManagerByRoleId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetTeamManagerByRoleId(roleId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getRolesByGroupId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getRolesByGroupId")
    public Page<GetRolesByGroupIdResponse> executeGetRolesByGroupId(@RequestParam(value = "GroupId") String groupId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getRolesByGroupId");
        Page<GetRolesByGroupIdResponse> _result = queryService.executeGetRolesByGroupId(groupId, pageable);
        LOGGER.debug("got the result for named query: getRolesByGroupId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getRolesByGroupId")
    @RequestMapping(value = "/queries/getRolesByGroupId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetRolesByGroupId(@RequestParam(value = "GroupId") String groupId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getRolesByGroupId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getRolesByGroupId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetRolesByGroupId(groupId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/deleteGroupUser", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deleteGroupUser")
    public IntegerWrapper executeDeleteGroupUser(@RequestParam(value = "GroupId") String groupId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteGroupUser");
        Integer _result = queryService.executeDeleteGroupUser(groupId);
        LOGGER.debug("got the result for named query: deleteGroupUser, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getUserListByTeamId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This query is used to retrieve the user list using Team Id")
    public Page<GetUserListByTeamIdResponse> executeGetUserListByTeamId(@RequestParam(value = "teamid", required = false) String teamid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getUserListByTeamId");
        Page<GetUserListByTeamIdResponse> _result = queryService.executeGetUserListByTeamId(teamid, pageable);
        LOGGER.debug("got the result for named query: getUserListByTeamId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getUserListByTeamId")
    @RequestMapping(value = "/queries/getUserListByTeamId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetUserListByTeamId(@RequestParam(value = "teamid", required = false) String teamid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getUserListByTeamId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getUserListByTeamId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetUserListByTeamId(teamid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Query_updateUserDetails", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query_updateUserDetails")
    public IntegerWrapper executeQuery_updateUserDetails(@Valid @RequestBody QueryUpdateUserDetailsRequest queryUpdateUserDetailsRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Query_updateUserDetails");
        Integer _result = queryService.executeQuery_updateUserDetails(queryUpdateUserDetailsRequest);
        LOGGER.debug("got the result for named query: Query_updateUserDetails, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/Query_GetAllDomainValueWithOneParent", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query_GetAllDomainValueWithOneParent")
    public Page<QueryGetAllDomainValueWithOneParentResponse> executeQuery_GetAllDomainValueWithOneParent(@RequestParam(value = "suppliedLocale") String suppliedLocale, @RequestParam(value = "domainValueTypeCode") String domainValueTypeCode, @RequestParam(value = "parent1DomainValueId") Integer parent1domainValueId, @RequestParam(value = "dvDescription", required = false) String dvDescription, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Query_GetAllDomainValueWithOneParent");
        Page<QueryGetAllDomainValueWithOneParentResponse> _result = queryService.executeQuery_GetAllDomainValueWithOneParent(suppliedLocale, domainValueTypeCode, parent1domainValueId, dvDescription, pageable);
        LOGGER.debug("got the result for named query: Query_GetAllDomainValueWithOneParent, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Query_GetAllDomainValueWithOneParent")
    @RequestMapping(value = "/queries/Query_GetAllDomainValueWithOneParent/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQuery_GetAllDomainValueWithOneParent(@RequestParam(value = "suppliedLocale") String suppliedLocale, @RequestParam(value = "domainValueTypeCode") String domainValueTypeCode, @RequestParam(value = "parent1DomainValueId") Integer parent1domainValueId, @RequestParam(value = "dvDescription", required = false) String dvDescription, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Query_GetAllDomainValueWithOneParent");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Query_GetAllDomainValueWithOneParent";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQuery_GetAllDomainValueWithOneParent(suppliedLocale, domainValueTypeCode, parent1domainValueId, dvDescription,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getWorkCategoriesByEmpId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This query is used to get the workcategories by EmpId")
    public Page<GetWorkCategoriesByEmpIdResponse> executeGetWorkCategoriesByEmpId(@RequestParam(value = "emplId", required = false) String emplId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getWorkCategoriesByEmpId");
        Page<GetWorkCategoriesByEmpIdResponse> _result = queryService.executeGetWorkCategoriesByEmpId(emplId, pageable);
        LOGGER.debug("got the result for named query: getWorkCategoriesByEmpId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getWorkCategoriesByEmpId")
    @RequestMapping(value = "/queries/getWorkCategoriesByEmpId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetWorkCategoriesByEmpId(@RequestParam(value = "emplId", required = false) String emplId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getWorkCategoriesByEmpId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getWorkCategoriesByEmpId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetWorkCategoriesByEmpId(emplId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Query_DeleteAllErrorsByApplicationId", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query_DeleteAllErrorsByApplicationId")
    public IntegerWrapper executeQuery_DeleteAllErrorsByApplicationId(@RequestParam(value = "applicationId") String applicationId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Query_DeleteAllErrorsByApplicationId");
        Integer _result = queryService.executeQuery_DeleteAllErrorsByApplicationId(applicationId);
        LOGGER.debug("got the result for named query: Query_DeleteAllErrorsByApplicationId, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getPermissionByUserId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getPermissionByUserId")
    public Page<GetPermissionByUserIdResponse> executeGetPermissionByUserId(@RequestParam(value = "UserId") String userId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getPermissionByUserId");
        Page<GetPermissionByUserIdResponse> _result = queryService.executeGetPermissionByUserId(userId, pageable);
        LOGGER.debug("got the result for named query: getPermissionByUserId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getPermissionByUserId")
    @RequestMapping(value = "/queries/getPermissionByUserId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetPermissionByUserId(@RequestParam(value = "UserId") String userId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getPermissionByUserId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getPermissionByUserId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetPermissionByUserId(userId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getTeamManagerName", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getTeamManagerName")
    public Page<GetTeamManagerNameResponse> executeGetTeamManagerName(@RequestParam(value = "roles") String roles, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getTeamManagerName");
        Page<GetTeamManagerNameResponse> _result = queryService.executeGetTeamManagerName(roles, pageable);
        LOGGER.debug("got the result for named query: getTeamManagerName, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getTeamManagerName")
    @RequestMapping(value = "/queries/getTeamManagerName/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetTeamManagerName(@RequestParam(value = "roles") String roles, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getTeamManagerName");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getTeamManagerName";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetTeamManagerName(roles,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getWorkCtegoryByCode", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Sql query to get code from DomainValue as Work Category")
    public Page<GetWorkCtegoryByCodeResponse> executeGetWorkCtegoryByCode(@RequestParam(value = "workCategory") String workCategory, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getWorkCtegoryByCode");
        Page<GetWorkCtegoryByCodeResponse> _result = queryService.executeGetWorkCtegoryByCode(workCategory, pageable);
        LOGGER.debug("got the result for named query: getWorkCtegoryByCode, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getWorkCtegoryByCode")
    @RequestMapping(value = "/queries/getWorkCtegoryByCode/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetWorkCtegoryByCode(@RequestParam(value = "workCategory") String workCategory, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getWorkCtegoryByCode");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getWorkCtegoryByCode";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetWorkCtegoryByCode(workCategory,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Query_GetQueuesByUserId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query_GetQueuesByUserId")
    public Page<QueryGetQueuesByUserIdResponse> executeQuery_GetQueuesByUserId(@RequestParam(value = "userId") Integer userId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Query_GetQueuesByUserId");
        Page<QueryGetQueuesByUserIdResponse> _result = queryService.executeQuery_GetQueuesByUserId(userId, pageable);
        LOGGER.debug("got the result for named query: Query_GetQueuesByUserId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Query_GetQueuesByUserId")
    @RequestMapping(value = "/queries/Query_GetQueuesByUserId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQuery_GetQueuesByUserId(@RequestParam(value = "userId") Integer userId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Query_GetQueuesByUserId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Query_GetQueuesByUserId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQuery_GetQueuesByUserId(userId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getUserByEmplId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getUserByEmplId")
    public Page<GetUserByEmplIdResponse> executeGetUserByEmplId(@RequestParam(value = "emplid") String emplid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getUserByEmplId");
        Page<GetUserByEmplIdResponse> _result = queryService.executeGetUserByEmplId(emplid, pageable);
        LOGGER.debug("got the result for named query: getUserByEmplId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getUserByEmplId")
    @RequestMapping(value = "/queries/getUserByEmplId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetUserByEmplId(@RequestParam(value = "emplid") String emplid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getUserByEmplId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getUserByEmplId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetUserByEmplId(emplid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/deleteRolePermission", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deleteRolePermission")
    public IntegerWrapper executeDeleteRolePermission(@RequestParam(value = "RoleId") String roleId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteRolePermission");
        Integer _result = queryService.executeDeleteRolePermission(roleId);
        LOGGER.debug("got the result for named query: deleteRolePermission, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/QueueUnLock", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "QueueUnLock")
    public IntegerWrapper executeQueueUnLock(@Valid @RequestBody QueueUnLockRequest queueUnLockRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QueueUnLock");
        Integer _result = queryService.executeQueueUnLock(queueUnLockRequest);
        LOGGER.debug("got the result for named query: QueueUnLock, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/deleteGroupRoleByRoleId", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deleteGroupRoleByRoleId")
    public IntegerWrapper executeDeleteGroupRoleByRoleId(@RequestParam(value = "RoleId") String roleId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteGroupRoleByRoleId");
        Integer _result = queryService.executeDeleteGroupRoleByRoleId(roleId);
        LOGGER.debug("got the result for named query: deleteGroupRoleByRoleId, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/Query_GetDomainValueById", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query_GetDomainValueById")
    public Page<QueryGetDomainValueByIdResponse> executeQuery_GetDomainValueById(@RequestParam(value = "selectedLocale") String selectedLocale, @RequestParam(value = "domainValueId") Integer domainValueId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Query_GetDomainValueById");
        Page<QueryGetDomainValueByIdResponse> _result = queryService.executeQuery_GetDomainValueById(selectedLocale, domainValueId, pageable);
        LOGGER.debug("got the result for named query: Query_GetDomainValueById, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Query_GetDomainValueById")
    @RequestMapping(value = "/queries/Query_GetDomainValueById/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQuery_GetDomainValueById(@RequestParam(value = "selectedLocale") String selectedLocale, @RequestParam(value = "domainValueId") Integer domainValueId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Query_GetDomainValueById");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Query_GetDomainValueById";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQuery_GetDomainValueById(selectedLocale, domainValueId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getRolesPermission", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getRolesPermission")
    public Page<GetRolesPermissionResponse> executeGetRolesPermission(@RequestParam(value = "RoleId") String roleId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getRolesPermission");
        Page<GetRolesPermissionResponse> _result = queryService.executeGetRolesPermission(roleId, pageable);
        LOGGER.debug("got the result for named query: getRolesPermission, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getRolesPermission")
    @RequestMapping(value = "/queries/getRolesPermission/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetRolesPermission(@RequestParam(value = "RoleId") String roleId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getRolesPermission");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getRolesPermission";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetRolesPermission(roleId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getManagerBasedOnTeamId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getManagerBasedOnTeamId")
    public Page<GetManagerBasedOnTeamIdResponse> executeGetManagerBasedOnTeamId(@RequestParam(value = "teamId") String teamId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getManagerBasedOnTeamId");
        Page<GetManagerBasedOnTeamIdResponse> _result = queryService.executeGetManagerBasedOnTeamId(teamId, pageable);
        LOGGER.debug("got the result for named query: getManagerBasedOnTeamId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getManagerBasedOnTeamId")
    @RequestMapping(value = "/queries/getManagerBasedOnTeamId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetManagerBasedOnTeamId(@RequestParam(value = "teamId") String teamId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getManagerBasedOnTeamId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getManagerBasedOnTeamId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetManagerBasedOnTeamId(teamId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Query_GetAllDomainValuesTwoParent", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query_GetAllDomainValuesTwoParent")
    public Page<QueryGetAllDomainValuesTwoParentResponse> executeQuery_GetAllDomainValuesTwoParent(@RequestParam(value = "suppliedLocale") String suppliedLocale, @RequestParam(value = "domainValueTypeCode") String domainValueTypeCode, @RequestParam(value = "parent1DomainValueId") Integer parent1domainValueId, @RequestParam(value = "parent2DomainValueId") Integer parent2domainValueId, @RequestParam(value = "dvDescription", required = false) String dvDescription, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Query_GetAllDomainValuesTwoParent");
        Page<QueryGetAllDomainValuesTwoParentResponse> _result = queryService.executeQuery_GetAllDomainValuesTwoParent(suppliedLocale, domainValueTypeCode, parent1domainValueId, parent2domainValueId, dvDescription, pageable);
        LOGGER.debug("got the result for named query: Query_GetAllDomainValuesTwoParent, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Query_GetAllDomainValuesTwoParent")
    @RequestMapping(value = "/queries/Query_GetAllDomainValuesTwoParent/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQuery_GetAllDomainValuesTwoParent(@RequestParam(value = "suppliedLocale") String suppliedLocale, @RequestParam(value = "domainValueTypeCode") String domainValueTypeCode, @RequestParam(value = "parent1DomainValueId") Integer parent1domainValueId, @RequestParam(value = "parent2DomainValueId") Integer parent2domainValueId, @RequestParam(value = "dvDescription", required = false) String dvDescription, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Query_GetAllDomainValuesTwoParent");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Query_GetAllDomainValuesTwoParent";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQuery_GetAllDomainValuesTwoParent(suppliedLocale, domainValueTypeCode, parent1domainValueId, parent2domainValueId, dvDescription,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/deleteQueueGroup", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deleteQueueGroup")
    public IntegerWrapper executeDeleteQueueGroup(@RequestParam(value = "QueueId") String queueId, @RequestParam(value = "GroupId") String groupId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteQueueGroup");
        Integer _result = queryService.executeDeleteQueueGroup(queueId, groupId);
        LOGGER.debug("got the result for named query: deleteQueueGroup, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/Query_GetAllDomainValuesByDvTypeCode", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query_GetAllDomainValuesByDvTypeCode")
    public Page<QueryGetAllDomainValuesByDvTypeCodeResponse> executeQuery_GetAllDomainValuesByDvTypeCode(@RequestParam(value = "selectedLocale") String selectedLocale, @RequestParam(value = "domainValueTypeCode") String domainValueTypeCode, @RequestParam(value = "isAlphaSort") Boolean isAlphaSort, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Query_GetAllDomainValuesByDvTypeCode");
        Page<QueryGetAllDomainValuesByDvTypeCodeResponse> _result = queryService.executeQuery_GetAllDomainValuesByDvTypeCode(selectedLocale, domainValueTypeCode, isAlphaSort, pageable);
        LOGGER.debug("got the result for named query: Query_GetAllDomainValuesByDvTypeCode, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Query_GetAllDomainValuesByDvTypeCode")
    @RequestMapping(value = "/queries/Query_GetAllDomainValuesByDvTypeCode/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQuery_GetAllDomainValuesByDvTypeCode(@RequestParam(value = "selectedLocale") String selectedLocale, @RequestParam(value = "domainValueTypeCode") String domainValueTypeCode, @RequestParam(value = "isAlphaSort") Boolean isAlphaSort, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Query_GetAllDomainValuesByDvTypeCode");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Query_GetAllDomainValuesByDvTypeCode";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQuery_GetAllDomainValuesByDvTypeCode(selectedLocale, domainValueTypeCode, isAlphaSort,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getPermissionGroupByRoleId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getPermissionGroupByRoleId")
    public Page<GetPermissionGroupByRoleIdResponse> executeGetPermissionGroupByRoleId(@RequestParam(value = "RoleId") String roleId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getPermissionGroupByRoleId");
        Page<GetPermissionGroupByRoleIdResponse> _result = queryService.executeGetPermissionGroupByRoleId(roleId, pageable);
        LOGGER.debug("got the result for named query: getPermissionGroupByRoleId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getPermissionGroupByRoleId")
    @RequestMapping(value = "/queries/getPermissionGroupByRoleId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetPermissionGroupByRoleId(@RequestParam(value = "RoleId") String roleId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getPermissionGroupByRoleId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getPermissionGroupByRoleId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetPermissionGroupByRoleId(roleId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getSelectedTeamid", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getSelectedTeamid")
    public Page<GetSelectedTeamidResponse> executeGetSelectedTeamid(@RequestParam(value = "teamId") String teamId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getSelectedTeamid");
        Page<GetSelectedTeamidResponse> _result = queryService.executeGetSelectedTeamid(teamId, pageable);
        LOGGER.debug("got the result for named query: getSelectedTeamid, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getSelectedTeamid")
    @RequestMapping(value = "/queries/getSelectedTeamid/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetSelectedTeamid(@RequestParam(value = "teamId") String teamId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getSelectedTeamid");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getSelectedTeamid";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetSelectedTeamid(teamId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getGroupsRolesByUserId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getGroupsRolesByUserId")
    public Page<GetGroupsRolesByUserIdResponse> executeGetGroupsRolesByUserId(@RequestParam(value = "UserId") String userId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getGroupsRolesByUserId");
        Page<GetGroupsRolesByUserIdResponse> _result = queryService.executeGetGroupsRolesByUserId(userId, pageable);
        LOGGER.debug("got the result for named query: getGroupsRolesByUserId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getGroupsRolesByUserId")
    @RequestMapping(value = "/queries/getGroupsRolesByUserId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetGroupsRolesByUserId(@RequestParam(value = "UserId") String userId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getGroupsRolesByUserId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getGroupsRolesByUserId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetGroupsRolesByUserId(userId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getManagerByTeamId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getManagerByTeamId")
    public Page<GetManagerByTeamIdResponse> executeGetManagerByTeamId(@RequestParam(value = "teamId") String teamId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getManagerByTeamId");
        Page<GetManagerByTeamIdResponse> _result = queryService.executeGetManagerByTeamId(teamId, pageable);
        LOGGER.debug("got the result for named query: getManagerByTeamId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getManagerByTeamId")
    @RequestMapping(value = "/queries/getManagerByTeamId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetManagerByTeamId(@RequestParam(value = "teamId") String teamId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getManagerByTeamId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getManagerByTeamId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetManagerByTeamId(teamId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Query_GetDVByCodeAndTypeCodeWithActiveFlag", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query_GetDVByCodeAndTypeCodeWithActiveFlag")
    public Page<QueryGetDvbyCodeAndTypeCodeWithActiveFlagResponse> executeQuery_GetDVByCodeAndTypeCodeWithActiveFlag(@RequestParam(value = "selectedLocale") String selectedLocale, @RequestParam(value = "domainValueCode") String domainValueCode, @RequestParam(value = "domainValueTypeCode") String domainValueTypeCode, @RequestParam(value = "showAll") Boolean showAll, @RequestParam(value = "isActiveFlag") Boolean isActiveFlag, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Query_GetDVByCodeAndTypeCodeWithActiveFlag");
        Page<QueryGetDvbyCodeAndTypeCodeWithActiveFlagResponse> _result = queryService.executeQuery_GetDVByCodeAndTypeCodeWithActiveFlag(selectedLocale, domainValueCode, domainValueTypeCode, showAll, isActiveFlag, pageable);
        LOGGER.debug("got the result for named query: Query_GetDVByCodeAndTypeCodeWithActiveFlag, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Query_GetDVByCodeAndTypeCodeWithActiveFlag")
    @RequestMapping(value = "/queries/Query_GetDVByCodeAndTypeCodeWithActiveFlag/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQuery_GetDVByCodeAndTypeCodeWithActiveFlag(@RequestParam(value = "selectedLocale") String selectedLocale, @RequestParam(value = "domainValueCode") String domainValueCode, @RequestParam(value = "domainValueTypeCode") String domainValueTypeCode, @RequestParam(value = "showAll") Boolean showAll, @RequestParam(value = "isActiveFlag") Boolean isActiveFlag, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Query_GetDVByCodeAndTypeCodeWithActiveFlag");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Query_GetDVByCodeAndTypeCodeWithActiveFlag";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQuery_GetDVByCodeAndTypeCodeWithActiveFlag(selectedLocale, domainValueCode, domainValueTypeCode, showAll, isActiveFlag,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QueueLock", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "QueueLock")
    public IntegerWrapper executeQueueLock(@Valid @RequestBody QueueLockRequest queueLockRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QueueLock");
        Integer _result = queryService.executeQueueLock(queueLockRequest);
        LOGGER.debug("got the result for named query: QueueLock, result:{}", _result);
        return new IntegerWrapper(_result);
    }

}