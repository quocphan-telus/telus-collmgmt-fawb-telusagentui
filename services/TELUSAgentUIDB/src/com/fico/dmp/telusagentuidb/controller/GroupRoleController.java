/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.GroupRole;
import com.fico.dmp.telusagentuidb.service.GroupRoleService;


/**
 * Controller object for domain model class GroupRole.
 * @see GroupRole
 */
@RestController("TELUSAgentUIDB.GroupRoleController")
@Api(value = "GroupRoleController", description = "Exposes APIs to work with GroupRole resource.")
@RequestMapping("/TELUSAgentUIDB/GroupRole")
public class GroupRoleController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(GroupRoleController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.GroupRoleService")
	private GroupRoleService groupRoleService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new GroupRole instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroupRole createGroupRole(@RequestBody GroupRole groupRole) {
		LOGGER.debug("Create GroupRole with information: {}" , groupRole);

		groupRole = groupRoleService.create(groupRole);
		LOGGER.debug("Created GroupRole with information: {}" , groupRole);

	    return groupRole;
	}

    @ApiOperation(value = "Returns the GroupRole instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroupRole getGroupRole(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting GroupRole with id: {}" , id);

        GroupRole foundGroupRole = groupRoleService.getById(id);
        LOGGER.debug("GroupRole details with id: {}" , foundGroupRole);

        return foundGroupRole;
    }

    @ApiOperation(value = "Updates the GroupRole instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroupRole editGroupRole(@PathVariable("id") Integer id, @RequestBody GroupRole groupRole) {
        LOGGER.debug("Editing GroupRole with id: {}" , groupRole.getId());

        groupRole.setId(id);
        groupRole = groupRoleService.update(groupRole);
        LOGGER.debug("GroupRole details with id: {}" , groupRole);

        return groupRole;
    }

    @ApiOperation(value = "Deletes the GroupRole instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGroupRole(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting GroupRole with id: {}" , id);

        GroupRole deletedGroupRole = groupRoleService.delete(id);

        return deletedGroupRole != null;
    }

    @RequestMapping(value = "/groupId-roleId", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching GroupRole with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroupRole getByGroupIdAndRoleId(@RequestParam("groupId") Integer groupId, @RequestParam("roleId") Integer roleId) {
        LOGGER.debug("Getting GroupRole with uniques key GroupIdAndRoleId");
        return groupRoleService.getByGroupIdAndRoleId(groupId, roleId);
    }

    /**
     * @deprecated Use {@link #findGroupRoles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of GroupRole instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<GroupRole> searchGroupRolesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering GroupRoles list by query filter:{}", (Object) queryFilters);
        return groupRoleService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GroupRole instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GroupRole> findGroupRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GroupRoles list by filter:", query);
        return groupRoleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GroupRole instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<GroupRole> filterGroupRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GroupRoles list by filter", query);
        return groupRoleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportGroupRoles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return groupRoleService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGroupRolesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = GroupRole.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> groupRoleService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of GroupRole instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countGroupRoles( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting GroupRoles");
		return groupRoleService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getGroupRoleAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return groupRoleService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importGroupRoles(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing GroupRole table rows from csv");
        groupRoleService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GroupRoleService instance
	 */
	protected void setGroupRoleService(GroupRoleService service) {
		this.groupRoleService = service;
	}

}