/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.AuditDataChange;
import com.fico.dmp.telusagentuidb.Document;
import com.fico.dmp.telusagentuidb.DomainValue;
import com.fico.dmp.telusagentuidb.DomainValueType;
import com.fico.dmp.telusagentuidb.FawbPropertySource;
import com.fico.dmp.telusagentuidb.Group;
import com.fico.dmp.telusagentuidb.GroupRole;
import com.fico.dmp.telusagentuidb.Party;
import com.fico.dmp.telusagentuidb.Queue;
import com.fico.dmp.telusagentuidb.Role;
import com.fico.dmp.telusagentuidb.TeamUser;
import com.fico.dmp.telusagentuidb.User;
import com.fico.dmp.telusagentuidb.UserGroup;
import com.fico.dmp.telusagentuidb.UserRole;
import com.fico.dmp.telusagentuidb.service.UserService;


/**
 * Controller object for domain model class User.
 * @see User
 */
@RestController("TELUSAgentUIDB.UserController")
@Api(value = "UserController", description = "Exposes APIs to work with User resource.")
@RequestMapping("/TELUSAgentUIDB/User")
public class UserController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(UserController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.UserService")
	private UserService userService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new User instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public User createUser(@RequestBody User user) {
		LOGGER.debug("Create User with information: {}" , user);

		user = userService.create(user);
		LOGGER.debug("Created User with information: {}" , user);

	    return user;
	}

    @ApiOperation(value = "Returns the User instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public User getUser(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting User with id: {}" , id);

        User foundUser = userService.getById(id);
        LOGGER.debug("User details with id: {}" , foundUser);

        return foundUser;
    }

    @ApiOperation(value = "Updates the User instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public User editUser(@PathVariable("id") Integer id, @RequestBody User user) {
        LOGGER.debug("Editing User with id: {}" , user.getId());

        user.setId(id);
        user = userService.update(user);
        LOGGER.debug("User details with id: {}" , user);

        return user;
    }

    @ApiOperation(value = "Deletes the User instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUser(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting User with id: {}" , id);

        User deletedUser = userService.delete(id);

        return deletedUser != null;
    }

    @RequestMapping(value = "/email/{email}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching User with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public User getByEmail(@PathVariable("email") String email) {
        LOGGER.debug("Getting User with uniques key Email");
        return userService.getByEmail(email);
    }

    @RequestMapping(value = "/userId/{userId}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching User with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public User getByUserId(@PathVariable("userId") String userId) {
        LOGGER.debug("Getting User with uniques key UserId");
        return userService.getByUserId(userId);
    }

    /**
     * @deprecated Use {@link #findUsers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of User instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<User> searchUsersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Users list by query filter:{}", (Object) queryFilters);
        return userService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of User instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<User> findUsers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Users list by filter:", query);
        return userService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of User instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<User> filterUsers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Users list by filter", query);
        return userService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportUsers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportUsersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = User.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> userService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of User instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countUsers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Users");
		return userService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getUserAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importUsers(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing User table rows from csv");
        userService.importData(file);
    }

    @RequestMapping(value="/{id:.+}/rolesForCreatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the rolesForCreatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Role> findAssociatedRolesForCreatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated rolesForCreatedBy");
        return userService.findAssociatedRolesForCreatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/rolesForUpdatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the rolesForUpdatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Role> findAssociatedRolesForUpdatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated rolesForUpdatedBy");
        return userService.findAssociatedRolesForUpdatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/userGroupsForUpdatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the userGroupsForUpdatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserGroup> findAssociatedUserGroupsForUpdatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated userGroupsForUpdatedBy");
        return userService.findAssociatedUserGroupsForUpdatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/userGroupsForCreatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the userGroupsForCreatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserGroup> findAssociatedUserGroupsForCreatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated userGroupsForCreatedBy");
        return userService.findAssociatedUserGroupsForCreatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/userGroupsForUserId", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the userGroupsForUserId instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserGroup> findAssociatedUserGroupsForUserId(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated userGroupsForUserId");
        return userService.findAssociatedUserGroupsForUserId(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/teamUsers", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the teamUsers instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TeamUser> findAssociatedTeamUsers(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated teamUsers");
        return userService.findAssociatedTeamUsers(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/groupRolesForUpdatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the groupRolesForUpdatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GroupRole> findAssociatedGroupRolesForUpdatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated groupRolesForUpdatedBy");
        return userService.findAssociatedGroupRolesForUpdatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/groupRolesForCreatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the groupRolesForCreatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GroupRole> findAssociatedGroupRolesForCreatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated groupRolesForCreatedBy");
        return userService.findAssociatedGroupRolesForCreatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/domainValuesForCreatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the domainValuesForCreatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DomainValue> findAssociatedDomainValuesForCreatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated domainValuesForCreatedBy");
        return userService.findAssociatedDomainValuesForCreatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/domainValuesForUpdatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the domainValuesForUpdatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DomainValue> findAssociatedDomainValuesForUpdatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated domainValuesForUpdatedBy");
        return userService.findAssociatedDomainValuesForUpdatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/domainValueTypesForCreatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the domainValueTypesForCreatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DomainValueType> findAssociatedDomainValueTypesForCreatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated domainValueTypesForCreatedBy");
        return userService.findAssociatedDomainValueTypesForCreatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/domainValueTypesForUpdatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the domainValueTypesForUpdatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DomainValueType> findAssociatedDomainValueTypesForUpdatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated domainValueTypesForUpdatedBy");
        return userService.findAssociatedDomainValueTypesForUpdatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/queuesForLockedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the queuesForLockedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Queue> findAssociatedQueuesForLockedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated queuesForLockedBy");
        return userService.findAssociatedQueuesForLockedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/queuesForUpdatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the queuesForUpdatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Queue> findAssociatedQueuesForUpdatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated queuesForUpdatedBy");
        return userService.findAssociatedQueuesForUpdatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/queuesForCreatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the queuesForCreatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Queue> findAssociatedQueuesForCreatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated queuesForCreatedBy");
        return userService.findAssociatedQueuesForCreatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/usersForUpdatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the usersForUpdatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<User> findAssociatedUsersForUpdatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated usersForUpdatedBy");
        return userService.findAssociatedUsersForUpdatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/usersForCreatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the usersForCreatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<User> findAssociatedUsersForCreatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated usersForCreatedBy");
        return userService.findAssociatedUsersForCreatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/partiesForUpdatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the partiesForUpdatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Party> findAssociatedPartiesForUpdatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated partiesForUpdatedBy");
        return userService.findAssociatedPartiesForUpdatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/partiesForCreatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the partiesForCreatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Party> findAssociatedPartiesForCreatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated partiesForCreatedBy");
        return userService.findAssociatedPartiesForCreatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/documentsForCreatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the documentsForCreatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Document> findAssociatedDocumentsForCreatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated documentsForCreatedBy");
        return userService.findAssociatedDocumentsForCreatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/documentsForUpdatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the documentsForUpdatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Document> findAssociatedDocumentsForUpdatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated documentsForUpdatedBy");
        return userService.findAssociatedDocumentsForUpdatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/auditDataChanges", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the auditDataChanges instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuditDataChange> findAssociatedAuditDataChanges(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated auditDataChanges");
        return userService.findAssociatedAuditDataChanges(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/fawbPropertySourcesForUpdatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the fawbPropertySourcesForUpdatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FawbPropertySource> findAssociatedFawbPropertySourcesForUpdatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated fawbPropertySourcesForUpdatedBy");
        return userService.findAssociatedFawbPropertySourcesForUpdatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/fawbPropertySourcesForCreatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the fawbPropertySourcesForCreatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FawbPropertySource> findAssociatedFawbPropertySourcesForCreatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated fawbPropertySourcesForCreatedBy");
        return userService.findAssociatedFawbPropertySourcesForCreatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/_groupsForUpdatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the _groupsForUpdatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Group> findAssociated_groupsForUpdatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated _groupsForUpdatedBy");
        return userService.findAssociated_groupsForUpdatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/_groupsForCreatedBy", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the _groupsForCreatedBy instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Group> findAssociated_groupsForCreatedBy(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated _groupsForCreatedBy");
        return userService.findAssociated_groupsForCreatedBy(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/userRoles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the userRoles instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserRole> findAssociatedUserRoles(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated userRoles");
        return userService.findAssociatedUserRoles(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserService instance
	 */
	protected void setUserService(UserService service) {
		this.userService = service;
	}

}