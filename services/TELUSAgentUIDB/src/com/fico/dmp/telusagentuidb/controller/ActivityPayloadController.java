/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.ActivityPayload;
import com.fico.dmp.telusagentuidb.service.ActivityPayloadService;


/**
 * Controller object for domain model class ActivityPayload.
 * @see ActivityPayload
 */
@RestController("TELUSAgentUIDB.ActivityPayloadController")
@Api(value = "ActivityPayloadController", description = "Exposes APIs to work with ActivityPayload resource.")
@RequestMapping("/TELUSAgentUIDB/ActivityPayload")
public class ActivityPayloadController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(ActivityPayloadController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.ActivityPayloadService")
	private ActivityPayloadService activityPayloadService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ActivityPayload instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActivityPayload createActivityPayload(@RequestPart("wm_data_json") ActivityPayload activityPayload, @RequestPart(value = "dataPayload", required = false) MultipartFile _dataPayload) {
		LOGGER.debug("Create ActivityPayload with information: {}" , activityPayload);

    activityPayload.setDataPayload(WMMultipartUtils.toByteArray(_dataPayload));
		activityPayload = activityPayloadService.create(activityPayload);
		LOGGER.debug("Created ActivityPayload with information: {}" , activityPayload);

	    return activityPayload;
	}

    @ApiOperation(value = "Returns the ActivityPayload instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActivityPayload getActivityPayload(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ActivityPayload with id: {}" , id);

        ActivityPayload foundActivityPayload = activityPayloadService.getById(id);
        LOGGER.debug("ActivityPayload details with id: {}" , foundActivityPayload);

        return foundActivityPayload;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in ActivityPayload instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getActivityPayloadBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in ActivityPayload instance" , fieldName);

        if(!WMRuntimeUtils.isLob(ActivityPayload.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        ActivityPayload activityPayload = activityPayloadService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(activityPayload, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the ActivityPayload instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActivityPayload editActivityPayload(@PathVariable("id") Integer id, @RequestBody ActivityPayload activityPayload) {
        LOGGER.debug("Editing ActivityPayload with id: {}" , activityPayload.getId());

        activityPayload.setId(id);
        activityPayload = activityPayloadService.update(activityPayload);
        LOGGER.debug("ActivityPayload details with id: {}" , activityPayload);

        return activityPayload;
    }

    @ApiOperation(value = "Updates the ActivityPayload instance associated with the given id.This API should be used when ActivityPayload instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActivityPayload editActivityPayload(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        ActivityPayload newActivityPayload = WMMultipartUtils.toObject(multipartHttpServletRequest, ActivityPayload.class, "TELUSAgentUIDB");
        newActivityPayload.setId(id);

        ActivityPayload oldActivityPayload = activityPayloadService.getById(id);
        WMMultipartUtils.updateLobsContent(oldActivityPayload, newActivityPayload);
        LOGGER.debug("Updating ActivityPayload with information: {}" , newActivityPayload);

        return activityPayloadService.update(newActivityPayload);
    }

    @ApiOperation(value = "Deletes the ActivityPayload instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteActivityPayload(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ActivityPayload with id: {}" , id);

        ActivityPayload deletedActivityPayload = activityPayloadService.delete(id);

        return deletedActivityPayload != null;
    }

    /**
     * @deprecated Use {@link #findActivityPayloads(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ActivityPayload instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<ActivityPayload> searchActivityPayloadsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ActivityPayloads list by query filter:{}", (Object) queryFilters);
        return activityPayloadService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ActivityPayload instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ActivityPayload> findActivityPayloads(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ActivityPayloads list by filter:", query);
        return activityPayloadService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ActivityPayload instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<ActivityPayload> filterActivityPayloads(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ActivityPayloads list by filter", query);
        return activityPayloadService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportActivityPayloads(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return activityPayloadService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportActivityPayloadsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ActivityPayload.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> activityPayloadService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ActivityPayload instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countActivityPayloads( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ActivityPayloads");
		return activityPayloadService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getActivityPayloadAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return activityPayloadService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importActivityPayloads(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing ActivityPayload table rows from csv");
        activityPayloadService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ActivityPayloadService instance
	 */
	protected void setActivityPayloadService(ActivityPayloadService service) {
		this.activityPayloadService = service;
	}

}