/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.Activity;
import com.fico.dmp.telusagentuidb.Document;
import com.fico.dmp.telusagentuidb.DomainValue;
import com.fico.dmp.telusagentuidb.DomainValueDescription;
import com.fico.dmp.telusagentuidb.DomainValueRelation;
import com.fico.dmp.telusagentuidb.Note;
import com.fico.dmp.telusagentuidb.Party;
import com.fico.dmp.telusagentuidb.Queue;
import com.fico.dmp.telusagentuidb.service.DomainValueService;


/**
 * Controller object for domain model class DomainValue.
 * @see DomainValue
 */
@RestController("TELUSAgentUIDB.DomainValueController")
@Api(value = "DomainValueController", description = "Exposes APIs to work with DomainValue resource.")
@RequestMapping("/TELUSAgentUIDB/DomainValue")
public class DomainValueController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(DomainValueController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.DomainValueService")
	private DomainValueService domainValueService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new DomainValue instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DomainValue createDomainValue(@RequestBody DomainValue domainValue) {
		LOGGER.debug("Create DomainValue with information: {}" , domainValue);

		domainValue = domainValueService.create(domainValue);
		LOGGER.debug("Created DomainValue with information: {}" , domainValue);

	    return domainValue;
	}

    @ApiOperation(value = "Returns the DomainValue instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DomainValue getDomainValue(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting DomainValue with id: {}" , id);

        DomainValue foundDomainValue = domainValueService.getById(id);
        LOGGER.debug("DomainValue details with id: {}" , foundDomainValue);

        return foundDomainValue;
    }

    @ApiOperation(value = "Updates the DomainValue instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DomainValue editDomainValue(@PathVariable("id") Integer id, @RequestBody DomainValue domainValue) {
        LOGGER.debug("Editing DomainValue with id: {}" , domainValue.getId());

        domainValue.setId(id);
        domainValue = domainValueService.update(domainValue);
        LOGGER.debug("DomainValue details with id: {}" , domainValue);

        return domainValue;
    }

    @ApiOperation(value = "Deletes the DomainValue instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDomainValue(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting DomainValue with id: {}" , id);

        DomainValue deletedDomainValue = domainValueService.delete(id);

        return deletedDomainValue != null;
    }

    /**
     * @deprecated Use {@link #findDomainValues(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DomainValue instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<DomainValue> searchDomainValuesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DomainValues list by query filter:{}", (Object) queryFilters);
        return domainValueService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DomainValue instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DomainValue> findDomainValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DomainValues list by filter:", query);
        return domainValueService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DomainValue instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<DomainValue> filterDomainValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DomainValues list by filter", query);
        return domainValueService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportDomainValues(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return domainValueService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportDomainValuesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = DomainValue.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> domainValueService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of DomainValue instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countDomainValues( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DomainValues");
		return domainValueService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getDomainValueAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return domainValueService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importDomainValues(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing DomainValue table rows from csv");
        domainValueService.importData(file);
    }

    @RequestMapping(value="/{id:.+}/notes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the notes instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Note> findAssociatedNotes(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated notes");
        return domainValueService.findAssociatedNotes(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/domainValueRelationsForParentDomainValueId1", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the domainValueRelationsForParentDomainValueId1 instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DomainValueRelation> findAssociatedDomainValueRelationsForParentDomainValueId1(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated domainValueRelationsForParentDomainValueId1");
        return domainValueService.findAssociatedDomainValueRelationsForParentDomainValueId1(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/domainValueRelationsForDomainValueId", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the domainValueRelationsForDomainValueId instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DomainValueRelation> findAssociatedDomainValueRelationsForDomainValueId(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated domainValueRelationsForDomainValueId");
        return domainValueService.findAssociatedDomainValueRelationsForDomainValueId(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/domainValueRelationsForParentDomainValueId2", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the domainValueRelationsForParentDomainValueId2 instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DomainValueRelation> findAssociatedDomainValueRelationsForParentDomainValueId2(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated domainValueRelationsForParentDomainValueId2");
        return domainValueService.findAssociatedDomainValueRelationsForParentDomainValueId2(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/domainValueDescriptions", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the domainValueDescriptions instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DomainValueDescription> findAssociatedDomainValueDescriptions(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated domainValueDescriptions");
        return domainValueService.findAssociatedDomainValueDescriptions(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/activitiesForApplicationStatus", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the activitiesForApplicationStatus instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Activity> findAssociatedActivitiesForApplicationStatus(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated activitiesForApplicationStatus");
        return domainValueService.findAssociatedActivitiesForApplicationStatus(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/activitiesForSource", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the activitiesForSource instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Activity> findAssociatedActivitiesForSource(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated activitiesForSource");
        return domainValueService.findAssociatedActivitiesForSource(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/activitiesForType", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the activitiesForType instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Activity> findAssociatedActivitiesForType(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated activitiesForType");
        return domainValueService.findAssociatedActivitiesForType(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/documentsForType", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the documentsForType instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Document> findAssociatedDocumentsForType(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated documentsForType");
        return domainValueService.findAssociatedDocumentsForType(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/documentsForDocumentLabel", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the documentsForDocumentLabel instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Document> findAssociatedDocumentsForDocumentLabel(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated documentsForDocumentLabel");
        return domainValueService.findAssociatedDocumentsForDocumentLabel(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/queuesForQueueResultPage", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the queuesForQueueResultPage instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Queue> findAssociatedQueuesForQueueResultPage(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated queuesForQueueResultPage");
        return domainValueService.findAssociatedQueuesForQueueResultPage(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/queuesForPersonalQueueField", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the queuesForPersonalQueueField instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Queue> findAssociatedQueuesForPersonalQueueField(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated queuesForPersonalQueueField");
        return domainValueService.findAssociatedQueuesForPersonalQueueField(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/parties", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the parties instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Party> findAssociatedParties(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated parties");
        return domainValueService.findAssociatedParties(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DomainValueService instance
	 */
	protected void setDomainValueService(DomainValueService service) {
		this.domainValueService = service;
	}

}