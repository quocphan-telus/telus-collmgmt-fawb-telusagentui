/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.QrtzCronTriggers;
import com.fico.dmp.telusagentuidb.QrtzCronTriggersId;
import com.fico.dmp.telusagentuidb.service.QrtzCronTriggersService;


/**
 * Controller object for domain model class QrtzCronTriggers.
 * @see QrtzCronTriggers
 */
@RestController("TELUSAgentUIDB.QrtzCronTriggersController")
@Api(value = "QrtzCronTriggersController", description = "Exposes APIs to work with QrtzCronTriggers resource.")
@RequestMapping("/TELUSAgentUIDB/QrtzCronTriggers")
public class QrtzCronTriggersController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzCronTriggersController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.QrtzCronTriggersService")
	private QrtzCronTriggersService qrtzCronTriggersService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new QrtzCronTriggers instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzCronTriggers createQrtzCronTriggers(@RequestBody QrtzCronTriggers qrtzCronTriggers) {
		LOGGER.debug("Create QrtzCronTriggers with information: {}" , qrtzCronTriggers);

		qrtzCronTriggers = qrtzCronTriggersService.create(qrtzCronTriggers);
		LOGGER.debug("Created QrtzCronTriggers with information: {}" , qrtzCronTriggers);

	    return qrtzCronTriggers;
	}

    @ApiOperation(value = "Returns the QrtzCronTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzCronTriggers getQrtzCronTriggers(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup) {

        QrtzCronTriggersId qrtzcrontriggersId = new QrtzCronTriggersId();
        qrtzcrontriggersId.setSchedName(schedName);
        qrtzcrontriggersId.setTriggerName(triggerName);
        qrtzcrontriggersId.setTriggerGroup(triggerGroup);

        LOGGER.debug("Getting QrtzCronTriggers with id: {}" , qrtzcrontriggersId);
        QrtzCronTriggers qrtzCronTriggers = qrtzCronTriggersService.getById(qrtzcrontriggersId);
        LOGGER.debug("QrtzCronTriggers details with id: {}" , qrtzCronTriggers);

        return qrtzCronTriggers;
    }



    @ApiOperation(value = "Updates the QrtzCronTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzCronTriggers editQrtzCronTriggers(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup, @RequestBody QrtzCronTriggers qrtzCronTriggers) {

        qrtzCronTriggers.setSchedName(schedName);
        qrtzCronTriggers.setTriggerName(triggerName);
        qrtzCronTriggers.setTriggerGroup(triggerGroup);

        LOGGER.debug("QrtzCronTriggers details with id is updated with: {}" , qrtzCronTriggers);

        return qrtzCronTriggersService.update(qrtzCronTriggers);
    }


    @ApiOperation(value = "Deletes the QrtzCronTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteQrtzCronTriggers(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup) {

        QrtzCronTriggersId qrtzcrontriggersId = new QrtzCronTriggersId();
        qrtzcrontriggersId.setSchedName(schedName);
        qrtzcrontriggersId.setTriggerName(triggerName);
        qrtzcrontriggersId.setTriggerGroup(triggerGroup);

        LOGGER.debug("Deleting QrtzCronTriggers with id: {}" , qrtzcrontriggersId);
        QrtzCronTriggers qrtzCronTriggers = qrtzCronTriggersService.delete(qrtzcrontriggersId);

        return qrtzCronTriggers != null;
    }


    /**
     * @deprecated Use {@link #findQrtzCronTriggers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of QrtzCronTriggers instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzCronTriggers> searchQrtzCronTriggersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering QrtzCronTriggers list by query filter:{}", (Object) queryFilters);
        return qrtzCronTriggersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzCronTriggers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<QrtzCronTriggers> findQrtzCronTriggers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzCronTriggers list by filter:", query);
        return qrtzCronTriggersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzCronTriggers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzCronTriggers> filterQrtzCronTriggers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzCronTriggers list by filter", query);
        return qrtzCronTriggersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportQrtzCronTriggers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return qrtzCronTriggersService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQrtzCronTriggersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = QrtzCronTriggers.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> qrtzCronTriggersService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of QrtzCronTriggers instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countQrtzCronTriggers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting QrtzCronTriggers");
		return qrtzCronTriggersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getQrtzCronTriggersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return qrtzCronTriggersService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importQrtzCronTriggerss(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing QrtzCronTriggers table rows from csv");
        qrtzCronTriggersService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service QrtzCronTriggersService instance
	 */
	protected void setQrtzCronTriggersService(QrtzCronTriggersService service) {
		this.qrtzCronTriggersService = service;
	}

}