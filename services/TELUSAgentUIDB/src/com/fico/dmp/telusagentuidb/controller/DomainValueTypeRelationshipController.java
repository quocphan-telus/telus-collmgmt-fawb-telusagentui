/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.DomainValueTypeRelationship;
import com.fico.dmp.telusagentuidb.service.DomainValueTypeRelationshipService;


/**
 * Controller object for domain model class DomainValueTypeRelationship.
 * @see DomainValueTypeRelationship
 */
@RestController("TELUSAgentUIDB.DomainValueTypeRelationshipController")
@Api(value = "DomainValueTypeRelationshipController", description = "Exposes APIs to work with DomainValueTypeRelationship resource.")
@RequestMapping("/TELUSAgentUIDB/DomainValueTypeRelationship")
public class DomainValueTypeRelationshipController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(DomainValueTypeRelationshipController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.DomainValueTypeRelationshipService")
	private DomainValueTypeRelationshipService domainValueTypeRelationshipService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new DomainValueTypeRelationship instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DomainValueTypeRelationship createDomainValueTypeRelationship(@RequestBody DomainValueTypeRelationship domainValueTypeRelationship) {
		LOGGER.debug("Create DomainValueTypeRelationship with information: {}" , domainValueTypeRelationship);

		domainValueTypeRelationship = domainValueTypeRelationshipService.create(domainValueTypeRelationship);
		LOGGER.debug("Created DomainValueTypeRelationship with information: {}" , domainValueTypeRelationship);

	    return domainValueTypeRelationship;
	}

    @ApiOperation(value = "Returns the DomainValueTypeRelationship instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DomainValueTypeRelationship getDomainValueTypeRelationship(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting DomainValueTypeRelationship with id: {}" , id);

        DomainValueTypeRelationship foundDomainValueTypeRelationship = domainValueTypeRelationshipService.getById(id);
        LOGGER.debug("DomainValueTypeRelationship details with id: {}" , foundDomainValueTypeRelationship);

        return foundDomainValueTypeRelationship;
    }

    @ApiOperation(value = "Updates the DomainValueTypeRelationship instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DomainValueTypeRelationship editDomainValueTypeRelationship(@PathVariable("id") Integer id, @RequestBody DomainValueTypeRelationship domainValueTypeRelationship) {
        LOGGER.debug("Editing DomainValueTypeRelationship with id: {}" , domainValueTypeRelationship.getId());

        domainValueTypeRelationship.setId(id);
        domainValueTypeRelationship = domainValueTypeRelationshipService.update(domainValueTypeRelationship);
        LOGGER.debug("DomainValueTypeRelationship details with id: {}" , domainValueTypeRelationship);

        return domainValueTypeRelationship;
    }

    @ApiOperation(value = "Deletes the DomainValueTypeRelationship instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDomainValueTypeRelationship(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting DomainValueTypeRelationship with id: {}" , id);

        DomainValueTypeRelationship deletedDomainValueTypeRelationship = domainValueTypeRelationshipService.delete(id);

        return deletedDomainValueTypeRelationship != null;
    }

    /**
     * @deprecated Use {@link #findDomainValueTypeRelationships(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DomainValueTypeRelationship instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<DomainValueTypeRelationship> searchDomainValueTypeRelationshipsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DomainValueTypeRelationships list by query filter:{}", (Object) queryFilters);
        return domainValueTypeRelationshipService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DomainValueTypeRelationship instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DomainValueTypeRelationship> findDomainValueTypeRelationships(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DomainValueTypeRelationships list by filter:", query);
        return domainValueTypeRelationshipService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DomainValueTypeRelationship instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<DomainValueTypeRelationship> filterDomainValueTypeRelationships(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DomainValueTypeRelationships list by filter", query);
        return domainValueTypeRelationshipService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportDomainValueTypeRelationships(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return domainValueTypeRelationshipService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportDomainValueTypeRelationshipsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = DomainValueTypeRelationship.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> domainValueTypeRelationshipService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of DomainValueTypeRelationship instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countDomainValueTypeRelationships( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DomainValueTypeRelationships");
		return domainValueTypeRelationshipService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getDomainValueTypeRelationshipAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return domainValueTypeRelationshipService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importDomainValueTypeRelationships(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing DomainValueTypeRelationship table rows from csv");
        domainValueTypeRelationshipService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DomainValueTypeRelationshipService instance
	 */
	protected void setDomainValueTypeRelationshipService(DomainValueTypeRelationshipService service) {
		this.domainValueTypeRelationshipService = service;
	}

}