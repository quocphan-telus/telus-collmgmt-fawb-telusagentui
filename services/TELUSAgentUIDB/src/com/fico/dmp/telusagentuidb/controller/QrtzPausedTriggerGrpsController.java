/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.QrtzPausedTriggerGrps;
import com.fico.dmp.telusagentuidb.QrtzPausedTriggerGrpsId;
import com.fico.dmp.telusagentuidb.service.QrtzPausedTriggerGrpsService;


/**
 * Controller object for domain model class QrtzPausedTriggerGrps.
 * @see QrtzPausedTriggerGrps
 */
@RestController("TELUSAgentUIDB.QrtzPausedTriggerGrpsController")
@Api(value = "QrtzPausedTriggerGrpsController", description = "Exposes APIs to work with QrtzPausedTriggerGrps resource.")
@RequestMapping("/TELUSAgentUIDB/QrtzPausedTriggerGrps")
public class QrtzPausedTriggerGrpsController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzPausedTriggerGrpsController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.QrtzPausedTriggerGrpsService")
	private QrtzPausedTriggerGrpsService qrtzPausedTriggerGrpsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new QrtzPausedTriggerGrps instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzPausedTriggerGrps createQrtzPausedTriggerGrps(@RequestBody QrtzPausedTriggerGrps qrtzPausedTriggerGrps) {
		LOGGER.debug("Create QrtzPausedTriggerGrps with information: {}" , qrtzPausedTriggerGrps);

		qrtzPausedTriggerGrps = qrtzPausedTriggerGrpsService.create(qrtzPausedTriggerGrps);
		LOGGER.debug("Created QrtzPausedTriggerGrps with information: {}" , qrtzPausedTriggerGrps);

	    return qrtzPausedTriggerGrps;
	}

    @ApiOperation(value = "Returns the QrtzPausedTriggerGrps instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzPausedTriggerGrps getQrtzPausedTriggerGrps(@RequestParam("schedName") String schedName, @RequestParam("triggerGroup") String triggerGroup) {

        QrtzPausedTriggerGrpsId qrtzpausedtriggergrpsId = new QrtzPausedTriggerGrpsId();
        qrtzpausedtriggergrpsId.setSchedName(schedName);
        qrtzpausedtriggergrpsId.setTriggerGroup(triggerGroup);

        LOGGER.debug("Getting QrtzPausedTriggerGrps with id: {}" , qrtzpausedtriggergrpsId);
        QrtzPausedTriggerGrps qrtzPausedTriggerGrps = qrtzPausedTriggerGrpsService.getById(qrtzpausedtriggergrpsId);
        LOGGER.debug("QrtzPausedTriggerGrps details with id: {}" , qrtzPausedTriggerGrps);

        return qrtzPausedTriggerGrps;
    }



    @ApiOperation(value = "Updates the QrtzPausedTriggerGrps instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzPausedTriggerGrps editQrtzPausedTriggerGrps(@RequestParam("schedName") String schedName, @RequestParam("triggerGroup") String triggerGroup, @RequestBody QrtzPausedTriggerGrps qrtzPausedTriggerGrps) {

        qrtzPausedTriggerGrps.setSchedName(schedName);
        qrtzPausedTriggerGrps.setTriggerGroup(triggerGroup);

        LOGGER.debug("QrtzPausedTriggerGrps details with id is updated with: {}" , qrtzPausedTriggerGrps);

        return qrtzPausedTriggerGrpsService.update(qrtzPausedTriggerGrps);
    }


    @ApiOperation(value = "Deletes the QrtzPausedTriggerGrps instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteQrtzPausedTriggerGrps(@RequestParam("schedName") String schedName, @RequestParam("triggerGroup") String triggerGroup) {

        QrtzPausedTriggerGrpsId qrtzpausedtriggergrpsId = new QrtzPausedTriggerGrpsId();
        qrtzpausedtriggergrpsId.setSchedName(schedName);
        qrtzpausedtriggergrpsId.setTriggerGroup(triggerGroup);

        LOGGER.debug("Deleting QrtzPausedTriggerGrps with id: {}" , qrtzpausedtriggergrpsId);
        QrtzPausedTriggerGrps qrtzPausedTriggerGrps = qrtzPausedTriggerGrpsService.delete(qrtzpausedtriggergrpsId);

        return qrtzPausedTriggerGrps != null;
    }


    /**
     * @deprecated Use {@link #findQrtzPausedTriggerGrps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of QrtzPausedTriggerGrps instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzPausedTriggerGrps> searchQrtzPausedTriggerGrpsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering QrtzPausedTriggerGrps list by query filter:{}", (Object) queryFilters);
        return qrtzPausedTriggerGrpsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzPausedTriggerGrps instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<QrtzPausedTriggerGrps> findQrtzPausedTriggerGrps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzPausedTriggerGrps list by filter:", query);
        return qrtzPausedTriggerGrpsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzPausedTriggerGrps instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzPausedTriggerGrps> filterQrtzPausedTriggerGrps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzPausedTriggerGrps list by filter", query);
        return qrtzPausedTriggerGrpsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportQrtzPausedTriggerGrps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return qrtzPausedTriggerGrpsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQrtzPausedTriggerGrpsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = QrtzPausedTriggerGrps.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> qrtzPausedTriggerGrpsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of QrtzPausedTriggerGrps instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countQrtzPausedTriggerGrps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting QrtzPausedTriggerGrps");
		return qrtzPausedTriggerGrpsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getQrtzPausedTriggerGrpsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return qrtzPausedTriggerGrpsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importQrtzPausedTriggerGrpss(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing QrtzPausedTriggerGrps table rows from csv");
        qrtzPausedTriggerGrpsService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service QrtzPausedTriggerGrpsService instance
	 */
	protected void setQrtzPausedTriggerGrpsService(QrtzPausedTriggerGrpsService service) {
		this.qrtzPausedTriggerGrpsService = service;
	}

}