/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.QrtzCalendars;
import com.fico.dmp.telusagentuidb.QrtzCalendarsId;
import com.fico.dmp.telusagentuidb.service.QrtzCalendarsService;


/**
 * Controller object for domain model class QrtzCalendars.
 * @see QrtzCalendars
 */
@RestController("TELUSAgentUIDB.QrtzCalendarsController")
@Api(value = "QrtzCalendarsController", description = "Exposes APIs to work with QrtzCalendars resource.")
@RequestMapping("/TELUSAgentUIDB/QrtzCalendars")
public class QrtzCalendarsController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzCalendarsController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.QrtzCalendarsService")
	private QrtzCalendarsService qrtzCalendarsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new QrtzCalendars instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzCalendars createQrtzCalendars(@RequestPart("wm_data_json") QrtzCalendars qrtzCalendars, @RequestPart(value = "calendar", required = false) MultipartFile _calendar) {
		LOGGER.debug("Create QrtzCalendars with information: {}" , qrtzCalendars);

    qrtzCalendars.setCalendar(WMMultipartUtils.toByteArray(_calendar));
		qrtzCalendars = qrtzCalendarsService.create(qrtzCalendars);
		LOGGER.debug("Created QrtzCalendars with information: {}" , qrtzCalendars);

	    return qrtzCalendars;
	}

    @ApiOperation(value = "Returns the QrtzCalendars instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzCalendars getQrtzCalendars(@RequestParam("schedName") String schedName, @RequestParam("calendarName") String calendarName) {

        QrtzCalendarsId qrtzcalendarsId = new QrtzCalendarsId();
        qrtzcalendarsId.setSchedName(schedName);
        qrtzcalendarsId.setCalendarName(calendarName);

        LOGGER.debug("Getting QrtzCalendars with id: {}" , qrtzcalendarsId);
        QrtzCalendars qrtzCalendars = qrtzCalendarsService.getById(qrtzcalendarsId);
        LOGGER.debug("QrtzCalendars details with id: {}" , qrtzCalendars);

        return qrtzCalendars;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in QrtzCalendars instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getQrtzCalendarsBLOBContent(@RequestParam("schedName") String schedName, @RequestParam("calendarName") String calendarName, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in QrtzCalendars instance" , fieldName);

        if(!WMRuntimeUtils.isLob(QrtzCalendars.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        QrtzCalendarsId qrtzcalendarsId = new QrtzCalendarsId();
        qrtzcalendarsId.setSchedName(schedName);
        qrtzcalendarsId.setCalendarName(calendarName);

        QrtzCalendars qrtzCalendars = qrtzCalendarsService.getById(qrtzcalendarsId);
        WMMultipartUtils.buildHttpResponseForBlob(qrtzCalendars, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the QrtzCalendars instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzCalendars editQrtzCalendars(@RequestParam("schedName") String schedName, @RequestParam("calendarName") String calendarName, @RequestBody QrtzCalendars qrtzCalendars) {

        qrtzCalendars.setSchedName(schedName);
        qrtzCalendars.setCalendarName(calendarName);

        LOGGER.debug("QrtzCalendars details with id is updated with: {}" , qrtzCalendars);

        return qrtzCalendarsService.update(qrtzCalendars);
    }

    @ApiOperation(value = "Updates the QrtzCalendars instance associated with the given composite-id.This API should be used when QrtzCalendars instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzCalendars editQrtzCalendars(@RequestParam("schedName") String schedName, @RequestParam("calendarName") String calendarName, MultipartHttpServletRequest multipartHttpServletRequest) {
        return this.editQrtzCalendarsAndMultiparts(schedName, calendarName, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the QrtzCalendars instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzCalendars editQrtzCalendarsAndMultiparts(@RequestParam("schedName") String schedName, @RequestParam("calendarName") String calendarName, MultipartHttpServletRequest multipartHttpServletRequest) { 

        QrtzCalendarsId qrtzcalendarsId = new QrtzCalendarsId();
        qrtzcalendarsId.setSchedName(schedName);
        qrtzcalendarsId.setCalendarName(calendarName);

        QrtzCalendars newQrtzCalendars = WMMultipartUtils.toObject(multipartHttpServletRequest, QrtzCalendars.class, "TELUSAgentUIDB");
        QrtzCalendars oldQrtzCalendars = qrtzCalendarsService.getById(qrtzcalendarsId);

        WMMultipartUtils.updateLobsContent(oldQrtzCalendars, newQrtzCalendars);

        newQrtzCalendars.setSchedName(schedName);
        newQrtzCalendars.setCalendarName(calendarName);

        LOGGER.debug("QrtzCalendars details with id is updated with: {}" , newQrtzCalendars);

        return qrtzCalendarsService.update(newQrtzCalendars);
    }


    @ApiOperation(value = "Deletes the QrtzCalendars instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteQrtzCalendars(@RequestParam("schedName") String schedName, @RequestParam("calendarName") String calendarName) {

        QrtzCalendarsId qrtzcalendarsId = new QrtzCalendarsId();
        qrtzcalendarsId.setSchedName(schedName);
        qrtzcalendarsId.setCalendarName(calendarName);

        LOGGER.debug("Deleting QrtzCalendars with id: {}" , qrtzcalendarsId);
        QrtzCalendars qrtzCalendars = qrtzCalendarsService.delete(qrtzcalendarsId);

        return qrtzCalendars != null;
    }


    /**
     * @deprecated Use {@link #findQrtzCalendars(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of QrtzCalendars instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzCalendars> searchQrtzCalendarsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering QrtzCalendars list by query filter:{}", (Object) queryFilters);
        return qrtzCalendarsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzCalendars instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<QrtzCalendars> findQrtzCalendars(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzCalendars list by filter:", query);
        return qrtzCalendarsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzCalendars instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzCalendars> filterQrtzCalendars(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzCalendars list by filter", query);
        return qrtzCalendarsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportQrtzCalendars(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return qrtzCalendarsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQrtzCalendarsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = QrtzCalendars.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> qrtzCalendarsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of QrtzCalendars instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countQrtzCalendars( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting QrtzCalendars");
		return qrtzCalendarsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getQrtzCalendarsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return qrtzCalendarsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importQrtzCalendarss(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing QrtzCalendars table rows from csv");
        qrtzCalendarsService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service QrtzCalendarsService instance
	 */
	protected void setQrtzCalendarsService(QrtzCalendarsService service) {
		this.qrtzCalendarsService = service;
	}

}