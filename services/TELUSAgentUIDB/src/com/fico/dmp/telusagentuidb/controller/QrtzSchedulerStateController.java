/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.QrtzSchedulerState;
import com.fico.dmp.telusagentuidb.QrtzSchedulerStateId;
import com.fico.dmp.telusagentuidb.service.QrtzSchedulerStateService;


/**
 * Controller object for domain model class QrtzSchedulerState.
 * @see QrtzSchedulerState
 */
@RestController("TELUSAgentUIDB.QrtzSchedulerStateController")
@Api(value = "QrtzSchedulerStateController", description = "Exposes APIs to work with QrtzSchedulerState resource.")
@RequestMapping("/TELUSAgentUIDB/QrtzSchedulerState")
public class QrtzSchedulerStateController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzSchedulerStateController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.QrtzSchedulerStateService")
	private QrtzSchedulerStateService qrtzSchedulerStateService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new QrtzSchedulerState instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzSchedulerState createQrtzSchedulerState(@RequestBody QrtzSchedulerState qrtzSchedulerState) {
		LOGGER.debug("Create QrtzSchedulerState with information: {}" , qrtzSchedulerState);

		qrtzSchedulerState = qrtzSchedulerStateService.create(qrtzSchedulerState);
		LOGGER.debug("Created QrtzSchedulerState with information: {}" , qrtzSchedulerState);

	    return qrtzSchedulerState;
	}

    @ApiOperation(value = "Returns the QrtzSchedulerState instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzSchedulerState getQrtzSchedulerState(@RequestParam("instanceName") String instanceName, @RequestParam("schedName") String schedName) {

        QrtzSchedulerStateId qrtzschedulerstateId = new QrtzSchedulerStateId();
        qrtzschedulerstateId.setInstanceName(instanceName);
        qrtzschedulerstateId.setSchedName(schedName);

        LOGGER.debug("Getting QrtzSchedulerState with id: {}" , qrtzschedulerstateId);
        QrtzSchedulerState qrtzSchedulerState = qrtzSchedulerStateService.getById(qrtzschedulerstateId);
        LOGGER.debug("QrtzSchedulerState details with id: {}" , qrtzSchedulerState);

        return qrtzSchedulerState;
    }



    @ApiOperation(value = "Updates the QrtzSchedulerState instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzSchedulerState editQrtzSchedulerState(@RequestParam("instanceName") String instanceName, @RequestParam("schedName") String schedName, @RequestBody QrtzSchedulerState qrtzSchedulerState) {

        qrtzSchedulerState.setInstanceName(instanceName);
        qrtzSchedulerState.setSchedName(schedName);

        LOGGER.debug("QrtzSchedulerState details with id is updated with: {}" , qrtzSchedulerState);

        return qrtzSchedulerStateService.update(qrtzSchedulerState);
    }


    @ApiOperation(value = "Deletes the QrtzSchedulerState instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteQrtzSchedulerState(@RequestParam("instanceName") String instanceName, @RequestParam("schedName") String schedName) {

        QrtzSchedulerStateId qrtzschedulerstateId = new QrtzSchedulerStateId();
        qrtzschedulerstateId.setInstanceName(instanceName);
        qrtzschedulerstateId.setSchedName(schedName);

        LOGGER.debug("Deleting QrtzSchedulerState with id: {}" , qrtzschedulerstateId);
        QrtzSchedulerState qrtzSchedulerState = qrtzSchedulerStateService.delete(qrtzschedulerstateId);

        return qrtzSchedulerState != null;
    }


    /**
     * @deprecated Use {@link #findQrtzSchedulerStates(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of QrtzSchedulerState instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzSchedulerState> searchQrtzSchedulerStatesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering QrtzSchedulerStates list by query filter:{}", (Object) queryFilters);
        return qrtzSchedulerStateService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzSchedulerState instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<QrtzSchedulerState> findQrtzSchedulerStates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzSchedulerStates list by filter:", query);
        return qrtzSchedulerStateService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzSchedulerState instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzSchedulerState> filterQrtzSchedulerStates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzSchedulerStates list by filter", query);
        return qrtzSchedulerStateService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportQrtzSchedulerStates(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return qrtzSchedulerStateService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQrtzSchedulerStatesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = QrtzSchedulerState.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> qrtzSchedulerStateService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of QrtzSchedulerState instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countQrtzSchedulerStates( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting QrtzSchedulerStates");
		return qrtzSchedulerStateService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getQrtzSchedulerStateAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return qrtzSchedulerStateService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importQrtzSchedulerStates(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing QrtzSchedulerState table rows from csv");
        qrtzSchedulerStateService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service QrtzSchedulerStateService instance
	 */
	protected void setQrtzSchedulerStateService(QrtzSchedulerStateService service) {
		this.qrtzSchedulerStateService = service;
	}

}