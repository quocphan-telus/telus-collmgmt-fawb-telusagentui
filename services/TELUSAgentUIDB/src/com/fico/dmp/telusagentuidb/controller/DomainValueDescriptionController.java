/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.DomainValueDescription;
import com.fico.dmp.telusagentuidb.service.DomainValueDescriptionService;


/**
 * Controller object for domain model class DomainValueDescription.
 * @see DomainValueDescription
 */
@RestController("TELUSAgentUIDB.DomainValueDescriptionController")
@Api(value = "DomainValueDescriptionController", description = "Exposes APIs to work with DomainValueDescription resource.")
@RequestMapping("/TELUSAgentUIDB/DomainValueDescription")
public class DomainValueDescriptionController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(DomainValueDescriptionController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.DomainValueDescriptionService")
	private DomainValueDescriptionService domainValueDescriptionService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new DomainValueDescription instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DomainValueDescription createDomainValueDescription(@RequestBody DomainValueDescription domainValueDescription) {
		LOGGER.debug("Create DomainValueDescription with information: {}" , domainValueDescription);

		domainValueDescription = domainValueDescriptionService.create(domainValueDescription);
		LOGGER.debug("Created DomainValueDescription with information: {}" , domainValueDescription);

	    return domainValueDescription;
	}

    @ApiOperation(value = "Returns the DomainValueDescription instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DomainValueDescription getDomainValueDescription(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting DomainValueDescription with id: {}" , id);

        DomainValueDescription foundDomainValueDescription = domainValueDescriptionService.getById(id);
        LOGGER.debug("DomainValueDescription details with id: {}" , foundDomainValueDescription);

        return foundDomainValueDescription;
    }

    @ApiOperation(value = "Updates the DomainValueDescription instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DomainValueDescription editDomainValueDescription(@PathVariable("id") Integer id, @RequestBody DomainValueDescription domainValueDescription) {
        LOGGER.debug("Editing DomainValueDescription with id: {}" , domainValueDescription.getId());

        domainValueDescription.setId(id);
        domainValueDescription = domainValueDescriptionService.update(domainValueDescription);
        LOGGER.debug("DomainValueDescription details with id: {}" , domainValueDescription);

        return domainValueDescription;
    }

    @ApiOperation(value = "Deletes the DomainValueDescription instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDomainValueDescription(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting DomainValueDescription with id: {}" , id);

        DomainValueDescription deletedDomainValueDescription = domainValueDescriptionService.delete(id);

        return deletedDomainValueDescription != null;
    }

    /**
     * @deprecated Use {@link #findDomainValueDescriptions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DomainValueDescription instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<DomainValueDescription> searchDomainValueDescriptionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DomainValueDescriptions list by query filter:{}", (Object) queryFilters);
        return domainValueDescriptionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DomainValueDescription instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DomainValueDescription> findDomainValueDescriptions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DomainValueDescriptions list by filter:", query);
        return domainValueDescriptionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DomainValueDescription instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<DomainValueDescription> filterDomainValueDescriptions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DomainValueDescriptions list by filter", query);
        return domainValueDescriptionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportDomainValueDescriptions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return domainValueDescriptionService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportDomainValueDescriptionsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = DomainValueDescription.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> domainValueDescriptionService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of DomainValueDescription instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countDomainValueDescriptions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DomainValueDescriptions");
		return domainValueDescriptionService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getDomainValueDescriptionAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return domainValueDescriptionService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importDomainValueDescriptions(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing DomainValueDescription table rows from csv");
        domainValueDescriptionService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DomainValueDescriptionService instance
	 */
	protected void setDomainValueDescriptionService(DomainValueDescriptionService service) {
		this.domainValueDescriptionService = service;
	}

}