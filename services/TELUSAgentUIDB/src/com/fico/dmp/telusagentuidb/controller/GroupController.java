/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.Group;
import com.fico.dmp.telusagentuidb.GroupRole;
import com.fico.dmp.telusagentuidb.QueueGroup;
import com.fico.dmp.telusagentuidb.UserGroup;
import com.fico.dmp.telusagentuidb.service.GroupService;


/**
 * Controller object for domain model class Group.
 * @see Group
 */
@RestController("TELUSAgentUIDB.GroupController")
@Api(value = "GroupController", description = "Exposes APIs to work with Group resource.")
@RequestMapping("/TELUSAgentUIDB/Group")
public class GroupController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(GroupController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.GroupService")
	private GroupService groupService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Group instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Group createGroup(@RequestBody Group _group) {
		LOGGER.debug("Create Group with information: {}" , _group);

		_group = groupService.create(_group);
		LOGGER.debug("Created Group with information: {}" , _group);

	    return _group;
	}

    @ApiOperation(value = "Returns the Group instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Group getGroup(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Group with id: {}" , id);

        Group foundGroup = groupService.getById(id);
        LOGGER.debug("Group details with id: {}" , foundGroup);

        return foundGroup;
    }

    @ApiOperation(value = "Updates the Group instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Group editGroup(@PathVariable("id") Integer id, @RequestBody Group _group) {
        LOGGER.debug("Editing Group with id: {}" , _group.getId());

        _group.setId(id);
        _group = groupService.update(_group);
        LOGGER.debug("Group details with id: {}" , _group);

        return _group;
    }

    @ApiOperation(value = "Deletes the Group instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGroup(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Group with id: {}" , id);

        Group deletedGroup = groupService.delete(id);

        return deletedGroup != null;
    }

    @RequestMapping(value = "/name/{name}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Group with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Group getByName(@PathVariable("name") String name) {
        LOGGER.debug("Getting Group with uniques key Name");
        return groupService.getByName(name);
    }

    /**
     * @deprecated Use {@link #findGroups(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Group instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Group> searchGroupsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Groups list by query filter:{}", (Object) queryFilters);
        return groupService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Group instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Group> findGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Groups list by filter:", query);
        return groupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Group instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Group> filterGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Groups list by filter", query);
        return groupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportGroups(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return groupService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGroupsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Group.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> groupService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Group instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countGroups( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Groups");
		return groupService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getGroupAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return groupService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importGroups(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing Group table rows from csv");
        groupService.importData(file);
    }

    @RequestMapping(value="/{id:.+}/groupRoles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the groupRoles instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GroupRole> findAssociatedGroupRoles(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated groupRoles");
        return groupService.findAssociatedGroupRoles(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/userGroups", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the userGroups instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserGroup> findAssociatedUserGroups(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated userGroups");
        return groupService.findAssociatedUserGroups(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/queueGroups", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the queueGroups instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<QueueGroup> findAssociatedQueueGroups(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated queueGroups");
        return groupService.findAssociatedQueueGroups(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GroupService instance
	 */
	protected void setGroupService(GroupService service) {
		this.groupService = service;
	}

}