/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.QrtzTriggers;
import com.fico.dmp.telusagentuidb.QrtzTriggersId;
import com.fico.dmp.telusagentuidb.service.QrtzTriggersService;


/**
 * Controller object for domain model class QrtzTriggers.
 * @see QrtzTriggers
 */
@RestController("TELUSAgentUIDB.QrtzTriggersController")
@Api(value = "QrtzTriggersController", description = "Exposes APIs to work with QrtzTriggers resource.")
@RequestMapping("/TELUSAgentUIDB/QrtzTriggers")
public class QrtzTriggersController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzTriggersController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.QrtzTriggersService")
	private QrtzTriggersService qrtzTriggersService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new QrtzTriggers instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzTriggers createQrtzTriggers(@RequestPart("wm_data_json") QrtzTriggers qrtzTriggers, @RequestPart(value = "jobData", required = false) MultipartFile _jobData) {
		LOGGER.debug("Create QrtzTriggers with information: {}" , qrtzTriggers);

    qrtzTriggers.setJobData(WMMultipartUtils.toByteArray(_jobData));
		qrtzTriggers = qrtzTriggersService.create(qrtzTriggers);
		LOGGER.debug("Created QrtzTriggers with information: {}" , qrtzTriggers);

	    return qrtzTriggers;
	}

    @ApiOperation(value = "Returns the QrtzTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzTriggers getQrtzTriggers(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup) {

        QrtzTriggersId qrtztriggersId = new QrtzTriggersId();
        qrtztriggersId.setSchedName(schedName);
        qrtztriggersId.setTriggerName(triggerName);
        qrtztriggersId.setTriggerGroup(triggerGroup);

        LOGGER.debug("Getting QrtzTriggers with id: {}" , qrtztriggersId);
        QrtzTriggers qrtzTriggers = qrtzTriggersService.getById(qrtztriggersId);
        LOGGER.debug("QrtzTriggers details with id: {}" , qrtzTriggers);

        return qrtzTriggers;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in QrtzTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getQrtzTriggersBLOBContent(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in QrtzTriggers instance" , fieldName);

        if(!WMRuntimeUtils.isLob(QrtzTriggers.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        QrtzTriggersId qrtztriggersId = new QrtzTriggersId();
        qrtztriggersId.setSchedName(schedName);
        qrtztriggersId.setTriggerName(triggerName);
        qrtztriggersId.setTriggerGroup(triggerGroup);

        QrtzTriggers qrtzTriggers = qrtzTriggersService.getById(qrtztriggersId);
        WMMultipartUtils.buildHttpResponseForBlob(qrtzTriggers, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the QrtzTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzTriggers editQrtzTriggers(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup, @RequestBody QrtzTriggers qrtzTriggers) {

        qrtzTriggers.setSchedName(schedName);
        qrtzTriggers.setTriggerName(triggerName);
        qrtzTriggers.setTriggerGroup(triggerGroup);

        LOGGER.debug("QrtzTriggers details with id is updated with: {}" , qrtzTriggers);

        return qrtzTriggersService.update(qrtzTriggers);
    }

    @ApiOperation(value = "Updates the QrtzTriggers instance associated with the given composite-id.This API should be used when QrtzTriggers instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzTriggers editQrtzTriggers(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup, MultipartHttpServletRequest multipartHttpServletRequest) {
        return this.editQrtzTriggersAndMultiparts(schedName, triggerName, triggerGroup, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the QrtzTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzTriggers editQrtzTriggersAndMultiparts(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup, MultipartHttpServletRequest multipartHttpServletRequest) { 

        QrtzTriggersId qrtztriggersId = new QrtzTriggersId();
        qrtztriggersId.setSchedName(schedName);
        qrtztriggersId.setTriggerName(triggerName);
        qrtztriggersId.setTriggerGroup(triggerGroup);

        QrtzTriggers newQrtzTriggers = WMMultipartUtils.toObject(multipartHttpServletRequest, QrtzTriggers.class, "TELUSAgentUIDB");
        QrtzTriggers oldQrtzTriggers = qrtzTriggersService.getById(qrtztriggersId);

        WMMultipartUtils.updateLobsContent(oldQrtzTriggers, newQrtzTriggers);

        newQrtzTriggers.setSchedName(schedName);
        newQrtzTriggers.setTriggerName(triggerName);
        newQrtzTriggers.setTriggerGroup(triggerGroup);

        LOGGER.debug("QrtzTriggers details with id is updated with: {}" , newQrtzTriggers);

        return qrtzTriggersService.update(newQrtzTriggers);
    }


    @ApiOperation(value = "Deletes the QrtzTriggers instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteQrtzTriggers(@RequestParam("schedName") String schedName, @RequestParam("triggerName") String triggerName, @RequestParam("triggerGroup") String triggerGroup) {

        QrtzTriggersId qrtztriggersId = new QrtzTriggersId();
        qrtztriggersId.setSchedName(schedName);
        qrtztriggersId.setTriggerName(triggerName);
        qrtztriggersId.setTriggerGroup(triggerGroup);

        LOGGER.debug("Deleting QrtzTriggers with id: {}" , qrtztriggersId);
        QrtzTriggers qrtzTriggers = qrtzTriggersService.delete(qrtztriggersId);

        return qrtzTriggers != null;
    }


    /**
     * @deprecated Use {@link #findQrtzTriggers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of QrtzTriggers instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzTriggers> searchQrtzTriggersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering QrtzTriggers list by query filter:{}", (Object) queryFilters);
        return qrtzTriggersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzTriggers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<QrtzTriggers> findQrtzTriggers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzTriggers list by filter:", query);
        return qrtzTriggersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzTriggers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzTriggers> filterQrtzTriggers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzTriggers list by filter", query);
        return qrtzTriggersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportQrtzTriggers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return qrtzTriggersService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQrtzTriggersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = QrtzTriggers.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> qrtzTriggersService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of QrtzTriggers instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countQrtzTriggers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting QrtzTriggers");
		return qrtzTriggersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getQrtzTriggersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return qrtzTriggersService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importQrtzTriggerss(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing QrtzTriggers table rows from csv");
        qrtzTriggersService.importData(file);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service QrtzTriggersService instance
	 */
	protected void setQrtzTriggersService(QrtzTriggersService service) {
		this.qrtzTriggersService = service;
	}

}