/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.util.logging.FAWBStaticLoggerBinder;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.telusagentuidb.QrtzJobDetails;
import com.fico.dmp.telusagentuidb.QrtzJobDetailsId;
import com.fico.dmp.telusagentuidb.QrtzTriggers;
import com.fico.dmp.telusagentuidb.service.QrtzJobDetailsService;


/**
 * Controller object for domain model class QrtzJobDetails.
 * @see QrtzJobDetails
 */
@RestController("TELUSAgentUIDB.QrtzJobDetailsController")
@Api(value = "QrtzJobDetailsController", description = "Exposes APIs to work with QrtzJobDetails resource.")
@RequestMapping("/TELUSAgentUIDB/QrtzJobDetails")
public class QrtzJobDetailsController {

    private static final Logger LOGGER =  FAWBStaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(QrtzJobDetailsController.class.getName());

    @Autowired
	@Qualifier("TELUSAgentUIDB.QrtzJobDetailsService")
	private QrtzJobDetailsService qrtzJobDetailsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new QrtzJobDetails instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzJobDetails createQrtzJobDetails(@RequestPart("wm_data_json") QrtzJobDetails qrtzJobDetails, @RequestPart(value = "jobData", required = false) MultipartFile _jobData) {
		LOGGER.debug("Create QrtzJobDetails with information: {}" , qrtzJobDetails);

    qrtzJobDetails.setJobData(WMMultipartUtils.toByteArray(_jobData));
		qrtzJobDetails = qrtzJobDetailsService.create(qrtzJobDetails);
		LOGGER.debug("Created QrtzJobDetails with information: {}" , qrtzJobDetails);

	    return qrtzJobDetails;
	}

    @ApiOperation(value = "Returns the QrtzJobDetails instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzJobDetails getQrtzJobDetails(@RequestParam("jobGroup") String jobGroup, @RequestParam("schedName") String schedName, @RequestParam("jobName") String jobName) {

        QrtzJobDetailsId qrtzjobdetailsId = new QrtzJobDetailsId();
        qrtzjobdetailsId.setJobGroup(jobGroup);
        qrtzjobdetailsId.setSchedName(schedName);
        qrtzjobdetailsId.setJobName(jobName);

        LOGGER.debug("Getting QrtzJobDetails with id: {}" , qrtzjobdetailsId);
        QrtzJobDetails qrtzJobDetails = qrtzJobDetailsService.getById(qrtzjobdetailsId);
        LOGGER.debug("QrtzJobDetails details with id: {}" , qrtzJobDetails);

        return qrtzJobDetails;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in QrtzJobDetails instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getQrtzJobDetailsBLOBContent(@RequestParam("jobGroup") String jobGroup, @RequestParam("schedName") String schedName, @RequestParam("jobName") String jobName, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in QrtzJobDetails instance" , fieldName);

        if(!WMRuntimeUtils.isLob(QrtzJobDetails.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        QrtzJobDetailsId qrtzjobdetailsId = new QrtzJobDetailsId();
        qrtzjobdetailsId.setJobGroup(jobGroup);
        qrtzjobdetailsId.setSchedName(schedName);
        qrtzjobdetailsId.setJobName(jobName);

        QrtzJobDetails qrtzJobDetails = qrtzJobDetailsService.getById(qrtzjobdetailsId);
        WMMultipartUtils.buildHttpResponseForBlob(qrtzJobDetails, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the QrtzJobDetails instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzJobDetails editQrtzJobDetails(@RequestParam("jobGroup") String jobGroup, @RequestParam("schedName") String schedName, @RequestParam("jobName") String jobName, @RequestBody QrtzJobDetails qrtzJobDetails) {

        qrtzJobDetails.setJobGroup(jobGroup);
        qrtzJobDetails.setSchedName(schedName);
        qrtzJobDetails.setJobName(jobName);

        LOGGER.debug("QrtzJobDetails details with id is updated with: {}" , qrtzJobDetails);

        return qrtzJobDetailsService.update(qrtzJobDetails);
    }

    @ApiOperation(value = "Updates the QrtzJobDetails instance associated with the given composite-id.This API should be used when QrtzJobDetails instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzJobDetails editQrtzJobDetails(@RequestParam("jobGroup") String jobGroup, @RequestParam("schedName") String schedName, @RequestParam("jobName") String jobName, MultipartHttpServletRequest multipartHttpServletRequest) {
        return this.editQrtzJobDetailsAndMultiparts(jobGroup, schedName, jobName, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the QrtzJobDetails instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public QrtzJobDetails editQrtzJobDetailsAndMultiparts(@RequestParam("jobGroup") String jobGroup, @RequestParam("schedName") String schedName, @RequestParam("jobName") String jobName, MultipartHttpServletRequest multipartHttpServletRequest) { 

        QrtzJobDetailsId qrtzjobdetailsId = new QrtzJobDetailsId();
        qrtzjobdetailsId.setJobGroup(jobGroup);
        qrtzjobdetailsId.setSchedName(schedName);
        qrtzjobdetailsId.setJobName(jobName);

        QrtzJobDetails newQrtzJobDetails = WMMultipartUtils.toObject(multipartHttpServletRequest, QrtzJobDetails.class, "TELUSAgentUIDB");
        QrtzJobDetails oldQrtzJobDetails = qrtzJobDetailsService.getById(qrtzjobdetailsId);

        WMMultipartUtils.updateLobsContent(oldQrtzJobDetails, newQrtzJobDetails);

        newQrtzJobDetails.setJobGroup(jobGroup);
        newQrtzJobDetails.setSchedName(schedName);
        newQrtzJobDetails.setJobName(jobName);

        LOGGER.debug("QrtzJobDetails details with id is updated with: {}" , newQrtzJobDetails);

        return qrtzJobDetailsService.update(newQrtzJobDetails);
    }


    @ApiOperation(value = "Deletes the QrtzJobDetails instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteQrtzJobDetails(@RequestParam("jobGroup") String jobGroup, @RequestParam("schedName") String schedName, @RequestParam("jobName") String jobName) {

        QrtzJobDetailsId qrtzjobdetailsId = new QrtzJobDetailsId();
        qrtzjobdetailsId.setJobGroup(jobGroup);
        qrtzjobdetailsId.setSchedName(schedName);
        qrtzjobdetailsId.setJobName(jobName);

        LOGGER.debug("Deleting QrtzJobDetails with id: {}" , qrtzjobdetailsId);
        QrtzJobDetails qrtzJobDetails = qrtzJobDetailsService.delete(qrtzjobdetailsId);

        return qrtzJobDetails != null;
    }


    /**
     * @deprecated Use {@link #findQrtzJobDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of QrtzJobDetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzJobDetails> searchQrtzJobDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering QrtzJobDetails list by query filter:{}", (Object) queryFilters);
        return qrtzJobDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzJobDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<QrtzJobDetails> findQrtzJobDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzJobDetails list by filter:", query);
        return qrtzJobDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of QrtzJobDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<QrtzJobDetails> filterQrtzJobDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering QrtzJobDetails list by filter", query);
        return qrtzJobDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportQrtzJobDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return qrtzJobDetailsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportQrtzJobDetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = QrtzJobDetails.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> qrtzJobDetailsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of QrtzJobDetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countQrtzJobDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting QrtzJobDetails");
		return qrtzJobDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getQrtzJobDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return qrtzJobDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @ApiOperation(value = "Consumes and inserts csv data into the table")
	@RequestMapping(value = "/import", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public void importQrtzJobDetailss(@RequestPart("file") @Valid @NotNull MultipartFile file) {
        LOGGER.debug("Importing QrtzJobDetails table rows from csv");
        qrtzJobDetailsService.importData(file);
    }

    @RequestMapping(value="/composite-id/qrtzTriggerses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the qrtzTriggerses instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<QrtzTriggers> findAssociatedQrtzTriggerses(@RequestParam("jobGroup") String jobGroup, @RequestParam("schedName") String schedName, @RequestParam("jobName") String jobName, Pageable pageable) {

        LOGGER.debug("Fetching all associated qrtzTriggerses");
        return qrtzJobDetailsService.findAssociatedQrtzTriggerses(jobGroup, schedName, jobName, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service QrtzJobDetailsService instance
	 */
	protected void setQrtzJobDetailsService(QrtzJobDetailsService service) {
		this.qrtzJobDetailsService = service;
	}

}