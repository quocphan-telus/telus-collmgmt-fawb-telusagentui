/*Copyright (c) 2020-2021 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.telusagentuidb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Note generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`NOTE`", indexes = {
            @Index(name = "`FK_NOTE_TO_DomainValue_nvLcfG`", columnList = "`noteCategory`"),
            @Index(name = "`FK_NOTE_TO_PARTY_partyId_id`", columnList = "`partyId`"),
            @Index(name = "`FK_NOTE_TO_APPLICATION_aQ4lsP`", columnList = "`applicationId`")})
public class Note implements Serializable {


    private Integer id;

    private String content;

    private Integer noteCategory;

    private Integer createdBy;

    private Timestamp createdOn;

    private Integer updatedBy;

    private Timestamp updatedOn;

    private Integer applicationId;

    private Integer partyId;

    private DomainValue domainValue;

    private Party party;

    private Application application;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`content`", nullable = true, length = 2147483647)
    public String getContent() {
        return this.content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    @Column(name = "`noteCategory`", nullable = true, scale = 0, precision = 10)
    public Integer getNoteCategory() {
        return this.noteCategory;
    }

    public void setNoteCategory(Integer noteCategory) {
        this.noteCategory = noteCategory;
    }

    @Column(name = "`createdBy`", nullable = true, scale = 0, precision = 10)
    public Integer getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(Integer createdBy) {
        this.createdBy = createdBy;
    }

    @Column(name = "`createdOn`", nullable = true)
    public Timestamp getCreatedOn() {
        return this.createdOn;
    }

    public void setCreatedOn(Timestamp createdOn) {
        this.createdOn = createdOn;
    }

    @Column(name = "`updatedBy`", nullable = true, scale = 0, precision = 10)
    public Integer getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(Integer updatedBy) {
        this.updatedBy = updatedBy;
    }

    @Column(name = "`updatedOn`", nullable = true)
    public Timestamp getUpdatedOn() {
        return this.updatedOn;
    }

    public void setUpdatedOn(Timestamp updatedOn) {
        this.updatedOn = updatedOn;
    }

    @Column(name = "`applicationId`", nullable = true, scale = 0, precision = 10)
    public Integer getApplicationId() {
        return this.applicationId;
    }

    public void setApplicationId(Integer applicationId) {
        this.applicationId = applicationId;
    }

    @Column(name = "`partyId`", nullable = true, scale = 0, precision = 10)
    public Integer getPartyId() {
        return this.partyId;
    }

    public void setPartyId(Integer partyId) {
        this.partyId = partyId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`noteCategory`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_NOTE_TO_DomainValue_nvLcfG`"))
    @Fetch(FetchMode.JOIN)
    public DomainValue getDomainValue() {
        return this.domainValue;
    }

    public void setDomainValue(DomainValue domainValue) {
        if(domainValue != null) {
            this.noteCategory = domainValue.getId();
        }

        this.domainValue = domainValue;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`partyId`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_NOTE_TO_PARTY_partyId_id`"))
    @Fetch(FetchMode.JOIN)
    public Party getParty() {
        return this.party;
    }

    public void setParty(Party party) {
        if(party != null) {
            this.partyId = party.getId();
        }

        this.party = party;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`applicationId`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_NOTE_TO_APPLICATION_aQ4lsP`"))
    @Fetch(FetchMode.JOIN)
    public Application getApplication() {
        return this.application;
    }

    public void setApplication(Application application) {
        if(application != null) {
            this.applicationId = application.getId();
        }

        this.application = application;
    }



    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Note)) return false;
        final Note note = (Note) o;
        return Objects.equals(getId(), note.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}