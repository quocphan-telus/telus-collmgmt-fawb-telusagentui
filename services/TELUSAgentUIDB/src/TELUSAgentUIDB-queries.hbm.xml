<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <sql-query name="getTeamManagerByRoleId">
        <![CDATA[
        select u.* from  USER u join USER_ROLE ur on
ur.userId=u.id  join ROLE r on ur.roleId= r.id where ur.roleId = :roleId and r.role not in ('OD TM','AR TM Onshore','AR TM Offshore')
        ]]>
    <query-param name="roleId" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="getTeamManagerByRoleId__count">
        <![CDATA[
        select count(*) from (select u.* from  USER u join USER_ROLE ur on
ur.userId=u.id  join ROLE r on ur.roleId= r.id where ur.roleId = :roleId and r.role not in ('OD TM','AR TM Onshore','AR TM Offshore')) wmTempTable
        ]]>
    <query-param name="roleId" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="getRolesByGroupId">
        <![CDATA[
        select ROLE.id,ROLE.role,ROLE.description,ROLE.active from ROLE where id IN(select GROUP_ROLE.roleId from `GROUP_ROLE` where `groupId` IN(select USER_GROUP.groupId from USER_GROUP left join USER on USER_GROUP.userId = USER.id where USER_GROUP.groupID = :GroupId))
        ]]>
    <query-param name="GroupId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getRolesByGroupId__count">
        <![CDATA[
        select count(*) from (select ROLE.id,ROLE.role,ROLE.description,ROLE.active from ROLE where id IN(select GROUP_ROLE.roleId from `GROUP_ROLE` where `groupId` IN(select USER_GROUP.groupId from USER_GROUP left join USER on USER_GROUP.userId = USER.id where USER_GROUP.groupID = :GroupId))) wmTempTable
        ]]>
    <query-param name="GroupId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="checkforDocumentWithEid">
        <![CDATA[
        select *  from ENTITY_NOTES where  entityId=:entityId and docId is not NULL
        ]]>
    <query-param name="entityId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="checkforDocumentWithEid__count">
        <![CDATA[
        select count(*) from (select *  from ENTITY_NOTES where  entityId=:entityId and docId is not NULL) wmTempTable
        ]]>
    <query-param name="entityId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="deleteGroupUser">
        <![CDATA[
        delete from USER_GROUP where GroupId=:GroupId
        ]]>
    <query-param name="GroupId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="Query_updateUserDetails">
        <![CDATA[
        UPDATE USER SET lendingLimit = :lendingLimit, timeZone = :preferredTZ WHERE id = :userId
        ]]>
    <query-param name="lendingLimit" type="java.math.BigDecimal"/>
    <query-param name="preferredTZ" type="java.lang.String"/>
    <query-param name="userId" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="Query_GetAllDomainValueWithOneParent">
        <![CDATA[
        SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, DomainValueType.Code AS DVTypeCode, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id INNER JOIN DomainValueRelation ON ParentDVQuery.id = DomainValueRelation.DomainValueId LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :suppliedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :suppliedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND DomainValueType.Code = :domainValueTypeCode AND DomainValueRelation.ParentDomainValueId1 = :parent1DomainValueId AND DomainValueRelation.ParentDomainValueId2 IS NULL AND ParentDVQuery.IsActive = true AND 
CASE WHEN :dvDescription IS NULL
THEN TRUE
ELSE
    ParentDVDescQuery.description LIKE :dvDescription
END 
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC
        ]]>
    <query-param name="suppliedLocale" type="java.lang.String"/>
    <query-param name="domainValueTypeCode" type="java.lang.String"/>
    <query-param name="parent1DomainValueId" type="java.lang.Integer"/>
    <query-param name="dvDescription" type="java.lang.String"/>
    </sql-query>

    <sql-query name="Query_GetAllDomainValueWithOneParent__count">
        <![CDATA[
        select count(*) from (SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, DomainValueType.Code AS DVTypeCode, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id INNER JOIN DomainValueRelation ON ParentDVQuery.id = DomainValueRelation.DomainValueId LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :suppliedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :suppliedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND DomainValueType.Code = :domainValueTypeCode AND DomainValueRelation.ParentDomainValueId1 = :parent1DomainValueId AND DomainValueRelation.ParentDomainValueId2 IS NULL AND ParentDVQuery.IsActive = true AND 
CASE WHEN :dvDescription IS NULL
THEN TRUE
ELSE
    ParentDVDescQuery.description LIKE :dvDescription
END 
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC) wmTempTable
        ]]>
    <query-param name="suppliedLocale" type="java.lang.String"/>
    <query-param name="domainValueTypeCode" type="java.lang.String"/>
    <query-param name="parent1DomainValueId" type="java.lang.Integer"/>
    <query-param name="dvDescription" type="java.lang.String"/>
    </sql-query>

    <sql-query name="Query_GetDomainValueByCodeAndTypeCode">
        <![CDATA[
        SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, DomainValueType.Code AS DVTypeCode, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND ParentDVQuery.Code = :domainValueCode AND DomainValueType.Code = :domainValueTypeCode AND ParentDVQuery.IsActive = true
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC
        ]]>
    <query-param name="selectedLocale" type="java.lang.String"/>
    <query-param name="domainValueCode" type="java.lang.String"/>
    <query-param name="domainValueTypeCode" type="java.lang.String"/>
    </sql-query>

    <sql-query name="Query_GetDomainValueByCodeAndTypeCode__count">
        <![CDATA[
        select count(*) from (SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, DomainValueType.Code AS DVTypeCode, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND ParentDVQuery.Code = :domainValueCode AND DomainValueType.Code = :domainValueTypeCode AND ParentDVQuery.IsActive = true
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC) wmTempTable
        ]]>
    <query-param name="selectedLocale" type="java.lang.String"/>
    <query-param name="domainValueCode" type="java.lang.String"/>
    <query-param name="domainValueTypeCode" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getTeamManagersByTeamId">
        <![CDATA[
        select u.* from TEAM_USER tu join USER u on u.id=tu.userId join USER_ROLE ur on
ur.userId=u.id join ROLE r on ur.roleId= r.id where tu.teamId = :teamId and r.role in ('OD TM','AR TM Onshore','AR TM Offshore')
        ]]>
    <query-param name="teamId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getTeamManagersByTeamId__count">
        <![CDATA[
        select count(*) from (select u.* from TEAM_USER tu join USER u on u.id=tu.userId join USER_ROLE ur on
ur.userId=u.id join ROLE r on ur.roleId= r.id where tu.teamId = :teamId and r.role in ('OD TM','AR TM Onshore','AR TM Offshore')) wmTempTable
        ]]>
    <query-param name="teamId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="Query_DeleteAllErrorsByApplicationId">
        <![CDATA[
        delete from Error where applicationId = :applicationId
        ]]>
    <query-param name="applicationId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="countRolePermission">
        <![CDATA[
        SELECT COUNT(PermissionId) FROM ROLE_PERMISSION WHERE  RoleId = :RoleId
        ]]>
    <query-param name="RoleId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="countRolePermission__count">
        <![CDATA[
        select count(*) from (SELECT COUNT(PermissionId) FROM ROLE_PERMISSION WHERE  RoleId = :RoleId) wmTempTable
        ]]>
    <query-param name="RoleId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getActiveAgentListWithWorkCategory">
        <![CDATA[
        SELECT USER.emplId as empId, group_concat(WORKCATEGORY_USER.work_category separator ',') as workCategory
FROM USER
LEFT JOIN WORKCATEGORY_USER
ON USER.ID = WORKCATEGORY_USER.userId where USER.active = true and USER.emplId is not null  group by USER.emplId
        ]]>
    </sql-query>

    <sql-query name="getActiveAgentListWithWorkCategory__count">
        <![CDATA[
        select count(*) from (SELECT USER.emplId as empId, group_concat(WORKCATEGORY_USER.work_category separator ',') as workCategory
FROM USER
LEFT JOIN WORKCATEGORY_USER
ON USER.ID = WORKCATEGORY_USER.userId where USER.active = true and USER.emplId is not null  group by USER.emplId) wmTempTable
        ]]>
    </sql-query>

    <sql-query name="getRolesAssociatedUsersPermissions">
        <![CDATA[
        select roleId, role, description, count(distinct permissionId) as permissionCount, count(distinct userid) as userCount from
(
select rid as roleId,userid,role,permissionId, description from(
(select r.id as rid,ru.userid,r.role, r.description from ROLE r left outer join USER_ROLE ru on r.id = ru.roleid where r.active = true and (:role is null or lower(r.role) like lower(:role))) a left outer join ROLE_PERMISSION rp on a.rid = rp.roleId 
) 
)b group by role order by roleId desc
        ]]>
    <query-param name="role" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getRolesAssociatedUsersPermissions__count">
        <![CDATA[
        select count(*) from (select roleId, role, description, count(distinct permissionId) as permissionCount, count(distinct userid) as userCount from
(
select rid as roleId,userid,role,permissionId, description from(
(select r.id as rid,ru.userid,r.role, r.description from ROLE r left outer join USER_ROLE ru on r.id = ru.roleid where r.active = true and (:role is null or lower(r.role) like lower(:role))) a left outer join ROLE_PERMISSION rp on a.rid = rp.roleId 
) 
)b group by role order by roleId desc) wmTempTable
        ]]>
    <query-param name="role" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getActiveRolesByUserName">
        <![CDATA[
        select distinct(r.role) from `ROLE` r
INNER JOIN `USER_ROLE` ur on ur.roleId = r.Id
INNER JOIN USER u on u.id=ur.userId
where u.active = true
and u.userId = :UserName
order by r.role
        ]]>
    <query-param name="UserName" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getActiveRolesByUserName__count">
        <![CDATA[
        select count(*) from (select distinct(r.role) from `ROLE` r
INNER JOIN `USER_ROLE` ur on ur.roleId = r.Id
INNER JOIN USER u on u.id=ur.userId
where u.active = true
and u.userId = :UserName
order by r.role) wmTempTable
        ]]>
    <query-param name="UserName" type="java.lang.String"/>
    </sql-query>

    <sql-query name="searchUsers">
        <![CDATA[
        select
    usr.firstName,
    usr.userId,
    usr.lastName,
    usr.email,
    usr.active,
    usr.emplId,
    role.role,
    CONCAT(
        mngrUsr.firstname,
        ' ',
        mngrUsr.lastName
    ) as teamManager,
    group_concat(
        wrkCatUsr.work_category separator ','
    ) as workCategory,
    team.TeamID as teamId
from USER usr
    left outer join USER mngrUsr on usr.managerId = mngrUsr.Id
    join USER_ROLE usrRole on usr.id = usrRole.userId
    join ROLE role on usrRole.roleId = role.id
    left join WORKCATEGORY_USER wrkCatUsr on usr.id = wrkCatUsr.userId
    left outer join TEAM_USER teamUsr on teamUsr.userId = usr.id
    left join TEAM team on team.id = teamUsr.teamId
where ( (
            usr.firstName =:userCriteria
            or :userCriteria is null
        )
        or (
            usr.lastName =:userCriteria
            or :userCriteria is null
        )
        or (
            usr.email =:userCriteria 
            or :userCriteria is null 
        )
        or (
            usr.emplId =:userCriteria 
            or :userCriteria is null 
        )
    )
    and (
        team.id =:teamID
        or :teamID is null
    )
    and (
        role.role = :role
        or :role is null
    )
    and (
        wrkCatUsr.work_category =:work_category
        or :work_category is null
    )
    and (
        mngrUsr.firstname =:managerId
        or :managerId is null
    )
group by usr.id
ORDER BY usr.firstName asc
        ]]>
    <query-param name="userCriteria" type="java.lang.String"/>
    <query-param name="teamID" type="java.lang.String"/>
    <query-param name="role" type="java.lang.String"/>
    <query-param name="work_category" type="java.lang.String"/>
    <query-param name="managerId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="searchUsers__count">
        <![CDATA[
        select count(*) from (select
    usr.firstName,
    usr.userId,
    usr.lastName,
    usr.email,
    usr.active,
    usr.emplId,
    role.role,
    CONCAT(
        mngrUsr.firstname,
        ' ',
        mngrUsr.lastName
    ) as teamManager,
    group_concat(
        wrkCatUsr.work_category separator ','
    ) as workCategory,
    team.TeamID as teamId
from USER usr
    left outer join USER mngrUsr on usr.managerId = mngrUsr.Id
    join USER_ROLE usrRole on usr.id = usrRole.userId
    join ROLE role on usrRole.roleId = role.id
    left join WORKCATEGORY_USER wrkCatUsr on usr.id = wrkCatUsr.userId
    left outer join TEAM_USER teamUsr on teamUsr.userId = usr.id
    left join TEAM team on team.id = teamUsr.teamId
where ( (
            usr.firstName =:userCriteria
            or :userCriteria is null
        )
        or (
            usr.lastName =:userCriteria
            or :userCriteria is null
        )
        or (
            usr.email =:userCriteria 
            or :userCriteria is null 
        )
        or (
            usr.emplId =:userCriteria 
            or :userCriteria is null 
        )
    )
    and (
        team.id =:teamID
        or :teamID is null
    )
    and (
        role.role = :role
        or :role is null
    )
    and (
        wrkCatUsr.work_category =:work_category
        or :work_category is null
    )
    and (
        mngrUsr.firstname =:managerId
        or :managerId is null
    )
group by usr.id
ORDER BY usr.firstName asc) wmTempTable
        ]]>
    <query-param name="userCriteria" type="java.lang.String"/>
    <query-param name="teamID" type="java.lang.String"/>
    <query-param name="role" type="java.lang.String"/>
    <query-param name="work_category" type="java.lang.String"/>
    <query-param name="managerId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="deleteGroupRole">
        <![CDATA[
        DELETE FROM GROUP_ROLE WHERE GroupId = :GroupId
        ]]>
    <query-param name="GroupId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getPermissionByUserId">
        <![CDATA[
        select Distinct Name from PERMISSION p join ROLE_PERMISSION rp on rp.PermissionId = p.Id left join ROLE r on r.Id = rp.RoleId left join USER_ROLE ur on ur.RoleId = r.Id left join USER u on u.Id = ur.UserId where u.userId = :UserId
        ]]>
    <query-param name="UserId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getPermissionByUserId__count">
        <![CDATA[
        select count(*) from (select Distinct Name from PERMISSION p join ROLE_PERMISSION rp on rp.PermissionId = p.Id left join ROLE r on r.Id = rp.RoleId left join USER_ROLE ur on ur.RoleId = r.Id left join USER u on u.Id = ur.UserId where u.userId = :UserId) wmTempTable
        ]]>
    <query-param name="UserId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getTeamManagerName">
        <![CDATA[
        select CONCAT(u.firstName,' ', u.lastName) as firstName from ROLE r join USER_ROLE ur on r.id=ur.roleId left join USER u on u.Id = ur.UserId WHERE FIND_IN_SET (r.role,:roles)
        ]]>
    <query-param name="roles" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getTeamManagerName__count">
        <![CDATA[
        select count(*) from (select CONCAT(u.firstName,' ', u.lastName) as firstName from ROLE r join USER_ROLE ur on r.id=ur.roleId left join USER u on u.Id = ur.UserId WHERE FIND_IN_SET (r.role,:roles)) wmTempTable
        ]]>
    <query-param name="roles" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getWorkCtegoryByCode">
        <![CDATA[
        select  dv.Code from DomainValueType dvt  join DomainValue dv on dvt.ID = dv.`DomainValueType` where dv.IsActive=true and dvt.Code = :workCategory
        ]]>
    <query-param name="workCategory" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getWorkCtegoryByCode__count">
        <![CDATA[
        select count(*) from (select  dv.Code from DomainValueType dvt  join DomainValue dv on dvt.ID = dv.`DomainValueType` where dv.IsActive=true and dvt.Code = :workCategory) wmTempTable
        ]]>
    <query-param name="workCategory" type="java.lang.String"/>
    </sql-query>

    <sql-query name="Query_GetQueuesByUserId">
        <![CDATA[
        SELECT DISTINCT QueueId FROM QUEUE_GROUP INNER JOIN QUEUE on QUEUE.ID = QUEUE_GROUP.QueueId WHERE groupId IN (SELECT DISTINCT groupId FROM USER_GROUP WHERE userId = :userId) ORDER BY QUEUE.`Rank` ASC
        ]]>
    <query-param name="userId" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="Query_GetQueuesByUserId__count">
        <![CDATA[
        select count(*) from (SELECT DISTINCT QueueId FROM QUEUE_GROUP INNER JOIN QUEUE on QUEUE.ID = QUEUE_GROUP.QueueId WHERE groupId IN (SELECT DISTINCT groupId FROM USER_GROUP WHERE userId = :userId) ORDER BY QUEUE.`Rank` ASC) wmTempTable
        ]]>
    <query-param name="userId" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="getPermissionByRoleId">
        <![CDATA[
        select PERMISSION.Id,PERMISSION.Name,PERMISSION.Description from PERMISSION where id IN(select ROLE_PERMISSION.PermissionId from ROLE_PERMISSION where ROLE_PERMISSION.RoleId = :RoleId)
        ]]>
    <query-param name="RoleId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getPermissionByRoleId__count">
        <![CDATA[
        select count(*) from (select PERMISSION.Id,PERMISSION.Name,PERMISSION.Description from PERMISSION where id IN(select ROLE_PERMISSION.PermissionId from ROLE_PERMISSION where ROLE_PERMISSION.RoleId = :RoleId)) wmTempTable
        ]]>
    <query-param name="RoleId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="Query_GetDomainValueByIdWithActiveFlag">
        <![CDATA[
        SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, ParentDVQuery.IsActive, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND ParentDVQuery.id = :domainValueId AND
CASE WHEN :showAll IS TRUE
    THEN (ParentDVQuery.isActive = true OR ParentDVQuery.isActive = false)
    ELSE ParentDVQuery.isActive = :isActiveFlag 
END
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC
        ]]>
    <query-param name="selectedLocale" type="java.lang.String"/>
    <query-param name="domainValueId" type="java.lang.Integer"/>
    <query-param name="showAll" type="java.lang.Boolean"/>
    <query-param name="isActiveFlag" type="java.lang.Boolean"/>
    </sql-query>

    <sql-query name="Query_GetDomainValueByIdWithActiveFlag__count">
        <![CDATA[
        select count(*) from (SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, ParentDVQuery.IsActive, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND ParentDVQuery.id = :domainValueId AND
CASE WHEN :showAll IS TRUE
    THEN (ParentDVQuery.isActive = true OR ParentDVQuery.isActive = false)
    ELSE ParentDVQuery.isActive = :isActiveFlag 
END
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC) wmTempTable
        ]]>
    <query-param name="selectedLocale" type="java.lang.String"/>
    <query-param name="domainValueId" type="java.lang.Integer"/>
    <query-param name="showAll" type="java.lang.Boolean"/>
    <query-param name="isActiveFlag" type="java.lang.Boolean"/>
    </sql-query>

    <sql-query name="deleteRolePermission">
        <![CDATA[
        DELETE FROM ROLE_PERMISSION WHERE RoleId = :RoleId
        ]]>
    <query-param name="RoleId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getLatestNotes">
        <![CDATA[
        select *  from ENTITY_NOTES where entityId=:entityId order by createdOn DESC
        ]]>
    <query-param name="entityId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getLatestNotes__count">
        <![CDATA[
        select count(*) from (select *  from ENTITY_NOTES where entityId=:entityId order by createdOn DESC) wmTempTable
        ]]>
    <query-param name="entityId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getAllRolePermission">
        <![CDATA[
        select ROLE_PERMISSION.ID,ROLE_PERMISSION.RoleId,ROLE_PERMISSION.PermissionId from ROLE_PERMISSION where RoleId IS NOT NULL
        ]]>
    </sql-query>

    <sql-query name="getAllRolePermission__count">
        <![CDATA[
        select count(*) from (select ROLE_PERMISSION.ID,ROLE_PERMISSION.RoleId,ROLE_PERMISSION.PermissionId from ROLE_PERMISSION where RoleId IS NOT NULL) wmTempTable
        ]]>
    </sql-query>

    <sql-query name="QueueUnLock">
        <![CDATA[
        update QUEUE set IsLocked = false,  LockedBy = null, UpdatedBy = :updatedBy, UpdatedOn = :updatedOn  where ID = :id
        ]]>
    <query-param name="updatedBy" type="java.lang.Integer"/>
    <query-param name="updatedOn" type="java.sql.Timestamp"/>
    <query-param name="id" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="deleteGroupRoleByRoleId">
        <![CDATA[
        DELETE FROM GROUP_ROLE WHERE RoleId = :RoleId
        ]]>
    <query-param name="RoleId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="Query_GetDomainValueById">
        <![CDATA[
        SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, ParentDVQuery.IsActive, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND ParentDVQuery.id = :domainValueId
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC
        ]]>
    <query-param name="selectedLocale" type="java.lang.String"/>
    <query-param name="domainValueId" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="Query_GetDomainValueById__count">
        <![CDATA[
        select count(*) from (SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, ParentDVQuery.IsActive, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND ParentDVQuery.id = :domainValueId
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC) wmTempTable
        ]]>
    <query-param name="selectedLocale" type="java.lang.String"/>
    <query-param name="domainValueId" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="getRolesPermission">
        <![CDATA[
        select ROLE_PERMISSION.ID,ROLE_PERMISSION.RoleId,ROLE_PERMISSION.PermissionId from ROLE_PERMISSION where RoleId = :RoleId
        ]]>
    <query-param name="RoleId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getRolesPermission__count">
        <![CDATA[
        select count(*) from (select ROLE_PERMISSION.ID,ROLE_PERMISSION.RoleId,ROLE_PERMISSION.PermissionId from ROLE_PERMISSION where RoleId = :RoleId) wmTempTable
        ]]>
    <query-param name="RoleId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getManagerBasedOnTeamId">
        <![CDATA[
        select u.id,u.firstName,CONCAT(u.firstName,' ', u.lastName) as managerName from TEAM t join TEAM_USER tu on t.ID = tu.teamId join USER u on tu.userId=u.id where t.ID=:teamId
        ]]>
    <query-param name="teamId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getManagerBasedOnTeamId__count">
        <![CDATA[
        select count(*) from (select u.id,u.firstName,CONCAT(u.firstName,' ', u.lastName) as managerName from TEAM t join TEAM_USER tu on t.ID = tu.teamId join USER u on tu.userId=u.id where t.ID=:teamId) wmTempTable
        ]]>
    <query-param name="teamId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="Query_GetAllDomainValuesTwoParent">
        <![CDATA[
        SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, DomainValueType.Code AS DVTypeCode, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id INNER JOIN DomainValueRelation ON ParentDVQuery.id = DomainValueRelation.DomainValueId LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :suppliedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :suppliedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND DomainValueType.Code = :domainValueTypeCode AND DomainValueRelation.ParentDomainValueId1 = :parent1DomainValueId AND DomainValueRelation.ParentDomainValueId2 = :parent2DomainValueId AND ParentDVQuery.IsActive = true 
AND 
CASE WHEN :dvDescription IS NULL
THEN TRUE
ELSE
    ParentDVDescQuery.description LIKE :dvDescription
END 
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC
        ]]>
    <query-param name="suppliedLocale" type="java.lang.String"/>
    <query-param name="domainValueTypeCode" type="java.lang.String"/>
    <query-param name="parent1DomainValueId" type="java.lang.Integer"/>
    <query-param name="parent2DomainValueId" type="java.lang.Integer"/>
    <query-param name="dvDescription" type="java.lang.String"/>
    </sql-query>

    <sql-query name="Query_GetAllDomainValuesTwoParent__count">
        <![CDATA[
        select count(*) from (SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, DomainValueType.Code AS DVTypeCode, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id INNER JOIN DomainValueRelation ON ParentDVQuery.id = DomainValueRelation.DomainValueId LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :suppliedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :suppliedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND DomainValueType.Code = :domainValueTypeCode AND DomainValueRelation.ParentDomainValueId1 = :parent1DomainValueId AND DomainValueRelation.ParentDomainValueId2 = :parent2DomainValueId AND ParentDVQuery.IsActive = true 
AND 
CASE WHEN :dvDescription IS NULL
THEN TRUE
ELSE
    ParentDVDescQuery.description LIKE :dvDescription
END 
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC) wmTempTable
        ]]>
    <query-param name="suppliedLocale" type="java.lang.String"/>
    <query-param name="domainValueTypeCode" type="java.lang.String"/>
    <query-param name="parent1DomainValueId" type="java.lang.Integer"/>
    <query-param name="parent2DomainValueId" type="java.lang.Integer"/>
    <query-param name="dvDescription" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getDvTypeById">
        <![CDATA[
        select dvt.Description from DomainValueType dvt where dvt.ID=:id
        ]]>
    <query-param name="id" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="getDvTypeById__count">
        <![CDATA[
        select count(*) from (select dvt.Description from DomainValueType dvt where dvt.ID=:id) wmTempTable
        ]]>
    <query-param name="id" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="Query_ActivityLog">
        <![CDATA[
        SELECT APPLICATION.id AS applicationId, APPLICATION.applicationNumber AS applicationNumber, ACTIVITY.id AS activityId, ActivityTypeDV.code AS activityTypeCode, ActivityTypeDesc.description AS activityTypeDesc, ACTIVITY.name AS activityName, ACTIVITY.description AS activityDesc, ACTIVITY.applicationStatus AS appStatusId, AppStatusDVDesc.description AS appStatusDesc, ACTIVITY.startTime AS activityStartTime, ACTIVITY.endTime AS activityEndTime, ACTIVITY.duration AS activityDuration, ACTIVITY.username AS activityPerformedBy, ACTIVITY_PAYLOAD.id AS activityPayloadId 
FROM APPLICATION INNER JOIN ACTIVITY ON APPLICATION.id = ACTIVITY.applicationId LEFT JOIN ACTIVITY_PAYLOAD ON ACTIVITY_PAYLOAD.activityId = ACTIVITY.id LEFT JOIN DomainValue AS ActivityTypeDV ON ActivityTypeDV.id = ACTIVITY.type LEFT JOIN DomainValueDescription AS ActivityTypeDesc ON ActivityTypeDesc.DomainValueId = ActivityTypeDV.id LEFT JOIN DomainValue AS AppStatusDV ON AppStatusDV.id = ACTIVITY.applicationStatus LEFT JOIN DomainValueDescription AS AppStatusDVDesc ON AppStatusDVDesc.DomainValueId = AppStatusDV.id 
WHERE 
CASE WHEN ACTIVITY.applicationStatus IS NULL
THEN TRUE
ELSE
    CASE WHEN (SELECT DomainValue.id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.id = DomainValueDescription.DomainValueId WHERE DomainValue.id = ACTIVITY.applicationStatus AND DomainValueDescription.Locale = :userLocale) IS NULL 
    THEN (SELECT DomainValue.id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.id = DomainValueDescription.DomainValueId WHERE DomainValue.id = ACTIVITY.applicationStatus AND DomainValueDescription.id = AppStatusDVDesc.id AND DomainValueDescription.Locale = 'en')
    ELSE (SELECT DomainValue.id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.id = DomainValueDescription.DomainValueId WHERE DomainValue.id = ACTIVITY.applicationStatus AND DomainValueDescription.id = AppStatusDVDesc.id AND DomainValueDescription.Locale = :userLocale)
    END
END AND 
CASE WHEN ACTIVITY.type IS NULL
THEN TRUE
ELSE
    CASE WHEN (SELECT DomainValue.id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.id = DomainValueDescription.DomainValueId WHERE DomainValue.id = ACTIVITY.type AND DomainValueDescription.Locale = :userLocale) IS NULL 
    THEN (SELECT DomainValue.id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.id = DomainValueDescription.DomainValueId WHERE DomainValue.id = ACTIVITY.type AND DomainValueDescription.id = ActivityTypeDesc.id AND DomainValueDescription.Locale = 'en')
    ELSE (SELECT DomainValue.id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.id = DomainValueDescription.DomainValueId WHERE DomainValue.id = ACTIVITY.type AND DomainValueDescription.id = ActivityTypeDesc.id AND DomainValueDescription.Locale = :userLocale)
    END
END AND 
CASE WHEN :applicationNumber IS NULL
THEN TRUE
ELSE
    APPLICATION.applicationNumber = :applicationNumber
END AND 
CASE WHEN :activityType IS NULL
THEN TRUE
ELSE
    ACTIVITY.type = :activityType
END AND 
CASE WHEN :activityName IS NULL
THEN TRUE
ELSE
    ACTIVITY.name LIKE :activityName
END AND 
CASE WHEN :isAppHistory
THEN TRUE
ELSE
    CASE WHEN :createdDateStart IS NULL
    THEN DATE(ACTIVITY.startTime) <= CURRENT_DATE()
    ELSE
        DATE_FORMAT(ACTIVITY.startTime,"%Y-%m-%d %H:%i:%S.%f") >= DATE_FORMAT(:createdDateStart,"%Y-%m-%d %H:%i:%S.%f")
    END AND 
    CASE WHEN :createdDateEnd IS NULL
    THEN DATE(ACTIVITY.startTime) <= CURRENT_DATE()
    ELSE
        DATE_FORMAT(ACTIVITY.startTime,"%Y-%m-%d %H:%i:%S.%f") <= DATE_FORMAT(:createdDateEnd,"%Y-%m-%d %H:%i:%S.%f")
    END
END
        ]]>
    <query-param name="userLocale" type="java.lang.String"/>
    <query-param name="applicationNumber" type="java.lang.String"/>
    <query-param name="activityType" type="java.lang.Integer"/>
    <query-param name="activityName" type="java.lang.String"/>
    <query-param name="isAppHistory" type="java.lang.Boolean"/>
    <query-param name="createdDateStart" type="java.sql.Timestamp"/>
    <query-param name="createdDateEnd" type="java.sql.Timestamp"/>
    </sql-query>

    <sql-query name="Query_ActivityLog__count">
        <![CDATA[
        select count(*) from (SELECT APPLICATION.id AS applicationId, APPLICATION.applicationNumber AS applicationNumber, ACTIVITY.id AS activityId, ActivityTypeDV.code AS activityTypeCode, ActivityTypeDesc.description AS activityTypeDesc, ACTIVITY.name AS activityName, ACTIVITY.description AS activityDesc, ACTIVITY.applicationStatus AS appStatusId, AppStatusDVDesc.description AS appStatusDesc, ACTIVITY.startTime AS activityStartTime, ACTIVITY.endTime AS activityEndTime, ACTIVITY.duration AS activityDuration, ACTIVITY.username AS activityPerformedBy, ACTIVITY_PAYLOAD.id AS activityPayloadId 
FROM APPLICATION INNER JOIN ACTIVITY ON APPLICATION.id = ACTIVITY.applicationId LEFT JOIN ACTIVITY_PAYLOAD ON ACTIVITY_PAYLOAD.activityId = ACTIVITY.id LEFT JOIN DomainValue AS ActivityTypeDV ON ActivityTypeDV.id = ACTIVITY.type LEFT JOIN DomainValueDescription AS ActivityTypeDesc ON ActivityTypeDesc.DomainValueId = ActivityTypeDV.id LEFT JOIN DomainValue AS AppStatusDV ON AppStatusDV.id = ACTIVITY.applicationStatus LEFT JOIN DomainValueDescription AS AppStatusDVDesc ON AppStatusDVDesc.DomainValueId = AppStatusDV.id 
WHERE 
CASE WHEN ACTIVITY.applicationStatus IS NULL
THEN TRUE
ELSE
    CASE WHEN (SELECT DomainValue.id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.id = DomainValueDescription.DomainValueId WHERE DomainValue.id = ACTIVITY.applicationStatus AND DomainValueDescription.Locale = :userLocale) IS NULL 
    THEN (SELECT DomainValue.id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.id = DomainValueDescription.DomainValueId WHERE DomainValue.id = ACTIVITY.applicationStatus AND DomainValueDescription.id = AppStatusDVDesc.id AND DomainValueDescription.Locale = 'en')
    ELSE (SELECT DomainValue.id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.id = DomainValueDescription.DomainValueId WHERE DomainValue.id = ACTIVITY.applicationStatus AND DomainValueDescription.id = AppStatusDVDesc.id AND DomainValueDescription.Locale = :userLocale)
    END
END AND 
CASE WHEN ACTIVITY.type IS NULL
THEN TRUE
ELSE
    CASE WHEN (SELECT DomainValue.id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.id = DomainValueDescription.DomainValueId WHERE DomainValue.id = ACTIVITY.type AND DomainValueDescription.Locale = :userLocale) IS NULL 
    THEN (SELECT DomainValue.id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.id = DomainValueDescription.DomainValueId WHERE DomainValue.id = ACTIVITY.type AND DomainValueDescription.id = ActivityTypeDesc.id AND DomainValueDescription.Locale = 'en')
    ELSE (SELECT DomainValue.id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.id = DomainValueDescription.DomainValueId WHERE DomainValue.id = ACTIVITY.type AND DomainValueDescription.id = ActivityTypeDesc.id AND DomainValueDescription.Locale = :userLocale)
    END
END AND 
CASE WHEN :applicationNumber IS NULL
THEN TRUE
ELSE
    APPLICATION.applicationNumber = :applicationNumber
END AND 
CASE WHEN :activityType IS NULL
THEN TRUE
ELSE
    ACTIVITY.type = :activityType
END AND 
CASE WHEN :activityName IS NULL
THEN TRUE
ELSE
    ACTIVITY.name LIKE :activityName
END AND 
CASE WHEN :isAppHistory
THEN TRUE
ELSE
    CASE WHEN :createdDateStart IS NULL
    THEN DATE(ACTIVITY.startTime) <= CURRENT_DATE()
    ELSE
        DATE_FORMAT(ACTIVITY.startTime,"%Y-%m-%d %H:%i:%S.%f") >= DATE_FORMAT(:createdDateStart,"%Y-%m-%d %H:%i:%S.%f")
    END AND 
    CASE WHEN :createdDateEnd IS NULL
    THEN DATE(ACTIVITY.startTime) <= CURRENT_DATE()
    ELSE
        DATE_FORMAT(ACTIVITY.startTime,"%Y-%m-%d %H:%i:%S.%f") <= DATE_FORMAT(:createdDateEnd,"%Y-%m-%d %H:%i:%S.%f")
    END
END) wmTempTable
        ]]>
    <query-param name="userLocale" type="java.lang.String"/>
    <query-param name="applicationNumber" type="java.lang.String"/>
    <query-param name="activityType" type="java.lang.Integer"/>
    <query-param name="activityName" type="java.lang.String"/>
    <query-param name="isAppHistory" type="java.lang.Boolean"/>
    <query-param name="createdDateStart" type="java.sql.Timestamp"/>
    <query-param name="createdDateEnd" type="java.sql.Timestamp"/>
    </sql-query>

    <sql-query name="deleteQueueGroup">
        <![CDATA[
        delete from QUEUE_GROUP where QueueId=:QueueId OR GroupId=:GroupId
        ]]>
    <query-param name="QueueId" type="java.lang.String"/>
    <query-param name="GroupId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getGroupByUserId">
        <![CDATA[
        select `GROUP`.Id,`GROUP`.Name,`GROUP`.active,`GROUP`.description from `GROUP` where Id IN(select USER_GROUP.groupId from USER_GROUP left join USER on USER_GROUP.userId = USER.id where USER_GROUP.userId = :UserId)
        ]]>
    <query-param name="UserId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getGroupByUserId__count">
        <![CDATA[
        select count(*) from (select `GROUP`.Id,`GROUP`.Name,`GROUP`.active,`GROUP`.description from `GROUP` where Id IN(select USER_GROUP.groupId from USER_GROUP left join USER on USER_GROUP.userId = USER.id where USER_GROUP.userId = :UserId)) wmTempTable
        ]]>
    <query-param name="UserId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getRoleByUserId">
        <![CDATA[
        select ROLE.id,ROLE.role from ROLE where id IN(select GROUP_ROLE.roleId from `GROUP_ROLE` where `GroupId` IN(select USER_GROUP.groupId from USER_GROUP join USER on USER_GROUP.userId = USER.id where USER_GROUP.userId = :UserId))
        ]]>
    <query-param name="UserId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getRoleByUserId__count">
        <![CDATA[
        select count(*) from (select ROLE.id,ROLE.role from ROLE where id IN(select GROUP_ROLE.roleId from `GROUP_ROLE` where `GroupId` IN(select USER_GROUP.groupId from USER_GROUP join USER on USER_GROUP.userId = USER.id where USER_GROUP.userId = :UserId))) wmTempTable
        ]]>
    <query-param name="UserId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getTeamsAndAssociatedUsers">
        <![CDATA[
        select ID, TeamID, TeamName, count(distinct userid) as userCount from
(
select tid as ID, TeamID, userid,TeamName from(
select t.id as tid, t.TeamID, tu.userid, t.TeamName from TEAM t left outer join TEAM_USER tu on t.ID = tu.teamID where t.teamID is null or lower(t.teamID) like lower(:teamId))a
)b group by TeamID order by ID desc
        ]]>
    <query-param name="teamId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getTeamsAndAssociatedUsers__count">
        <![CDATA[
        select count(*) from (select ID, TeamID, TeamName, count(distinct userid) as userCount from
(
select tid as ID, TeamID, userid,TeamName from(
select t.id as tid, t.TeamID, tu.userid, t.TeamName from TEAM t left outer join TEAM_USER tu on t.ID = tu.teamID where t.teamID is null or lower(t.teamID) like lower(:teamId))a
)b group by TeamID order by ID desc) wmTempTable
        ]]>
    <query-param name="teamId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="Query_GetAllDomainValuesByDvTypeCode">
        <![CDATA[
        SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, DomainValueType.Code AS DVTypeCode, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND DomainValueType.Code = :domainValueTypeCode AND ParentDVQuery.IsActive = true
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL AND :isAlphaSort = false) 
    THEN ParentDVQuery.RankOrder
END ASC,
CASE WHEN (ParentDVQuery.IsDefault = false AND (ParentDVQuery.RankOrder IS NULL OR :isAlphaSort = true))
    THEN ParentDVDescQuery.Description
END ASC
        ]]>
    <query-param name="selectedLocale" type="java.lang.String"/>
    <query-param name="domainValueTypeCode" type="java.lang.String"/>
    <query-param name="isAlphaSort" type="java.lang.Boolean"/>
    </sql-query>

    <sql-query name="Query_GetAllDomainValuesByDvTypeCode__count">
        <![CDATA[
        select count(*) from (SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, DomainValueType.Code AS DVTypeCode, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND DomainValueType.Code = :domainValueTypeCode AND ParentDVQuery.IsActive = true
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL AND :isAlphaSort = false) 
    THEN ParentDVQuery.RankOrder
END ASC,
CASE WHEN (ParentDVQuery.IsDefault = false AND (ParentDVQuery.RankOrder IS NULL OR :isAlphaSort = true))
    THEN ParentDVDescQuery.Description
END ASC) wmTempTable
        ]]>
    <query-param name="selectedLocale" type="java.lang.String"/>
    <query-param name="domainValueTypeCode" type="java.lang.String"/>
    <query-param name="isAlphaSort" type="java.lang.Boolean"/>
    </sql-query>

    <sql-query name="DVSearchByCodeAndDescription">
        <![CDATA[
        SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVQuery.DomainValueType, ParentDVDescQuery.Description, ParentDVQuery.IsActive, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder, concat(CreatedByUser.firstName,' ',CreatedByUser.lastName) AS createdBy, ParentDVQuery.createdOn, concat(UpdatedByUser.firstName,' ',UpdatedByUser.lastName) AS updatedBy, ParentDVQuery.updatedOn 
    FROM DomainValue AS ParentDVQuery LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId LEFT JOIN USER AS CreatedByUser ON ParentDVQuery.CreatedBy = CreatedByUser.id LEFT JOIN USER AS UpdatedByUser ON ParentDVQuery.UpdatedBy = UpdatedByUser.id
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :defaultLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :defaultLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND ParentDVQuery.DomainValueType = :domainValueTypeId AND
CASE
    WHEN :showAll = true
        THEN 
            (ParentDVQuery.IsActive = true OR ParentDVQuery.IsActive = false)
        ELSE
            ParentDVQuery.IsActive = :isActiveFlag
    END
    AND (ParentDVQuery.Code LIKE :searchValue OR ParentDVDescQuery.Description LIKE :searchValue)
        ]]>
    <query-param name="defaultLocale" type="java.lang.String"/>
    <query-param name="domainValueTypeId" type="java.lang.String"/>
    <query-param name="showAll" type="java.lang.Boolean"/>
    <query-param name="isActiveFlag" type="java.lang.Boolean"/>
    <query-param name="searchValue" type="java.lang.String"/>
    </sql-query>

    <sql-query name="DVSearchByCodeAndDescription__count">
        <![CDATA[
        select count(*) from (SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVQuery.DomainValueType, ParentDVDescQuery.Description, ParentDVQuery.IsActive, ParentDVQuery.IsDefault, ParentDVQuery.RankOrder, concat(CreatedByUser.firstName,' ',CreatedByUser.lastName) AS createdBy, ParentDVQuery.createdOn, concat(UpdatedByUser.firstName,' ',UpdatedByUser.lastName) AS updatedBy, ParentDVQuery.updatedOn 
    FROM DomainValue AS ParentDVQuery LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId LEFT JOIN USER AS CreatedByUser ON ParentDVQuery.CreatedBy = CreatedByUser.id LEFT JOIN USER AS UpdatedByUser ON ParentDVQuery.UpdatedBy = UpdatedByUser.id
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :defaultLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :defaultLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND ParentDVQuery.DomainValueType = :domainValueTypeId AND
CASE
    WHEN :showAll = true
        THEN 
            (ParentDVQuery.IsActive = true OR ParentDVQuery.IsActive = false)
        ELSE
            ParentDVQuery.IsActive = :isActiveFlag
    END
    AND (ParentDVQuery.Code LIKE :searchValue OR ParentDVDescQuery.Description LIKE :searchValue)) wmTempTable
        ]]>
    <query-param name="defaultLocale" type="java.lang.String"/>
    <query-param name="domainValueTypeId" type="java.lang.String"/>
    <query-param name="showAll" type="java.lang.Boolean"/>
    <query-param name="isActiveFlag" type="java.lang.Boolean"/>
    <query-param name="searchValue" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getPermissionGroupByRoleId">
        <![CDATA[
        select COUNT(*) from PERMISSION where id IN(select ROLE_PERMISSION.PermissionId from ROLE_PERMISSION where ROLE_PERMISSION.RoleId = :RoleId) UNION select COUNT(*) from `GROUP_ROLE`where RoleId =24
        ]]>
    <query-param name="RoleId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getPermissionGroupByRoleId__count">
        <![CDATA[
        select count(*) from (select COUNT(*) from PERMISSION where id IN(select ROLE_PERMISSION.PermissionId from ROLE_PERMISSION where ROLE_PERMISSION.RoleId = :RoleId) UNION select COUNT(*) from `GROUP_ROLE`where RoleId =24) wmTempTable
        ]]>
    <query-param name="RoleId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="Query_GetAllDVsByDVTypeWithActiveFlag">
        <![CDATA[
        SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, DomainValueType.Code AS DVTypeCode, ParentDVQuery.IsDefault, ParentDVQuery.IsActive, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND DomainValueType.Code = :domainValueTypeCode AND
CASE WHEN :showAll IS TRUE
    THEN (ParentDVQuery.isActive = true OR ParentDVQuery.isActive = false)
    ELSE ParentDVQuery.isActive = :isActiveFlag 
END
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC
        ]]>
    <query-param name="selectedLocale" type="java.lang.String"/>
    <query-param name="domainValueTypeCode" type="java.lang.String"/>
    <query-param name="showAll" type="java.lang.Boolean"/>
    <query-param name="isActiveFlag" type="java.lang.Boolean"/>
    </sql-query>

    <sql-query name="Query_GetAllDVsByDVTypeWithActiveFlag__count">
        <![CDATA[
        select count(*) from (SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, DomainValueType.Code AS DVTypeCode, ParentDVQuery.IsDefault, ParentDVQuery.IsActive, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND DomainValueType.Code = :domainValueTypeCode AND
CASE WHEN :showAll IS TRUE
    THEN (ParentDVQuery.isActive = true OR ParentDVQuery.isActive = false)
    ELSE ParentDVQuery.isActive = :isActiveFlag 
END
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC) wmTempTable
        ]]>
    <query-param name="selectedLocale" type="java.lang.String"/>
    <query-param name="domainValueTypeCode" type="java.lang.String"/>
    <query-param name="showAll" type="java.lang.Boolean"/>
    <query-param name="isActiveFlag" type="java.lang.Boolean"/>
    </sql-query>

    <sql-query name="getGroupsRolesByUserId">
        <![CDATA[
        select COUNT(*) from `GROUP` where Id IN(select USER_GROUP.groupId from USER_GROUP left join USER on USER_GROUP.userId = USER.id where USER_GROUP.userId = :UserId) UNION  select COUNT(*) from ROLE where id IN(select GROUP_ROLE.roleId from `GROUP_ROLE` where `GroupId` IN(select USER_GROUP.groupId from USER_GROUP left join USER on USER_GROUP.userId = USER.id where USER_GROUP.userId = :UserId))
        ]]>
    <query-param name="UserId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getGroupsRolesByUserId__count">
        <![CDATA[
        select count(*) from (select COUNT(*) from `GROUP` where Id IN(select USER_GROUP.groupId from USER_GROUP left join USER on USER_GROUP.userId = USER.id where USER_GROUP.userId = :UserId) UNION  select COUNT(*) from ROLE where id IN(select GROUP_ROLE.roleId from `GROUP_ROLE` where `GroupId` IN(select USER_GROUP.groupId from USER_GROUP left join USER on USER_GROUP.userId = USER.id where USER_GROUP.userId = :UserId))) wmTempTable
        ]]>
    <query-param name="UserId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getManagerByTeamName">
        <![CDATA[
        select u.id,u.firstName,CONCAT(u.firstName,' ', u.lastName) as managerName from TEAM t join TEAM_USER tu on t.ID = tu.teamId join USER u on tu.userId=u.id where t.teamId=:teamId
        ]]>
    <query-param name="teamId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getManagerByTeamName__count">
        <![CDATA[
        select count(*) from (select u.id,u.firstName,CONCAT(u.firstName,' ', u.lastName) as managerName from TEAM t join TEAM_USER tu on t.ID = tu.teamId join USER u on tu.userId=u.id where t.teamId=:teamId) wmTempTable
        ]]>
    <query-param name="teamId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="Query_GetDVByCodeAndTypeCodeWithActiveFlag">
        <![CDATA[
        SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, DomainValueType.Code AS DVTypeCode, ParentDVQuery.IsDefault, ParentDVQuery.IsActive, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND ParentDVQuery.Code = :domainValueCode AND DomainValueType.Code = :domainValueTypeCode AND
CASE WHEN :showAll IS TRUE
    THEN (ParentDVQuery.isActive = true OR ParentDVQuery.isActive = false)
    ELSE ParentDVQuery.isActive = :isActiveFlag 
END
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC
        ]]>
    <query-param name="selectedLocale" type="java.lang.String"/>
    <query-param name="domainValueCode" type="java.lang.String"/>
    <query-param name="domainValueTypeCode" type="java.lang.String"/>
    <query-param name="showAll" type="java.lang.Boolean"/>
    <query-param name="isActiveFlag" type="java.lang.Boolean"/>
    </sql-query>

    <sql-query name="Query_GetDVByCodeAndTypeCodeWithActiveFlag__count">
        <![CDATA[
        select count(*) from (SELECT ParentDVQuery.Id, ParentDVQuery.Code, ParentDVDescQuery.Description, DomainValueType.Code AS DVTypeCode, ParentDVQuery.IsDefault, ParentDVQuery.IsActive, ParentDVQuery.RankOrder AS RankOrder, false AS IsSelected FROM DomainValue AS ParentDVQuery INNER JOIN DomainValueType ON ParentDVQuery.DomainValueType = DomainValueType.id LEFT JOIN DomainValueDescription AS ParentDVDescQuery ON ParentDVQuery.id = ParentDVDescQuery.DomainValueId
WHERE 
CASE WHEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id) IS NULL
THEN 
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = 'en' AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
ELSE
(SELECT DomainValue.Id FROM DomainValue INNER JOIN DomainValueDescription ON DomainValue.Id = DomainValueDescription.DomainValueId WHERE DomainValueDescription.Locale = :selectedLocale AND DomainValue.id = ParentDVQuery.id AND DomainValueDescription.id = ParentDVDescQuery.id)
END
AND ParentDVQuery.Code = :domainValueCode AND DomainValueType.Code = :domainValueTypeCode AND
CASE WHEN :showAll IS TRUE
    THEN (ParentDVQuery.isActive = true OR ParentDVQuery.isActive = false)
    ELSE ParentDVQuery.isActive = :isActiveFlag 
END
ORDER BY 
CASE WHEN (ParentDVQuery.isDefault = true) 
    THEN ParentDVQuery.updatedOn
END DESC,
CASE WHEN (ParentDVQuery.isDefault = false AND ParentDVQuery.RankOrder IS NOT NULL) 
    THEN ParentDVQuery.RankOrder
    WHEN (ParentDVQuery.IsDefault = false AND ParentDVQuery.RankOrder IS NULL) 
    THEN ParentDVDescQuery.Description
END ASC) wmTempTable
        ]]>
    <query-param name="selectedLocale" type="java.lang.String"/>
    <query-param name="domainValueCode" type="java.lang.String"/>
    <query-param name="domainValueTypeCode" type="java.lang.String"/>
    <query-param name="showAll" type="java.lang.Boolean"/>
    <query-param name="isActiveFlag" type="java.lang.Boolean"/>
    </sql-query>

    <sql-query name="QueueLock">
        <![CDATA[
        update QUEUE set IsLocked = true, LockedBy = :lockedBy, UpdatedBy = :updatedBy, UpdatedOn = :updatedOn    where ID = :id
        ]]>
    <query-param name="lockedBy" type="java.lang.String"/>
    <query-param name="updatedBy" type="java.lang.String"/>
    <query-param name="updatedOn" type="java.sql.Timestamp"/>
    <query-param name="id" type="java.lang.Integer"/>
    </sql-query>

    <sql-query name="getWorkCategoryByUserId">
        <![CDATA[
        select work_category from WORKCATEGORY_USER where userid=:userId
        ]]>
    <query-param name="userId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="getWorkCategoryByUserId__count">
        <![CDATA[
        select count(*) from (select work_category from WORKCATEGORY_USER where userid=:userId) wmTempTable
        ]]>
    <query-param name="userId" type="java.lang.String"/>
    </sql-query>

    <sql-query name="deleteTeamUser">
        <![CDATA[
        delete from TEAM_USER where teamId=:teamId
        ]]>
    <query-param name="teamId" type="java.lang.Integer"/>
    </sql-query>
</hibernate-mapping>
